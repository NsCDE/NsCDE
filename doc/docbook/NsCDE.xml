<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY appversion "2.0">
<!ENTITY date "December 2021">
<!ENTITY app "NsCDE">
]>

<!-- =============Document Header ============================= -->
<article id="index" lang="en"> 
<!-- please do not change the id; for translations, change lang to -->
<!-- appropriate code -->
<articleinfo>
 <title>Not so Common Desktop Environment (&app;) Manual</title>
 <abstract role="description">
    <para>
    This manual describes NsCDE: Not so Common Desktop Environment
    </para>
    </abstract>
    <copyright>
      <year>2019</year>
      <year>2020</year>
      <year>2021</year>
      <year>2022</year>
      <holder>M. Z.</holder>
    </copyright>

    <authorgroup> 
      <author>
        <firstname>M. </firstname>
        <surname>Z.</surname>
      </author>
    </authorgroup> 

    <releaseinfo>
      This manual describes version &appversion; of &app;.
    </releaseinfo> 
</articleinfo> 

<!-- ============= Index ===================================== -->
<indexterm zone="index"> 
<primary>&app;</primary> 
</indexterm>

<!-- ============= Document Body ============================= -->
<!-- ============= Introduction ============================== -->

<sect1 id="NsCDE-intro"> 
<title>Introduction</title> 

<sect2 id="NsCDE-whatis"> 
<title>What is NsCDE?</title> 

<para>
In a nutshell, NsCDE is CDE visual clone built with more moden tools around FVWM window manager.
Tehnically, it can also be considered a heavyweight FVWM theme enriched with additional free
software tools and applications, combining all this components into something which can be
called lightweight hybrid desktop environment. It can even be integrated into existing desktop
environments with session management as a window manager wrapper for session handling and
additional DE functionality.
</para>

<para>
NsCDE's main goal is to revive somewhat brutalist look and feel of the Common Desktop Environment
found on many UNIX and unix-like systems during nineties and first decade of the 21 century, but
with a more polished interface (XFT, unicode, dynamic changes, rich key and mouse bindings,
workspace pages, rich menus etc) and a goal to produce comfortable "retro" environment which is
not just a eye candy toy, but a real working environment for users who contrary to mainstream
trends really like CDE, thus making semi-optimal blend of usability and compatibility with modern
tools with look and feel which mainstream abadoned for some new fashion, and ... in a nutshell,
giving to user the best of the both worlds.
</para>

<para>
Main driver behind NsCDE is the excellent FVWM window manager with it's endless options for
customization, GUI Script engine, Colorsets, and modules. NsCDE is largely a wrapper around
FVWM - something like a heavyweight theme, sort of. The other important pars are FvwmScript
GUI in which CDE-like tools are written, GTK2 and GTK3 theme for unifying look and feel,
which can also extend to Qt4 and Qt5 with gtk engine of Qt, X settings which are following
the same theme rules, icon theme, python programs, converters and generators, korn shell
scripts, CDE-compatible backdrops and palettes and misc pieces for integration like CSS theme
for Firefox and Thunderbird, and stand alone integrated desktop-making parts like stalonetray,
dunst, xsettingsd, xscreensaver etc.
</para>
</sect2>

<sect2 id="NsCDE-why"> 
<title>Why NsCDE?</title>

<para>
Since the 90-ties, I have always liked this environment and it's somewhat crude socrealistic
look, described by some people as brutalism in achitecture. All that in a contrast to
"modern" Windows and GNOME flat black/white interfaces and Google's "material" design - which
are going in the opposite taste direction from what I always liked to see on my screen. I have
created this environment for my own usage 8-10 years ago and it was a patchwork, chaotic and
not well suited for sharing with someone. While it looked ok on the surface, behind it was a
years of ad hoc hacks and senseless configurations and scripts, dysfunctional menus etc.
Couple of months in a row I had a time and chance to rewrite this as a more consistent
environment, first for myself, and during this process, idea came to do it even better, and
put on the web for everyone else who may like this idea of CDE for 21st century. Year by year
NsCDE has 3 years now. Many things are added, changed, hardened, debugged.
</para>

<para>
NsCDE is intended for a people which doesn't like "modern" hypes, interfaces that try to mimic Mac
and Windows and reimplementing their (poor) ideas for non-technical user's desktops, and
reimplementing them even more poorly. Older and mature system administrators, programmers and
generally people from the Unix background are more likely to have attraction to NsCDE. It is
probably not well suited for beginners.
</para>

<para>
Of course, question arises: why not simply use original original CDE now when it is open sourced?
</para>

<para>
Apart from desirable look, because it has it's own problems: it is a product from 90-ties, based
on Motif and time has passed since then. In CDE there is no really smooth out of the box XFT font
rendering, no immediate application dynamic changes, there are insecure RPC and obsolete tooltalk
procedures even for starting local applications. Beside that, I have found dtwm, CDE's window
manager inferior to FVWM and some 3rd party solutions which can be paired with it. So I wanted the
best of the two worlds: good old retro look and feel from original CDE, but more flexible, modern
and maintained "drivers" behind it, which will allow for individual customizations as one find's
them fit for it's own amusement and usage. As it will be seen later, there are some small
intentional differences between CDE and NsCDE - a middle line between trying to stay as close as
possible to look of the CDE, but with more flexibility and functionality on the second and third
look.
</para>
</sect2>
</sect1>

<sect1 id="NsCDE-components">
<title>Components of the NsCDE</title>

<sect2 id="NsCDE-components-overview">
<title>Components overview</title>
<para>
NsCDE uses very extensive bunch of configurations, scripts and apps around FVWM. FVWM is in my
opinion very good model of free choice for people who like to have things set up by their own
wishes and who are aware what real freedom of choice is. A stunning contrast to policies forced
on Linux an Unix users in the last decade from the mainstream desktop players.
</para>

<para>
NsCDE is not using FVWM default <filename class="directory">$HOME/.fvwm</filename> if exists,
but sets <varname>$FVWM_USERDIR</varname> to <filename class="directory">$HOME/.NsCDE</filename>,
and uses <filename class="directory">$NSCDE_DATADIR/fvwm</filename> and
<filename class="directory">$NSCDE_DATADIR/default</filename> as a sources of configuration.
</para>

<para>
NsCDE configuration consists largely of files parsed by it's own scripts, and FVWM
configuration which is grouped in separate thematic files. System FVWM configuration
is initialized by <filename>nscde</filename> X startup wrapper which calls
<filename>Main.fvwmconf</filename>. This file, as well as the rest of FVWM functions
and code (except FvwmScript GUI programs) is located in <filename class="directory">$NSCDE_DATADIR/fvwm</filename>.
</para>

<para>
FVWM configuration sections are:

<itemizedlist>
<listitem><para>Animate.fvwmconf - FvwmAnimate module configuration</para></listitem>
<listitem><para>Backdrops.fvwmconf - Backdrops, read by FvwmBacker and FvwmPager</para></listitem>
<listitem><para>Backer.fvwmconf - FvwmBacker module configuration</para></listitem>
<listitem><para>Colorset.fvwmconf - FVWM Colorset definitions (generated for user in ~/.NsCDE)</para></listitem>
<listitem><para>Event.fvwmconf - FvwmEvent module configuration</para></listitem>
<listitem><para>FinishInit.fvwmconf - End of startap cleanup and safety last-second routines</para></listitem>
<listitem><para>Font-XXXdpi.fvwmconf - Set of fonts ad InfoStore variables used across FVWM</para></listitem>
<listitem><para>Form.fvwmconf - obsolete and not used by default, NsCDE does not use FvwmForm</para></listitem>
<listitem><para>FrontPanel.fvwmconf - selector of FrontPanel configuration which is going to be read</para></listitem>
<listitem><para>FrontPanel.fvwm2.fvwmconf - FrontPanel configuration for FVWM2</para></listitem>
<listitem><para>FrontPanel.fvwm3.fvwmconf - FrontPanel configuration for FVWM3</para></listitem>
<listitem><para>Functions.fvwmconf - almost all functions used by NsCDE FVWM setup, paired in logical sections</para></listitem>
<listitem><para>IconMan.fvwmconf - Not used by default</para></listitem>
<listitem><para>Ident.fvwmconf - FvwmIdent module configuration</para></listitem>
<listitem><para>Init.fvwmconf - Fallback and example of session statup. Usually run from ~/.NsCDE</para></listitem>
<listitem><para>Keybindings.fvwmconf - Static key bindings, without written menu hints</para></listitem>
<listitem><para>LocalPager.fvwmconf - Single Workspace floating FvwmPager configuration</para></listitem>
<listitem><para>Main.fvwmconf - Most important and early FVWM directives, environment and InfoStore variables, functions</para></listitem>
<listitem><para>Menus.fvwmconf - All FVWM Menus used or generated for NsCDE</para></listitem>
<listitem><para>Monitors.fvwmconf - Monitor and resolution static database as helper for some calculations</para></listitem>
<listitem><para>Mousebindings.fvwmconf - All mouse actions with and without keyboard modifiers</para></listitem>
<listitem><para>Sandbox.fvwmconf - not read by default, cleanup definitions for stripped down NsCDE sandbox mode</para></listitem>
<listitem><para>Script.fvwmconf - FvwmScript module defaults</para></listitem>
<listitem><para>Style.fvwmconf - All NsCDE FVWM Style directives, Menustyle, Cursorstyle, Decor addons etc</para></listitem>
<listitem><para>Subpanels.fvwmconf - Default system configuration for subpanels of the FrontPanel, generated on install.</para></listitem>
<listitem><para>WspLocPager.fvwmconf - Configuration of another local pager which uses FvwmPager, but for non-local workspaces</para></listitem>
<listitem><para>NsCDE.conf - de-facto main user configuration file. All important variables are here.</para></listitem>
</itemizedlist>

</para>

<para>
It should be noted that FVWM configuration system is created in a very flexible manner. While there
are only files of type "fvwmconf" in <filename class="directory">$NSCDE_DATADIR/fvwm</filename>,
user's <filename class="directory">$FVWM_USERDIR</filename> or "~/.NsCDE" can contain this 3 types
of FVWM configuration:
</para>

<para>
<itemizedlist>
<listitem><para>
Files with extension ".fvwmconf" are overriding defaults from the <filename class="directory">$NSCDE_DATADIR/fvwm</filename>.
In other words, if <filename>$NSCDE_USERDIR/Init.fvwmconf</filename> exists, it will be read instead
of <filename>$NSCDE_DATADIR/fvwm/Init.fvwmconf</filename>. For some parts of the FVWM configuration this
makes a sense, for most it doesn't.
</para></listitem>
<listitem><para>
Files with extension ".fvwmgen" are files which are generated by NsCDE tools and GUI programs. They
can be managed by hand, but usage of tools will overwrite them. They counterparts in the
<filename class="directory">$NSCDE_DATADIR/fvwm</filename> have extension ".fvwmconf", but if
for example <filename>$NSCDE_USERDIR/Colorset.fvwmgen</filename> exits, it will be read instead
of <filename>$NSCDE_DATADIR/fvwm/Colorset.fvwmconf</filename>. Putting static <filename>$NSCDE_USERDIR/Colorset.fvwmconf</filename>
will be unusual, and will disable GUI tools and FVWM under NsCDE to read dynamically generated configurations.
</para></listitem>
<listitem><para>
Third form of FVWM configuration in <filename class="directory">$NSCDE_USERDIR</filename> are ".fvwmlocal" files.
This files will extend (append) configuration read from their ".fvwmconf" and/or ".fvwmgen" files. Good examples
whould be Functions.fvwmlocal and Styles.fvwmlocal in <filename class="directory">$NSCDE_USERDIR</filename> to
add local custom functions and per-application styles.
</para></listitem>
</itemizedlist>
</para>

<para>
One notable exception to this system of configuration is the way FVWM Styles are read.
In addition to reading <filename>$FVWM_USERDIR/Style.fvwmlocal</filename> "early"
configuration in <filename>$FVWM_USERDIR/NsCDE-Style.override</filename> will be read from
<filename>$NSCDE_DATADIR/fvwm/Style.fvwmconf</filename> just after applying general core
style for all applications <emphasis>(*)</emphasis> but before reading custom application
styles and prior to reading <filename>$FVWM_USERDIR/Style.fvwmlocal</filename>.
This mechanism is intended for changing and overriding core style options which are not
customizable by the Window Style Manager. Putting core <emphasis>Style</emphasis> options
after NsCDE applications in the <filename>$NSCDE_DATADIR/fvwm/Style.fvwmconf</filename> are processed
can nullify overrides for that particular applications, this is why this mechanism is provided.
This file is not created in <varname>$FVWM_USERDIR</varname> by setup procedure or Style
Managers, but it will be read if created manually.
</para>

<para>
In addition to FVWM configuration read by fvwm window manager and it's modules, there are some files
parsed by NsCDE scripts and programs in <filename class="directory">$NSCDE_DATADIR/defaults</filename>.
</para>

<para>
This files are:

<itemizedlist>
<listitem><para>AppMenus.conf - default per application addons for Window Operations menu on the 1st titlebar button</para></listitem>
<listitem><para>FrontPanel.actions - read by FVWM functions called when FrontPanel controls and buttons are used</para></listitem>
<listitem><para>Keymenu.actions - Part of the FVWM NsCDE keybindings which have menu hints written on menus</para></listitem>
<listitem><para>Subpanels.actions - From this file, Subpanels.fvwmconf is generated.</para></listitem>
<listitem><para>WSM.conf - Workspace Manager and Graphical Workspace Manager configuration file</para></listitem>
</itemizedlist>

</para>

<para>
All files above except WSM.conf if found in <filename class="directory">$NSCDE_USERDIR</filename> are
read in addition to system defaults in <filename class="directory">$NSCDE_DATADIR/defaults</filename>.
Local lines and statemets in user's copy are overriding system defaults. WSM.conf is read exclusively
from <filename class="directory">$NSCDE_USERDIR</filename>. System file is only an example.
</para>

<para>
The rest of configuration is in <filename class="directory">$NSCDE_USERDIR</filename>. For example Dunst.conf,
Stylonetray.conf, Xsettingsd.conf, NsCDE.radi (rofi), Xset.conf and Xdefaults. This files are either read by
their programs which are called and configured/integrated by NsCDE, or by X server (Xset.conf, Xdefaults*).
Various subdirectories contains additional data generated for the user or configured by the user. This
parts of the configuration are described in more detail later in this document.
</para>

</sect2>

<sect2 id="NsCDE-components-applets-tools">
<title>Applets and GUI Tools</title>
<para>
NsCDE provides GUI tools which are built in FvwmScript(1) and their shell and
python helpers. Also, some external applications that fit in the picture as
recommended. This tools are mainly built for NsCDE from scratch, but some,
such as mouse, keyboard and beep control are modified from the default FVWM
scripts to look more CDEish and they implement some additional functionality.
</para>

<para>
Applets docks and panels are:

<itemizedlist>
<listitem><para>Front Panel (FvwmButtons)</para></listitem>
<listitem><para>Subpanels (FvwmButtons)</para></listitem>
<listitem><para>Workspace Manager (WSM) - FvwmScript</para></listitem>
<listitem><para>MonthDayApplet - FvwmScript</para></listitem>
<listitem><para>Clock - External C applet pclock</para></listitem>
<listitem><para>CheckMailApplet - FvwmScript</para></listitem>
<listitem><para>FpLite - FvwmScript</para></listitem>
</itemizedlist>
</para>

<para>
GUI tools are:

<itemizedlist>
<listitem><para>Style Manager (StlyeMgr) - FvwmScript</para></listitem>
<listitem><para>Backdrop Style Manager (BackdropMgr) - FvwmScript + Korn Shell</para></listitem>
<listitem><para>Beep Style Manager - FvwmScript</para></listitem>
<listitem><para>Color Style Manager (ColorMgr) - FvwmScript</para></listitem>
<listitem><para>ExecDialog - FvwmScript</para></listitem>
<listitem><para>Font Style Manager (FontMgr) - FvwmScript + Korn Shell</para></listitem>
<listitem><para>Keyboard Style Manager (KeyboardMgr) - FvwmScript</para></listitem>
<listitem><para>Occupy Workspace (Occupy) - FvwmScript</para></listitem>
<listitem><para>Occupy Page (Occupy) - FvwmScript</para></listitem>
<listitem><para>Occupy Monitor (Occupy) - FvwmScript</para></listitem>
<listitem><para>Graphical Workspace Manager (GWM) - FvwmScript</para></listitem>
<listitem><para>Graphical Workspace Manager Options (GWMOptions) - FvwmScript</para></listitem>
<listitem><para>Window Geometry Manager - FvwmScript</para></listitem>
<listitem><para>Mouse Style Manager (PointerMgr) - FvwmScript</para></listitem>
<listitem><para>Power Save Manager (PowerSaveMgr) - FvwmScript</para></listitem>
<listitem><para>Subpanel Manager (SubpanelMgr) - FvwmScript</para></listitem>
<listitem><para>Subpanel Settings (SubpanelSettings) - FvwmScript</para></listitem>
<listitem><para>System Action Dialog (SysActionDialog) - FvwmScript, sudo</para></listitem>
<listitem><para>Sysinfo - FvwmScript, python</para></listitem>
<listitem><para>Window Style Manager (WindowMgr) - FvwmScript, sed, egrep</para></listitem>
<listitem><para>Workspaces and Pages Style Manager (WsPgMgr) - FvwmScript</para></listitem>
<listitem><para>NsCDE Process Manager (NProcMgr) - FvwmScript</para></listitem>
</itemizedlist>

</para>

<para>
Helper Dialogs:
<itemizedlist>
<listitem><para>ActionForm - FvwmScript</para></listitem>
<listitem><para>ChoiceForm - FvwmScript</para></listitem>
<listitem><para>FilePicker - FvwmScript</para></listitem>
<listitem><para>InputForm - FvwmScript</para></listitem>
<listitem><para>WaitNotice - FvwmScript</para></listitem>
<listitem><para>Splash - FvwmScript</para></listitem>
<listitem><para>NColorsDialog (<link linkend="NsCDE-ColorMgr">Color Style Manager</link> part) -
 FvwmScript</para></listitem>
<listitem><para>PaletteDialog - (Backdrop Style Manager part) - FvwmScript</para></listitem>
</itemizedlist>
</para>

<para>
External fit-in Programs:
<itemizedlist>
<listitem><para>Xscreensaver (xscreensaver-demo called from StyleMgr) installed separately.</para></listitem>
</itemizedlist>
</para>

</sect2>

</sect1>

<sect1 id="NsCDE-applets-docks-panels">
<title>Applets Docks and Panels</title>
<sect2 id="NsCDE-FrontPanel">
<title>Front Panel</title>
<para>
In NsCDE, CDE Front Panel is re-implemented with the help of FvwmButtons(1) Configuration is stored under
alias <emphasis>*FrontPanel</emphasis> in <filename>FrontPanel.fvwm2.fvwmconf</filename> and
<filename>FrontPanel.fvwm3.fvwmconf</filename>, read and activated from the <filename>Main.fvwmconf</filename>.
Visually, this remake of Front Panel matches almost in a pixel CDE Front Panel. The main differences are:
</para>

<itemizedlist>

<listitem><para>
   Since FvwmButtons doesn't implement drag and drop protocol, there is no possibility
   to install icons by dragging them from file manager or from one to another position.
   However, icons (with their applications) on the Front Panel can be customized by
   clicking any item on the subpanel above it with the right mouse button. Dinamic
   contextual menu with the name of the application will appear and action
   <emphasis>Copy to Main Panel</emphasis> can be choosen. This will edit file
    <filename>FrontPanel.actions</filename> in user's <filename class="directory">$FVWM_USERDIR</filename>
   and put appropriate custom launcher. All Front Panel launchers can be customized,
   including the ones with applets (clock, calendar, mail) instead of static icons.
   One notable inconvinience here is that subpanel must be enabled and icon installed
   on that subpanel before it can be copied to the main panel. If one does want to
   customize icon launcher without having subpanel above it, subpanel can be enabled
   temporary, icon installed on it, and copied to the main panel, and subpanel above icon
   disabled afterwards. File <filename>FrontPanel.actions</filename> can
   also be edited manually as an alternative (caution should be taken) to achieve the
   same effect. Manual editing is mandatory when one wants to install new applets
   instead of static icons, because this cannot be done with gui menu actions. See
   <link linkend="FrontPanel_actions">FrontPanel.actions</link> for examples.
   The other way (full control) is by copying <filename>FrontPanel.actions</filename>
   configuration file from <filename class="directory">$NSCDE_ROOT/config</filename>
   to <varname>$FVWM_USERDIR</varname>.
</para></listitem>

<listitem><para>
   In the original CDE, Front Panel is part of the dtwm Window Manager
     binary, while in NsCDE it is configuration of FvwmButtons(1) FVWM module.
     Workspace Manager in the middle of the Front Panel is a separate applet
     written in FvwmScript(1).
</para></listitem>

<listitem><para>
   On every icon, for the first two mouse buttons different action can be
     assigned. This is used for example 7th icon where mouse button 1
     calls Style Manager, while mouse button 2 calls Backdrop Style Manager
     directly as a quick shortcut. Second (middle) mouse button action can
     be considered as hidden hack for advanced usage.
</para></listitem>

<listitem><para>
   Mouse button 3 on any of the default 10 Front Panel icons brings contextual pop-up menu
   titled by the main action from mouse button 1. Action on this menu are: a) call
   main application as if icon has been clicked with the 1st mouse button, b) "reset
   this button" which will remove user's customizations for that launcher button from
   the <filename>$FVWM_USERDIR/FrontPanel.actions</filename> and load default from
   the <filename>$NSCDE_DATADIR/defaults/FrontPanel.actions</filename>., c) "Reset Subpanel"
   will reset upper subpanel to it's default value (remove definition of the numbered
   subpanel from the <filename>$FVWM_USERDIR/Subpanels.actions</filename>),
   d) "Delete Subpanel" will disable subpanel for above this icon (without resetting
   user's configuration for it), and e) Help will call this documentation.
</para></listitem>

<listitem><para>
   In addition to iconification, Front Panel can be shaded to the bottom
     edge of the screen with <keysym>Shift-Esc</keysym> action, and put
     back in it's place with the same key binding when it is called again.
     Shade direction of the Front Panel is the opposite one from ordinary
     windows - they are rolled from the bottom up.
</para></listitem>

<listitem><para>
   Iconification is by default to bottom right screen edge, leaving last 96px space to the
   right for Stalonetray the while all other programs are by default iconified in the top
   left edge as in CDE.
</para></listitem>

<listitem><para>
NsCDE Front Panel is flexible. It can be overlapped with programs, moves away (lower)
for fully maximized windows and while pretty much thick, it is not in the user's way
on the screen.
</para></listitem>

<listitem><para>
     Front Panel has it's own menu on the top left button and special context
     menu if this button is clicked with right mouse button. Middle mouse
     button behaves as if title bar of a any normal window is clicked - with
     special diagnostic tool menu. Right-clicked special menu has this
     important tasks:
<itemizedlist>
<listitem><para>Calls Workspace and Page Manager Manager</para></listitem>
<listitem><para>Restart WorkSpace Manager</para></listitem>
<listitem><para>Restart Page Manager</para></listitem>
<listitem><para>Number of Launchers ... (submenu)</para></listitem>
<listitem><para>Restart Panel Clock (pclock)</para></listitem>
<listitem><para>Restart Panel Mail Applet</para></listitem>
<listitem><para>Restart Panel Date (MonthDayApplet)</para></listitem>
<listitem><para>Restart Panel Lite (FpLite)</para></listitem>
<listitem><para>Restart the (whole) Front Panel</para></listitem>
<listitem><para>Help</para></listitem>
</itemizedlist>
    This menu can also be called from the customized Window Options
    Menu which appears if menu button is clicked with the left mouse
    button. Item <emphasis>Front Panel Controls</emphasis> will replace
    Window Options Menu with Front Panel Controls Menu.
</para></listitem>
<listitem><para>
As FvwmButtons based dock, by default it swallows the following applets:

<itemizedlist>
<listitem><para>pclock (external standalone app with CDEish skin)</para></listitem>
<listitem><para>MonthDayApplet (FvwmScript)</para></listitem>
<listitem><para>CheckMailApplet (FvwmScript)</para></listitem>
<listitem><para>WSM / Workspace Manager (FvwmScript)</para></listitem>
<listitem><para>FpLite (FvwmScript)</para></listitem>
</itemizedlist>

</para></listitem>

<listitem><para>
   Third icon expects <varname>$[infostore.filemgr]</varname> to be defined
   or discovered and automatically filled if not defined.
</para></listitem>

<listitem><para>
   Fourth icon will call <varname>$[infostore.terminal]</varname> which
   must be defined or it is discovered.
</para></listitem>

<listitem><para>
   Sixth icon tries to discover system print manager. Currently, only
   system-config-printer and $[infostore.browser] http://localhost:631
   are discovered, but this can be set manually by putting InfoStore
   variable <varname>$[infostore.printmgr]</varname> in <filename>~/.NsCDE/NsCDE.conf</filename>.
   Good place for personal custom icon and redefinition if printing
   really doesn't that much to the user.
   <filename>FrontPanel.actions</filename>.
</para></listitem>

<listitem><para>
   Seventh: <link linkend="NsCDE-StyleMgr">NsCDE Style Manager</link> from which all other
   Style Managers can be called.
</para></listitem>

<listitem><para>
   <varname>$[infostore.xeditor]</varname> - if defined in <filename>$FVWM_USERDIR/NsCDE.conf.</filename>
   If not defined, NsCDE will try to find some usable app and autofill this value on startup.
</para></listitem>

<listitem><para>
   Semi-empty. By default, it popups 9th subpanel if pressed. A nice idea is
   to call pavucontrol or some audio mixer on 3rd mouse click from <filename>FrontPanel.actions</filename>.
</para></listitem>

<listitem><para>
   Help, documentation.
</para></listitem>

<listitem><para>
   Front Panel Subpanels 2, 5, 6 and 8 are empty by default, but they can be activated with a triple
   middle pointer click on an empty place, or with a contextual menu on the icon below it on the Front Panel,
   and selecting a menu item "Add Subpanel". In a former case, dialog will ask user if he wants subpanel to be
   enabled, while in later case, subpanel will be enabled immediately. This is specially useful for subpanel 5
   which will show <varname>$[infostore.mailreader]</varname> if it is defined or autodiscovered.
<itemizedlist>
<listitem><para>
   Subpanel 1: Applications
</para></listitem>
<listitem><para>
   Subpanel 3: Libre Office Components and various office/productivity tools (PS/PDF reades etc ...)
</para></listitem>
<listitem><para>
   Subpanel 4: Tools
</para></listitem>
<listitem><para>
   Subpanel 7: NsCDE Style Manager and various Qt, Gtk and misc desktop management applications
</para></listitem>
<listitem><para>
   Subpanel 9: Multimedia programs: audio, video, photo ...
</para></listitem>
<listitem><para>
   Subpanel 10: Documentation
</para></listitem>
</itemizedlist>

</para></listitem>

<listitem><para>
   In the center of the Front Panel there is a place without subpanel
   launchers and separated by vertical line. Inside this area, there are
   4 small command icons: Left: Lock Screen (<command>xscreensaver -activate</command>), Page Manager Menu,
   Right are Front Panel Lite (system load indicator), and <guibutton>Exit</guibutton> button
   (SysActionDialog).
</para>
<para>
Lock Screen icon (upper left) has a contextual menu invoked by the 3rd mouse button click, which allows
user to suspend and resume background activity of the xscreensaver(1) in addition to the locking
mechanism. Help menu entry is also present. Mouse button 2 brings Xscreensaver preferences dialog as if
it was called from the Style Manager.
</para>
<para>
Page Manager Menu icon has a contextual menu invoked by the 3rd mouse button click. In addition to
returning back to main menu, it can call visual local FVWM pager LocalPager. Help menu entry is
present too. Mouse button 2 brings Workspaces and Pages Style Manager configuration.
</para>
<para>
Front Panel Lite (upper right) has a small contextual menu which calls main action and help.
</para>
<para>
Exit button (lower right) has a small contextual menu which calls main action and help.
</para>
<para>
   In the middle of this area there is WSM - Work Space Manager with well
   known buttons for navigating NsCDE workspaces. By default, four workspaces
   are shown and configured, but this can be changed (see <xref linkend="NsCDE-Workspace-Manager"/>).
</para>
</listitem>

</itemizedlist>

<sect3 id="NsCDE-FrontPanelNrOofLaunchers">
<title>Customizing number of Front Panel launchers</title>
<para>
NsCDE Front Panel can be customized to contain from zero to 20 Front Panel buttons or launchers.
Default is 10 (5 launchers left and 5 launchers right from the Workspace Manager). There can be
even or unequal number of launchers on any side of the Front Panel. In that way, it is possible
to:
<itemizedlist>
<listitem><para>
Extend number of launchers (buttons)
</para></listitem>
<listitem><para>
Move Workspace Manager to left or right
</para></listitem>
<listitem><para>
Reduce number of launchers
</para></listitem>
<listitem><para>
Extend or reduce number of subpanels on active launchers
</para></listitem>
<listitem><para>
All extended (more than 5 on each side) launchers can be customized with icons,
subpanels and swallowed applets.
</para></listitem>
</itemizedlist>
This is very flexible scheme, and can scale from minimal two-workspaces configuration
without any launcher (just left and right handlers, and Workspace Manager with Lock, FpLite,
Exit and Page Manager in the middle), up to configuration with 20 launchers freely arranged
left and right with up to eight workspaces. For this last one, Full HD resolution, or at
least 1680x1050 is needed.
</para>
<para>
To change number of launchers left or right of the Workspace Manager, leftmost menu button
of the Front Panel must be selected, which will bring Window Options Menu, then
<emphasis>Front Panel Controls</emphasis> can be selected to replace Window Options Menu.
Front Panel Controls can be directly called by clicking this same button with third
(right) mouse button. Next, <emphasis>Number of Launchers ...</emphasis> submenu must be
opened.
</para>
<para>
Actions are:
<itemizedlist>
<listitem><para>
Add Left Launcher
</para></listitem>
<listitem><para>
Add Right Launcher
</para></listitem>
<listitem><para>
Remove Left Launcher
</para></listitem>
<listitem><para>
Remove Right Launcher
</para></listitem>
<listitem><para>
Help
</para></listitem>
</itemizedlist>
Once a new launcher is on the Front Panel, it can be customized by the means of enabling
(temporary or permanently) subpanel on which icons can be installed, or by editing
configuration <filename>$FVWM_USERDIR/FrontPanel.actions</filename> and restarting the
Front Panel. Under the hood, adding or removing launchers on the Front Panel is
actually editing FVWM InfoStore variables <varname>FP.LeftLaunchersNum</varname> and
<varname>FP.RightLaunchersNum</varname> in the <filename>$FVWM_USERDIR/NsCDE.conf</filename>
which are both by default 5. Front Panel geometry is automatically recalculated on
restart.
</para>
</sect3>
</sect2>

<sect2 id="NsCDE-Subpanels">
<title>Subpanels</title>

<para>
NsCDE subpanels are simple transient FvwmButtons based docks. As the Front Panel itself,
they are also as much as possible similar to original CDE forms of the same purpose.
Some applications in them are predefined, and discovered if installed, and the rest is
up to user to populate. Their purpose is not to show all possible GUI applications
installed on the system as right-clicked Workspace Menu does. They are meant for
favorite, important and often used programs.
</para>
<para>
There is one big difference between CDE and NsCDE subpanels: <emphasis>Install Icon</emphasis>
is not (and cannot be due to FvwmButtons not implementing) drag-and-drop destionation. Click
action on <emphasis>Install Icon</emphasis> calls special NsCDE tool for installing and
defining items on the subpanel. There is no drag and drop off items from the applicaton manager
(the later also doesn't exist, but it can be used as menu://applications/ pseudo path in some
file managers).
</para>
<para>
On every subpanel, last selected entry will remain hilighted next time subpanel is popped up again.
</para>
<para>
Each Subpanel's application item or entry has additional third mouse pointer button action which
will pop up dinamically populated contextual menu named after item's title. Here, there are actions
to move up or down item for one space on the subpanel, to move item to the beginning or the end of
the subpanel's application list, as well as to delete item from the subpanel (warning message will
appear before deletion is finally performed). First menu item is the same as menu name: title of
the application from submenu. If clicked, it will perform default action as if item's title or icon
was clicked on the submenu itself. This is a kind of a escape from the contextual menu, but to
still use subpanel's default action without repeating opening of a submenu again.
If move or delete action is silently not performed, this is most likely the situation where
user's <filename>$FVWM_USERDIR/Subpanels.actions</filename> is newer than
<filename>$FVWM_USERDIR/Subpanels.fvwmconf</filename>, and must be rebuilt for configuration
actions to take a place properly. In that case, repeated operation must succeed, otherwise,
see X session error log for details.
</para>
<para>
Subpanels, like in CDE has titlebars but as windows on screen they are without
borders and handles. They have only left menu button like other windows, but
with one exception: there are no actions for closing window and re-positioning
it (no sense in this), but they have "Refresh Subpanel" and "Subpanel
Settings" controls. First one kills process module, re-reads it's
configuration and starts it on the next click on Front Panel subpanel
launcher. Subpanel Settings is the small and simple FvwmScript tool which
allows one to rename Subpanel, set it's width for application titles to fit if
necessary, and to enable or disable that particular Subpanel.
</para>

<para>
On the first change with <emphasis>Install Icon</emphasis> or <emphasis>Subpanel Settings</emphasis>,
non-FVWM configuration file <emphasis>Subpanels.actions</emphasis> will be created in the
<varname>$FVWM_USERDIR</varname>, from there, all subpanels changed from default will be read
by the <command>$NSCDE_TOOLSDIR/generate_subpanels</command>, while the rest will be
generated and combined/mixed from the <filename>$NSCDE_DATADIR/defaults/Subpanels.actions</filename>.
This file can also be edited by hand (ok, not by hand, but editor will suffice) and the result may be applied by
calling <command>generate_subpanels</command> and then <function>f_ReadCfg Subpanels</function>.
Generated files will be called <filename>Subpanels.fvwm2.fvwmconf</filename> and <filename>Subpanels.fvwm3.fvwmconf</filename>
with the same content, but a slightly different syntax, one of this files will be read as subpanels configuration
depending under which version of FVWM NsCDE is running. This files are expected to appear in the <varname>$FVWM_USERDIR</varname>.
If not found there, <filename>$NSCDE_ROOT/config/Subpanels.fvwmX.fvwmconf</filename> will be read instead.
Syntax of the Subpanels.actions is explained in the <link linkend="NsCDE-Configuration-Files">Configuration files explained</link>
section.
</para>

<para>
Presently, there is one workaround here under FVWM2: as much as FVWM, and specially FvwmButtons are
very flexible and configurable, no title for the buttons app can be set apart from module alias, but
module alias doesn't support names with spaces in them. Internal names as <emphasis>"NsCDE-SubpanelX"</emphasis>
are for that reason referenced in <filename>FrontPanel.fvwmX.fvwmconf</filename>, and are internally
mandatory names of their Subpanels. Because there is no configuration option in FVWM2 for subpanel
to set Window Title, we are using tool <command>xdotool(1)</command> which is run on Subpanel
initialization with a delay of 3,2 seconds (internal workaround for xdotool) and this then takes
infostore variable <varname>NsCDE-SubpanelX-Name</varname> and sets literal, system default or user
picked name of the subpanel. Presently, an alternative option is to apply FvwmButtons patch present
in the patches subdirectory of NsCDE tarball which introduces a <emphasis>WindowName</emphasis> option
for FVWM2 to it's configuration, or even better, to use new FVWM3 which has this and many other handy
options and capabilities already in place.
</para>
<para>
The rest about Subpanel, or to say their visible outfit, and their main function
are the same as in CDE - a nice, heavyweight and elegant application launchers.
</para>

</sect2>

<sect2 id="NsCDE-Workspace-Manager">
<title>Workspace Manager</title>
<para>
Workspace Manager is a Widget in the center of the Front Panel. Visually, it
replicates in almost a pixel similarity with the center of the CDE's Workspace
Manager's buttons, but with a few exceptions beneath the surface and further
configuration:
</para>
<itemizedlist>
<listitem><para>
 There is a limited number for possible of workspaces. There can be no odd number of
  workspaces, and combinations are: 2, 4, 6 and 8. Default is of course 4.
</para></listitem>
<listitem><para>
 If InfoStore variable wsm.eco is defined as <emphasis>"InfoStoreAdd wsm.eco 1"</emphasis> in
 user's profile <filename>$FVWM_USERDIR/NsCDE.conf</filename>, WSM buttons will not be fixed
 in width as in CDE. In that case, Workspace Manager will not extend a width of the Front Panel,
 rather buttons will be more wide in 2-buttons combination, and more narrow in 6 and specially 8
 button combination. By default, buttons are all of the same width and they are extending or
 narrowing the cummulative Front Panel width size if changed from default 4 workspaces
 to 2, 6 or 8 workspaces.
</para></listitem>
<listitem><para>
 As in CDE, workspace names can be renamed. There is a keyboard combination in FvwmScript WSM
 which enters rename mode: Ctrl+Space on the current active workspace button, while pointer is
 above it. Then, <keysym>Ctrl+Enter</keysym> saves a new name. Names are synchronized with FVWM
 desktop names and used in the rest of the configuration. Names are saved in
 <filename>$FVWM_USERDIR/WSM.conf</filename>, and EWMH desktop names are applied immediately in
 a existing X11 NsCDE session. Workspaces can also enter rename mode if their workspace buttons
 are clicked with 3rd mouse button and <guimenuitem>Rename ...</guimenuitem> option choosen from
 the popup menu.
</para></listitem>
<listitem><para>
If Sun type keyboard is in use, <keysym>Help</keysym> key above
WSM will bring this help text in browser. On PC keyboard, <keysym>F1</keysym> has the
same function.
</para></listitem>
<listitem><para>
 Addition: right mouse button on workspace button brings contextual menu. From
  this menu, the following items can be selected: default acion (activate workspace),
  <guimenuitem>Rename ...</guimenuitem> to rename the workspace, <guimenuitem>Manage ...</guimenuitem>
  to call Workspace and Page Style Manager,Popup menu <guimenuitem>Go to Page ...</guimenuitem>,
  <guimenuitem>Local Pager</guimenuitem> (visual FvwmPager) (for a workspace, not necessarily the current one),
  then the option <guimenuitem>Windows ...</guimenuitem> to bring up Window List, with windows on that
  workspace, and last, a small submenu <guimenuitem>Go to Page ...</guimenuitem> for changing the active
  page on the that workspace, which will of course change active workspace to that where page was selected.
</para></listitem>
<listitem><para>
 Number of Workspaces and Pages can be configured with Workspace and Pages Style Manager tool.
</para></listitem>
</itemizedlist>
<para>
State of the buttons is synchronized by FVWM function called from FvwmEvent(1) module whenever
desks and pages are changed by other means, such as keyboard shortcut, mouse move, or by issuing
direct commands to <command>FvwmCommand(1)</command>.
</para>

<para>
In 4-color palette mode, all WSM buttons are of the same color, while in 8-colors mode, there
are four color variations from the given palette.
</para>

<para>
Workspaces in NsCDE are named and numbered from 1, while in FVWM (where they are called desks),
they start from 0. This fact required additional effort while coding FvwmScripts and making
core configurations.
</para>

</sect2>

<sect2 id="NsCDE-PGM">
<title>Page Manager</title>
<para>
Page Manager is entirely new thing.
There is no concept of <emphasis>Pages</emphasis> in the original CDE, just workspaces (FVWM: desks).
A nice FVWM feature of pages is too useful to be disabled and sacrificed just for the sake
of even more CDE similarity, but really zealous user can configure NsCDE not to use pages, just workspaces.
That is, 1 page per workspace. PGM is a dynamic FvwmButtons Icon southwest from the WSM, represented by the
silver-gray icon of the workspace divided on <emphasis>pagesX</emphasis> x <emphasis>pagesY</emphasis>.
Default is 2x2, that is, four pages per every workspace, which in default setup gives 4 x 4 = 16 screens
for applications. Minimum for pages is 0, and maximum 16. For example, in maximal workspaces+pages
configuration, one gets 8x16 desktop, that is 128 screens! While undoubtedly this is diversion from a even
more flexible plain FVWM configuration, it covers really great number of possible preferences. Pages can be
configured in any <emphasis>XxY</emphasis> combination. For example 1x4, 2x3, 3x3, 2x1, 2x2, 3x2 ...
</para>
<para>
Page Manager icon changes with the page to represent position of the current page on
current workspace while user moves from page to page automatically with the help of
the FvwmEvent(1) just like the Workspace Manager (WSM).
</para>
<para>
When clicked, popups menu with names of the pages. When option from the menu is selected,
menu pops down and active pointer screen is changed to the selected page. Second pointer
button calls Workspace and Page Manager, while the third pointer button calls pages
popup menu.
</para>
</sect2>

<sect2 id="NsCDE-MonthDayApplet">
<title>MonthDayApplet</title>
<para>
Familiar CDE icon with month and day of the month in it. Simple applet which calls empty,
do-nothing (by default) function <function>f_Calendar</function>. This function can be overridden
in <filename>$FVWM_USERDIR/Functions.fvwmlocal</filename> to call a program configured by the user.
</para>
<para>
If Sun type keyboard is in use, <keysym>Help</keysym> key above Month Day Applet will
bring this help text in browser. On PC keyboard, <keysym>F1</keysym> has the same function.
</para>
</sect2>

<sect2 id="NsCDE-Pclock">
<title>Front Panel Clock - fpclock</title>
<para>
This is a small C program (GPL) written many years ago by Alexander Kourakos.
It supports XPM skins and displays hours, minutes and seconds. It is well
suited for window manager docks like FvwmButtons(1). In NsCDE it is applied with
a skin similar to original one, but slightly bigger and with more clear edges
and colors. Default can be used from
<filename class="directory">$NSCDE_DATADIR/icons/NsCDE</filename> or even
replaced with a Solaris version with picture of the globe with red hands for
hours and minutes and white for seconds. If clicked, it will try to execute
firefox by default (which appears doesn't work if Num Lock is active on the
keyboard).
</para>
</sect2>

<sect2 id="NsCDE-CheckMailApplet">
<title>Check Mail Applet</title>
<para>
Fifth icon from the left on Front Panel is FvwmScript applet. It is calling
<function>f_CheckMail</function> FVWM function if clicked.
By default <function>f_CheckMail</function> is calling <varname>$[infostore.mailreader]</varname>, which
if defined by user or discovery, will bring up mail application. Up to user is to redefine this variable
in his <filename>$FVWM_USERDIR/Functions.fvwmlocal</filename> to suit the needs for mail checking. To be
clear, by default, it is not functional as an new mail notification applet. External applications can
use it for this by calling <command>nscde_fvwmclnt</command> to send it a signal. The syntax is:

<programlisting>
<![CDATA[
nscde_fvwmclnt "SendToModule CheckMailApplet SendString 1 2 \
 LetterUp <accnum> <accname> <fontsize> <color>"
]]>
</programlisting>

Where:

<itemizedlist>
<listitem><para><emphasis>nscde_fvwmclnt</emphasis> is NsCDE wrapper for FVWM2 or FVWM3 FvwmCommand sender</para></listitem>
<listitem><para>"SendToModule CheckMailApplet SendString 1 2" will send directions to widget 1, subroutine 2 of the CheckMailApplet FvwmScript module</para></listitem>
<listitem><para>"accnum" is a number identifying a separate mail account or entity, one per name, 10 max</para></listitem>
<listitem><para>"accname" is 3 letters identifying account, for example "PTN" for proton </para></listitem>
<listitem><para>"fontsize" can send font size hint to CheckMailApplet for displaying notification info</para></listitem>
<listitem><para>"color" is a hex or X11 color name hint to CheckMailApplet for displaying notification info</para></listitem>
</itemizedlist>

</para>

<para>
This command can be used by mail programs to notify Front Panel Mail icon to change from closed letter to
open letter when new mail arrives. For any new mail, counter for named and numbered account will increase
by 1, until icon is clicked by the user. For example, Thunderbird has a "mailbox alert" extension that can
use scripting way of sending notifications.
</para>

<para>Above this applet, there is an empty space for subpanel launcher which can be activated with middle
triple click, and it will present <emphasis>Mail Reader</emphasis> if thunderbird, claws-mail, mutt or some
other popular and known mail application is installed. User can use <emphasis>Install Icon</emphasis> action
to change or add entries on this menu. For example, to call <command>urxvt -e</command> mutt or something
like that.
</para>
<para>
Key <keysym>F1</keysym> will bring this help text in browser.
If Sun type keyboard is in use, <keysym>Help</keysym> key above
Check Mail Applet has the same function as F1 on PC.
</para>
</sect2>

<sect2 id="NsCDE-FpLite">
<title>FpLite</title>
<para>
Load Indicator on the top right side of the center of the Front Panel contains
a small applet called FpLite. In original CDE it was used to indicate desktop
activity, but since on today's processors this tasks are short and almost
immediate (specially with a good window manager such as FVWM), It appears to
be better suited to server as system load indicator.
</para>
<para>
It has 10 micro-bars. When there is no load, all are yellow. Load grows from
left to right. First 5 green bars, then 3 blue, 2 magenta, an after that it
starts from the beginning with red bars. FpLite summarizes load of all CPUs on
the system in a way that 1-minute load is divided with number of CPU cores,
and then counted as such while displaying load with color micro-bars.
Everything under 1 (internally 100) is yellow, green, blue and magenta, and
after that it counts 10 red micro-bars. For example: on the system with 2 CPU
cores, 1-minute load of 0.6 will be presented with 3 bars (0.6 / num-cores),
load of 2.2 will be presented with one red bar etc ... on the system with four
CPU cores load of 3 will be magenta on the two rightmost bars, and load of 4
or more will be red. Load of more than (numcpu * 10) will not be shown
specially, but user gets an idea what is going on if FpLite is all red.
</para>
<para>
If clicked, it will call a function <function>f_FpLiteClickAction</function> which is by default
set to <varname>$[infostore.taskmgr]</varname> or autodiscovery during starup. If nothing else, it
will call <emphasis>[default terminal app]</emphasis> <command>-e top</command> on Linux and BSD
systems, <emphasis>[default terminal app]</emphasis> <command>-e prstat</command> on Solaris and
it's clones, and <emphasis>[default terminal app]</emphasis> <command>-e topas</command> on AIX.
FpLite FvwmScript app uses little portable python script <emphasis>getla1</emphasis> from the
<filename class="directory">$NSCDE_TOOLSDIR/libexec</filename> to obtain 1-minute load data.
</para>
<para>
Key <keysym>F1</keysym> will bring this help text in browser. If Sun type keyboard is in use,
<keysym>Help</keysym> key above FpLite has the same function as F1 on PC.
</para>
</sect2>

</sect1>

<sect1 id="NsCDE-GUI-Tools">
<title>GUI Tools</title>

<sect2 id="NsCDE-StyleMgr">
<title>Style Manager</title>
<para>
This Window is a starting point for all other <emphasis>Style Manager</emphasis> applications to be
called. It is called from 7th button on the Front Panel. It has big icons for calling:
<itemizedlist>
<listitem><para><link linkend="NsCDE-ColorMgr">Color Style Manager</link></para></listitem>
<listitem><para><link linkend="NsCDE-FontMgr">Font Style Manager</link></para></listitem>
<listitem><para><link linkend="NsCDE-BackdropMgr">Backdrop Style Manager</link></para></listitem>
<listitem><para><link linkend="NsCDE-KeyboardMgr">Keyboard Style Manager</link></para></listitem>
<listitem><para><link linkend="NsCDE-PointerMgr">Mouse Style Manager</link></para></listitem>
<listitem><para><link linkend="NsCDE-BeepMgr">Beep Style Manager</link></para></listitem>
<listitem><para>Xscreensaver Demo (setup)</para></listitem>
<listitem><para><link linkend="NsCDE-WindowMgr">Window Style Manager</link></para></listitem>
<listitem><para><link linkend="NsCDE-WsPgMgr">Workspaces and Pages Style Manager</link></para></listitem>
<listitem><para><link linkend="NsCDE-PowerSaveMgr">Power Style Manager</link></para></listitem>
<listitem><para>Startup Style Manager</para></listitem>
</itemizedlist>
</para>
<para>
If NsCDE was started by some X Session Manager, Startup Style Manager icon will call setup tool for
that session manager or DE if it is known to Style Manager. Otherwise, error message is displayed:
either that NsCDE was not started under X Session Management, or X Session Manager is not
recognized, and it's setup tool cannot be run. Currently, only MATE, LXDE, KDE and GNOME session
managers are recognized and their respective tools called. See <xref linkend="NsCDE-Startup"/> about
running NsCDE under X Session Manager for more information about this matter.
</para>

<para>
Key Bindings:
<itemizedlist>
<listitem><para>
<keysym>Ctrl+Q</keysym>: Quits Style Manager.
</para></listitem>
<listitem><para>
<keysym>Sun Help and F1</keysym>: Displays this help text.
</para></listitem>

<listitem><para>
<keysym>C</keysym>: Opens Color Style Manager
</para></listitem>

<listitem><para>
<keysym>F</keysym>: Opens Font Style Manager
</para></listitem>

<listitem><para>
<keysym>B</keysym>: Opens Backdrop Style Manager
</para></listitem>

<listitem><para>
<keysym>K</keysym>: Opens Keyboard Style Manager
</para></listitem>

<listitem><para>
<keysym>M</keysym>: Opens Mouse Style Manager
</para></listitem>

<listitem><para>
<keysym>E</keysym>: Opens Beep Style Manager
</para></listitem>

<listitem><para>
<keysym>S</keysym>: Opens Screen Style Manager
</para></listitem>

<listitem><para>
<keysym>W</keysym>: Opens Window Style Manager
</para></listitem>

<listitem><para>
<keysym>P</keysym>: Opens Power Style Manager
</para></listitem>

<listitem><para>
<keysym>P</keysym>: Opens Workspaces and Pages Style Manager
</para></listitem>

<listitem><para>
<keysym>T</keysym>: Opens Session Style Manager
</para></listitem>

</itemizedlist>
</para>

</sect2>

<sect2 id="NsCDE-BackdropMgr">
<title>Backdrop Style Manager</title>
<para>
Part of the Style Managers which can be called from the main Style Manager (7th button on the Front Panel).
This is the clone of the same-named CDE tool. It loads backdrops from the
<filename class="directory">$NSCDE_DATADIR/backdrops</filename> and
<filename class="directory">$FVWM_USERDIR/backdrops</filename> (if any). From XPM
backdrop templates with symbol names (with .pm extension) it will generate
previews in user's <filename class="directory">$FVWM_USERDIR/tmp</filename> and if
applied or <guibutton>OK</guibutton>'ed, will set
permanent backdrop in <filename class="directory">$FVWM_USERDIR/backer</filename>. Backer is named after
FvwmBacker(1) module which then loads this X Pixmap as numbered FVWM Colorset
from the <filename class="directory">$FVWM_USERDIR/Backdrops.fvwmgen</filename> which will be
written by Backdrop Style Manager (or by hand). Backdrops are generated in the colors of the
current color theme from the active palette (<emphasis>Broica</emphasis> by default). It has
different colors for a group of every four desktops in 8-colors mode and the
same base color in 4-color mode. Generated backdrop in the
<filename class="directory">$FVWM_USERDIR/backer</filename> are named
<filename>DeskN-&lt;name-of-the-backdrop&gt;.pm</filename> where <emphasis>N</emphasis> is
the workspace (desk) number from 1-8. In such a way it is possible to have the same
backdrop pattern on more than one workspace in 8-colors mode.
</para>
<para>
In case of NsCDE setup with FVWM3 and <emphasis>per-monitor</emphasis> or <emphasis>shared</emphasis> X RandR
monitor model (fvwm3 DesktopConfiguration), backdrops in <filename class="directory">$FVWM_USERDIR/backer</filename>
will be used as a source for procedure which builds joined tiled backdrops for multiple monitors. Output
of this backdrops, which is then loaded directly by FVWM function is placed in
<filename class="directory">$FVWM_USERDIR/backer/bgcache</filename> subdirectory.
</para>
<para>
There is an option to use the same backdrop for all desks too.
User can add and delete custom backdrops in <filename class="directory">$FVWM_USERDIR/backdrops</filename>. 
First action with <guibutton>Add</guibutton> button and file picker, and second action with
<guibutton>Delete</guibutton> button when particular backdrop from the list on the right of the preview is
selected. Delete action will fail for system-pathed backdrops with appropriate
error message, while both actions will reload list of backdrops immediately.
Apart from doing this, NsCDE Backdrop Style Manager has couple of features
more than CDE original:
</para>
<itemizedlist>
<listitem><para>
 In 8-color mode, user can select another color variant instead of default
  for the current workspace from the popup menu. There are four variants.
</para></listitem>
<listitem><para>
 <link linkend="NsCDE-PaletteDialog">Custom palette</link> can be loaded instead of default one,
  and backdrops can be
  set with colors from that palette. In 8-colors mode, there is even more
  possibility because colors can freely change their associated workspace.
</para></listitem>
<listitem><para>
 Instead of backdrops, user can opt for a background image. If option "Use
  photo or picture" is selected, list of backdrops will dissapear and image
  backgrounds (so called "wallpapers") of PNG and XPM type will be loaded from
  <filename class="directory">$NSCDE_DATADIR/photos</filename> and from the
  <filename class="directory">$FVWM_USERDIR/photos</filename> (if any). Option to
  use one photo for all workspaces exists too. In this mode, backdrop-specific options
  will be hidden until <guilabel>Use photo or picture</guilabel> is not deselected.
  <guibutton>Add</guibutton> and <guibutton>Delete</guibutton> of photos/pictures is
  supported in a same way as for backdrops. Photos must be in PNG or XPM format to be loaded.
  This means that images of that type can be added to <filename class="directory">$FVWM_USERDIR/photos</filename>
  but if some other known format is added via Add button of Backdrop Style Manager, like
  JPG, TIFF or GIF, it will be converted to PNG on the fly.
  Pictures can be loaded as FVWM Colorset definition "Pixmap", "AspectPixmap" and "TiledPixmap".
  Default is "AspectPixmap" (in contrast to backdrops which are always TiledPixmap). This 3
  options can be choosen on the popup menu.
</para></listitem>
</itemizedlist>

<para>
Key Bindings:
<itemizedlist>
<listitem><para>
<keysym>Ctrl+Q</keysym>: Quits Backdrop Style Manager.
</para></listitem>
<listitem><para>
<keysym>Sun Help and F1</keysym>: Displays this help text.
</para></listitem>
<listitem><para>
<keysym>P</keysym>: Applies preview of the currently selected backdrop (or photo) on the root window.
</para></listitem>
<listitem><para>
<keysym>Up/Down</keysym>: Selects previous or next element on the backdrop (or photo) list.
</para></listitem>
</itemizedlist>
</para>

<sect3 id="NsCDE-PaletteDialog">
<title>Load Custom Palette Dialog</title>
<para>
A <link linkend="NsCDE-BackdropMgr">Backdrop Style Manager</link> part
</para>
<para>
Helper dialog which provides a list of palettes to the <link linkend="NsCDE-BackdropMgr">Backdrop
Style Manager</link> when user wants to use color schemes from another
palette from currently used in user's setup. This is NsCDE addon
functionality, not present in original CDE. Additionally,
background variants from custom palettes can be used too as from
the default user's palette in 8-color mode, which is also NsCDE
feature not present in original CDE.
</para>

<para>
Key Bindings:
<itemizedlist>
<listitem><para>
<keysym>Escape</keysym>: Quits Dialog.
</para></listitem>
<listitem><para>
<keysym>Sun Help and F1</keysym>: Displays this help text.
</para></listitem>
</itemizedlist>
</para>
</sect3>

</sect2>

<sect2 id="NsCDE-BeepMgr">
<title>Beep Style Manager</title>
<para>
Simple tool to adjust system beep device - if it is present as device and if desired/enabled.
This tool uses xset(1) <emphasis> b</emphasis> command to set volume, pitch and duration of the beep
sound. Modified setting can be tested with additional <guibutton>Beep</guibutton> button which is not
present in the original tool, and also dynamically applied with <guibutton>Apply</guibutton> button.
<guibutton>Save</guibutton> button will save <filename>$FVWM_USERDIR/Xset.conf</filename> with other
xset(1) options which are executed during NsCDE startup.
</para>

<para>
Changing Beep Options

<orderedlist numeration="upperroman">

<listitem><para>
Open Beep Style Manager Beep from the main Style Manager window.
</para></listitem>

<listitem><para>
Select the settings you prefer:
<itemizedlist>
<listitem><para>Volume: Determines the volume of the beep (off at 0%)</para></listitem>
<listitem><para>Pitch (Hz): Determines the pitch of the beep from 82 to 9000 Hz</para></listitem>
<listitem><para>Duration: Determines the time length of the beep sound</para></listitem>
<listitem><para>Beep Button (upper left) test the current settings</para></listitem>
</itemizedlist>
</para></listitem>

<listitem><para>
To save the changes, click Save. To return to the default settings, click Default button at upper right corner of the window.
</para></listitem>

</orderedlist>
</para>

<para>
Key Bindings:
<itemizedlist>
<listitem><para>
<keysym>Escape</keysym>: Quits Beep Style Manager.
</para></listitem>
<listitem><para>
<keysym>Ctrl+Q</keysym>: Quits Beep Style Manager.
</para></listitem>
<listitem><para>
<keysym>Sun Help and F1</keysym>: Displays this help text.
</para></listitem>
</itemizedlist>
</para>

</sect2>

<sect2 id="NsCDE-ColorMgr">
<title>Color Style Manager</title>
<para>
With Backdrop Style Manager, this is probably the most important theme tool in (Ns)CDE. This tool
applies colors to the widgets, menus, applications and backdrops. As in CDE, it reads color
information from the palette files in
<filename class="directory">$NSCDE_DATADIR/palettes</filename> and
<filename class="directory">$FVWM_USERDIR/palettes</filename>. Palettes are the 16bpp
color definitions (8 of them). This colors and border bg/fg/sel colors
calculated from them are the base of the look of pretty much all of the things
on the screen. Colors can be applied in 4 or 8 colors mode. Most notable
palettes are <emphasis>Broica</emphasis> in 8-colors mode and <emphasis>Solyaris</emphasis>
(called <emphasis>Default</emphasis> on SunOS) in 4 colors mode. Color mode can be selected
with the <link linkend="NsCDE-NColorsDialog">Number Of Colors</link> dialog which opens when
the same named button in the main dialog of Color Style Manager is pressed.

</para>

<para>
Color Buttons and the Number of Colors selection determine the number of colors that make
up a palette. You will have four or eight colors in the Color dialog box. The different
color buttons in the palette control the colors used for different areas of the screen.
</para>

<para>
If you have eight color buttons, they will be used as follows (buttons numbered from left to right, top to bottom):

<orderedlist numeration="upperroman">

<listitem><para>Active window borders, corners and titlebars</para></listitem>

<listitem><para>Inactive window borders and non-application menus</para></listitem>

<listitem><para>
Workspace Manager (WSM) Switch for workspace 1 and 5
</para></listitem>

<listitem><para>Text, text field, list areas and text areas</para></listitem>

<listitem><para>
Main window background and Workspace 2 and 6 button background
</para></listitem>

<listitem><para>Dialog box background, menu bar, popup menu and background of workspace 3 and 7</para></listitem>

<listitem><para>Workspace 4 and 8 background</para></listitem>

<listitem><para>
Front Panel background when "Color 8 for Front Panel and Icons" is selected
in the "Number of Colors ..." subdialog.
</para></listitem>

</orderedlist>
</para>

<para>
If you have four color buttons, they will be used as follows (buttons numbered from left to right):

<orderedlist numeration="upperroman">
<listitem><para>
Active window borders
</para></listitem>

<listitem><para>
Window bodies:

<orderedlist numeration="loweralpha">
<listitem><para>Inactive window borders and non-application menus</para></listitem>
<listitem><para>Main window and dialog box backgrounds and menu bar</para></listitem>
<listitem><para>Front Panel background</para></listitem>
</orderedlist>
</para></listitem>

<listitem><para>Workspace switches and backgrounds</para></listitem>

<listitem><para>Text, text field, list areas and text areas</para></listitem>

</orderedlist>
</para>

<para>
Color Style Manager as most tools is written in FvwmScript with background
shell helper and color calculation and generator routines. Visually it tries
to be as much as possible similar to the original CDE, but since it has some
new features, there are some new buttons and commands introduced.
Tool has a list of the palettes (system + user), preview button which can
temporary apply some palette on the current workspace backdrop and FVWM based
applications (FrontPanel, other scripts ...)
</para>
<para>
As in Backdrop Style Manager there are <guibutton>Add</guibutton> and <guibutton>Delete</guibutton>
button actions. System palettes cannot be deleted, while local can be added to
<filename class="directory">$FVWM_USERDIR/palettes</filename> and applied immediately.
</para>

<para>
Importing a ready-made new custom Palette: you can import your own palette

<orderedlist numeration="upperroman">
<listitem><para>Open the Color Style Manager.</para></listitem>

<listitem><para>
Choose <guibutton>Add ...</guibutton> in the Color dialog box.
</para></listitem>

<listitem><para>
Browse files and directories to the new Palette file. Palette file
must have <emphasis>.dp</emphasis> extension and conform to the simple format
(8x16bpp hex colors).
</para></listitem>

<listitem><para>Select the new Palette file from the list of files</para></listitem>

<listitem><para>Click OK in the Color dialog box.</para></listitem>
</orderedlist>
</para>

<para>
Custom Palettes from the <filename>$FVWM_USERDIR/palettes</filename> can also be
deleted. Just pick the name from the list and click on the <guibutton>Delete ...</guibutton>
button. You will be asked for confirmation, and then, if standard UNIX filesystem
user and group ownership and permissions are allowing that, palette file will be
permanently deleted.
</para>

<para>
Creating new palette by modifying an existing one makes a copy of the currently
selected palette with a default name "Custom". When applying this new palette,
Color Style Manager will ask you to rename this palette, which is a good idea,
because the next modification will rewrite "Custom" generic name again, and
previous work will be lost. You then create your custom palette by modifying
the copy, so the original palette is not changed.
</para>

<para>
Button <guibutton>Modify</guibutton> will popup color editor if user selects one of the
8 (or 4) base colors. When selected, this color frames will get "Abc" written in them
with automatic foreground choice for that RGB/HSV combination. Frames can be unseleced
by simply clicking on them again. When one base color is selected <guibutton>Modify</guibutton>
will present editor with controls for Red, Green and Blue values, as well as Hue, Saturation
and Value. On the top left corner are preview squares with names "Old" and "New". When changing
color with RGB and/or HSV controls, this "New" square button will change it's colorset. Color can
also be picked from any screen element with <guibutton>Grab Color</guibutton> button-
If action is not <guibutton>Cancel</guibutton> but <guibutton>OK</guibutton>, selected color will
be modified and new palette with generic name "Custom" created immediately. When finishing theme
selection in Color Style Manager with modified colors, Color Style Manager will ask for a name
of the new palette. The suggested default is "Custom" but on the subsequent modification, this is
the palette which will be modified and past modifications will be effectively lost. For that
reason, it is probably a good idea to save modified palette as new palette with some other name.
In that way, it can be temporary changed for some other and turned back again later. This
color modification dialog actually serves as palette creator (based on previous palettes) and
editor.
</para>

<para>
There are 8 spaces with colors from the currently selected palette (4 spaces
in 4-color mode) and generated XPM file with all 40 colors displayed.
Button <guibutton>Number of Colors</guibutton> calls transient window where user can select 4 or 8
color mode. System default on modern desktop is 8.
</para>

<para>
What is most important new feature in Color Style Manager are integration
options. This are:
</para>

<itemizedlist>
<listitem><para>
 Own currently used backdrop synchronization (default)
</para></listitem>
<listitem><para>
 X resources in <filename>$FVWM_USERDIR/Xdefaults</filename> (default)
</para></listitem>
<listitem><para>
 GTK2 (default)
</para></listitem>
<listitem><para>
 GTK3 (default)
</para></listitem>
<listitem><para>
 Qt4 (default)
</para></listitem>
<listitem><para>
 Qt5 (default)
</para></listitem>
<listitem><para>
 User's <filename>$FVWM_USERDIR/libexec/colormgr.local</filename> script if exists, called with
  the path of the applied palette and number of colors.
</para></listitem>
</itemizedlist>

<para>
The last integration is used to integrate what default widget integrations
cannot reach. For example Gkrellm skin or some terminal preferences.
Qt/Qt5 integration is easy, since this toolkits can use their <emphasis>GTK</emphasis> engine to
integrate self with GTK theme. All that Color Style Manager has to do is to
define GTK engine in <filename>~/.config/Trolltech.conf</filename> and
<filename>~/.config/qt5ct/qt5ct.conf</filename> for colors from the new palette to be used.
</para>
<para>
GTK2 and GTK3 are heavy work part. Here, we are using work derived from one
CDE theme for XFCE desktop and GTK2 + GTK3, purified and adapted for NsCDE
(see <xref linkend="NsCDE-Credits"/>).
This is written in python. If turned on, this will produce
<filename class="directory">$HOME/.themes/NsCDE</filename>
directory with the theme for GTK2 and GTK3, and will edit <filename>$HOME/.gtkrc-2.0</filename> and
<filename>$HOME/.config/gtk-3.0/settings.ini</filename> to put or change
<varname>gtk-theme-name</varname> value. If NsCDE palette with dark background 4 color is choosen,
Color Style Manager will put <varname>gtk-application-prefer-dark-theme</varname> into
<filename>$HOME/.gtkrc-2.0</filename> and <filename>$HOME/.config/gtk-3.0/settings.ini</filename>. If
palette with light color 4 (used for text areas and text fields usually) is choosen, that variable
will be removed from the both configuration files. When switching off from NsCDE to some other
environment, care must be taken manually to handle <varname>gtk-application-prefer-dark-theme</varname>
in configuration files if last palette in NsCDE was using dark background.
</para>

<para>
If <varname>nscde_use_xsettingsd</varname> is set to 1 in the <filename>$FVWM_USERDIR/NsCDE.conf</filename>
after applying new color theme, user's X Settings in <filename>$FVWM_USERDIR/Xsettingsd.conf</filename> will
be adjusted and xsettingsd(1) daemon restarted for settings in GTK and Qt applications to be applied immediately.
This option can be enabled by editing NsCDE.conf or during initial setup. NsCDE starts <command>xsettingsd</command>
daemon with "-c $FVWM_USERDIR/Xsettingsd.conf" parameter. This file must be present if it was not
installed by the initial setup procedure.
</para>

<para>
Key Bindings:
<itemizedlist>
<listitem><para>
<keysym>Ctrl+Q</keysym>: Quits Color Style Manager.
</para></listitem>
<listitem><para>
<keysym>P</keysym>: Like <guibutton>Preview</guibutton> was pressed. Previews currently selected
color scheme from the list.
</para></listitem>
<listitem><para>
<keysym>Up/Down</keysym>: Goes one item on the color schemes list up or down.
</para></listitem>
<listitem><para>
<keysym>Sun Help and F1</keysym>: Displays this help text.
</para></listitem>
</itemizedlist>
</para>

<para>
Notice: In the preview mode under FVWM3 non-global monitor layout, only the backdrop of the currently
focused monitor is previewed in the colors of the new palette.
</para>

<sect3 id="NsCDE-NColorsDialog">
<title>Number Of Colors Dialog</title>
<para>
A <link linkend="NsCDE-ColorMgr">Color Style Manager</link> part
</para>
<para>
Helper dialog to select 4, 8 or default color scheme in
<link linkend="NsCDE-ColorMgr">Color Style Manager</link>.
It changes number of colors while browsing, previewing or
choosing a color theme, as well as two additional options for
8 colors scheme.
</para>
<para>
<itemizedlist>
<listitem><para>
Use 4 Colors Scheme: Uses only the first four colors of the choosen palette.
With slightly modified palette "Crimson" this was probably default on all
versions of Sun Solaris.
</para></listitem>
<listitem><para>
Use 8 Colors Scheme: uses full palette with all 8 colors. This is NsCDE
default on all modern displays.
</para></listitem>
<listitem><para>
Default (4|8): Indicates default which can be changed or turned back.
</para></listitem>
<listitem><para>
Color 8 for Front Panel and Icons: in 8 colors scheme, this will make icon part
of the Front Panel and workspace icons background to use eighth color from the
choosen palette instead of fifth color. This scheme was known to have been
default on some HP-UX and AIX versions of CDE, and in NsCDE it is a user
option. This option does not have effect in 4 colors scheme, and hence cannot
be selected together with it.
</para></listitem>
<listitem><para>
Color 6 for Workspace Manager: in 8 colors scheme, this will make Workspace
Manager colored with color 6 which is usually used for menus, and tools
background. This scheme was default on some versions of CDE on some UNIX
systems, but in NsCDE it is a user option. This option does not have effect
in 4 colors scheme, and hence cannot be selected together with it.
</para></listitem>
</itemizedlist>

</para>

<para>
Key Bindings:
<itemizedlist>
<listitem><para>
<keysym>Return</keysym>: Selects OK.
</para></listitem>
<listitem><para>
<keysym>Escape</keysym>: Quits Dialog.
</para></listitem>
<listitem><para>
<keysym>Sun Help and F1</keysym>: Displays this help text.
</para></listitem>
</itemizedlist>
</para>

</sect3>

</sect2>

<sect2 id="NsCDE-ExecDialog">
<title>Exec Dialog</title>
<para>
By default key binding for Exec Dialog is <keysym>Alt</keysym>+<keysym>F12</keysym>,
and an entry "Execute ..." located on main Workspace Menu above terminal item as "Exec" dialog.
This is an input form for executing one-shot commands without terminal. It has options to run
command in terminal (<varname>$[infostore.terminal]</varname>), and to remain open after executing
commands for subsequent commands. It has it's own command history which can be turned back
with cursor <keysym>up</keysym> and <keysym>down</keysym> keys. <keysym>Escape</keysym> key
closes dialog, <keysym>enter</keysym> executes, <keysym>Ctrl+Enter</keysym> executes in default
terminal application.
</para>
<para>
As an example, this dialog can be used if on the current page or workspace terminal
application is not present, and only some simple command is needed to be quickly executed.
</para>

<para>
Key Bindings:
<itemizedlist>
<listitem><para>
<keysym>Escape</keysym>: Quits Exec dialog
</para></listitem>
<listitem><para>
<keysym>Return</keysym>: Performs an action like if <guibutton>Exec</guibutton> is pressed.
</para></listitem>
<listitem><para>
<keysym>Ctrl+Return</keysym>: Performs an action like if <guibutton>Exec</guibutton> is pressed,
and <guilabel>Execute in terminal</guilabel> checkbox is checked.
</para></listitem>
<listitem><para>
<keysym>Shift+Return</keysym>: Performs an action like if <guibutton>Exec</guibutton> is pressed,
and <guilabel>Leave this dialog open</guilabel> checkbox is checked.
</para></listitem>
<listitem><para>
<keysym>Ctrl+Shift+Return</keysym>: Performs an action like if <guibutton>Exec</guibutton> is pressed,
<guilabel>Execute in terminal</guilabel> and <guilabel>Leave this dialog open</guilabel> checkboxes are
both checked.
</para></listitem>
<listitem><para>
<keysym>Up/Down</keysym>: Brings back and forth command history in text dialog box
</para></listitem>
<listitem><para>
<keysym>Sun Help and F1</keysym>: Displays this help text.
</para></listitem>
</itemizedlist>
</para>
<para>
If installed, NsCDE can use rofi(1) command and application launcher from the
keybinding <keysym>Alt+F12</keysym> instead of built in Exec Dialog. Workspace
Menu item "Execute ..." remains the same, only keybinding will call rofi(1)
instead of built-in simple Exec dialog. For this to work, InfoStore variable
<varname>nscde_use_rofi</varname> must be set to "1" in the <filename>$FVWM_USERDIR/NsCDE.conf</filename>.
Rofi is integrated with NsCDE color theme and will be set up on the first use, which lasts 3 seconds
initially and after changing color theme with <link linkend="NsCDE-ColorMgr">Color Style Manager</link>.
</para>

</sect2>

<sect2 id="NsCDE-FontMgr">
<title>Font Style Manager</title>

<para>
Font management is the area where NsCDE and CDE are probably most different.
Font Style Manager is completely NsCDE tool to set fonts for usage inside
FVWM and external toolkits integration (X Resources/Motif, GTK2, GTK3,
Qt4, Qt5 ...).
</para>
<para>
NsCDE defines 15 fonts. Five groups with three members:

<itemizedlist>
<listitem><para>
Normal Small
</para></listitem>
<listitem><para>
Normal Medium
</para></listitem>
<listitem><para>
Normal Large
</para></listitem>
<listitem><para>
Bold Small
</para></listitem>
<listitem><para>
Bold Medium
</para></listitem>
<listitem><para>
Bold Large
</para></listitem>
<listitem><para>
Italic Small
</para></listitem>
<listitem><para>
Italic Medium
</para></listitem>
<listitem><para>
Italic Large
</para></listitem>
<listitem><para>
Monospaced Small
</para></listitem>
<listitem><para>
Monospaced Medium
</para></listitem>
<listitem><para>
Monospaced Large
</para></listitem>
<listitem><para>
Monospaced Bold Small
</para></listitem>
<listitem><para>
Monospaced Bold Medium
</para></listitem>
<listitem><para>
Monospaced Bold Large
</para></listitem>
</itemizedlist>
</para>
<para>
This fonts are defined as FVWM <emphasis>infostore</emphasis> variables in the file
<filename>$NSCDE_DATADIR/fvwm/Font-$NSCDE_FONT_DPI.fvwmconf</filename> and/or in the file
<filename>$FVWM_USERDIR/NsCDE-Font-$NCDE_FONT_DPI.fvwmgen</filename>. User's
<filename>$FVWM_USERDIR/NsCDE-Font-$NSCDE_FONT_DPI.fvwmgen</filename> is a symlink to either
<filename>$NSCDE_DATADIR/fontsets/SomeName.fontset</filename> or to
<filename>$FVWM_USERDIR/fontsets/SomeName.fontset</filename>.
Further, they are defined as CPP macros in
<filename>$FVWM_USERDIR/Xdefaults.fontdefs</filename> which is included in
<filename>$FVWM_USERDIR/Xdefaults</filename>
where it is used. GTK2 and GTK3 are also getting default font (Normal Medium) in
their configurations if integration option has been selected in Font Style Manager.
X resources and GTK are not refreshed by default, their checkboxes can be unselected
if some of this widget integrations is not desirable by the user.
</para>

<para>
The Font Style Manager itself consists of fontsets and fonts. Fontsets are
named complete sets of five groups of three members of fonts defined above.
Fontsets are stored in <filename>$NSCDE_DATADIR/fontsets</filename> and in
<filename>$FVWM_USERDIR/fontsets</filename>. If font set is selected in
Font Style Manager, 15 fonts from the set are loaded into preview lists of the application and can be
immediately applied or further customized by leaving <guilabel>Use Predefined Font Set</guilabel> mode
before saving defined scheme as <filename>$FVWM_USERDIR/fontsets/SomeName.fontset</filename> and linking this
name to <filename>$FVWM_USERDIR/NsCDE-Font-$NSCDE_FONT_DPI.fvwmgen</filename>. List of fontsets on the left GUI list is
inactive until button <guilabel>Use Predefined Font Set</guilabel> is not turned on, then Font Style Manager
operates with sets of fonts, and not in compose mode with individual fonts. In this mode, right GUI list contains
information about fontset and previewed fonts when they are selected with mouse or keyboard. This information can
contain additional bottom line <emphasis>(Not available)</emphasis> if font from the fontset does not exist under
this name on the system. If such fontset is loaded and saved anyway, system's XFT subsystem will select nearest
match or the default font instead of non-existing one.
</para>
<para>
By default, manual font selection contains list of XFT fonts found on the system in the
left GUI list and their styles (regular, bold, italic ...) on the right GUI list.
list.
</para>
<para>
DPI value for fonts in NsCDE is by default defined to be 96 in <filename>$FVWM_USERDIR/Xdefaults.fontdefs</filename> as "Xft.dpi".
This is to accomplish reasonable defaults for all widgets and programs which use them, but if overriden, existing
user custom fontset for 96 DPI will not be considered anymore. System default from that approximate DPI range will
be used until new custom fontset is created, where <varname>NSCDE_FONT_DPI</varname> will not be 96 anymore.
</para>
<para>
Main font selectors are:
</para>
<itemizedlist>
<listitem><para>
Font Size Group
</para></listitem>
<listitem><para>
Font Style Group
</para></listitem>
<listitem><para>
Set Size (available only in manual selection mode)
</para></listitem>
</itemizedlist>
<para>
First popup menu loads 5 fonts from one of the 3 sets: small, medium or large.
Second popup determines on which font current selection is working: normal,
bold, italic, mono or mono bold (clicking on font preview itself has the same function)
and third popup menu sets font size. When Font Style Manager is started, current fontset is
loaded and previews are populated with that fonts. Default mode of operation will be switched
to manual font selection for customizations into the new fontset.
</para>
<para>
Button <guibutton>Default</guibutton> loads default
<filename>$NSCDE_DATADIR/fontsets/DejaVuSerif.fontset</filename> which can
then be saved as a choice or further customized into the new fontset. Bottom half of the
Font Style Manager contains preview for all fonts from the one of the three selected size sets.
</para>
<para>
Checkboxes <guilabel>Refresh GTK2/GTK3</guilabel>, and <guilabel>Refresh X Resources"</guilabel>
are integrating font selection with popular widgets by providing <emphasis>normal medium</emphasis> font and
it's size to their configuration files. Qt4 and Qt5 should automatically pick
Gtk fonts if Qt "GTK2" font engine is active in their configurations. If not,
<command>qtconfig-qt4</command> and <command>qt5ct</command> applications can be started and
some minor changes done and undone - enough for Apply/Save to take effect, and then font from Gtk will
be loaded for sure. Checkbox <guilabel>Run User Script</guilabel> will attempt to run
<command>$FVWM_USERDIR/libexec/fontmgr.local</command> if it exists, with argument of the new
config file. This is intended for user's customizations which are currently beyond NsCDE's scope of
program and widget integrations.
</para>

<para>
<guibutton>Save</guibutton> button will save fontset choice, or generated selection as a new fontset in manual
selection mode, make link to it in <filename class="directory">$FVWM_USERDIR</filename>. If manual modification
has taken place, user will be asked to name a new fontset with the popup dialog. Name "custom" is the default proposal
in the dialog, but it should be changed, because this name is predestinated to be rewritten on the next
Font Style Manager saving action. Further, user will be asked to immediately restart FVWM, for changes to be
applied from all parts from the new configuration.
</para>

<para>
Key Bindings:
<itemizedlist>
<listitem><para>
<keysym>Ctrl+Q</keysym>: Quits Font Style Manager.
</para></listitem>
<listitem><para>
<keysym>Sun Help and F1</keysym>: Displays this help text.
</para></listitem>
<listitem><para>
<keysym>Up (Arrow Up)</keysym>: Selects prior font or fontset on the list
</para></listitem>
<listitem><para>
<keysym>Down (Arrow Down)</keysym>: Selects next font or fontset on the list
</para></listitem>
<listitem><para>
<keysym>Prior (Page Up)</keysym>: Selects preview box from the bottom to the top and cycles back to the bottom again
</para></listitem>
<listitem><para>
<keysym>Next (Page Down)</keysym>: Selects preview box from the top to the botttom and cycles back to the top again
</para></listitem>
<listitem><para>
<keysym>Ctrl+S</keysym>: Loads small group of fonts on the preview fileds
</para></listitem>
<listitem><para>
<keysym>Ctrl+M</keysym>: Loads medium group of fonts on the preview fileds
</para></listitem>
<listitem><para>
<keysym>Ctrl+L</keysym>: Loads large group of fonts on the preview fileds
</para></listitem>
<listitem><para>
<keysym>Ctrl+Plus</keysym>: In manual selection mode, increases font size for selected font
</para></listitem>
<listitem><para>
<keysym>Ctrl+Minus</keysym>: In manual selection mode, decreases font size for selected font
</para></listitem>
<listitem><para>
<keysym>Ctrl+Equal</keysym>: Sets font size to default start point size for current font size group previewed
</para></listitem>
<listitem><para>
<keysym>Ctrl+F</keysym>: Changes mode of operation between prefedined fontsets and manual font selection mode
</para></listitem>
</itemizedlist>
</para>

</sect2>

<sect2 id="NsCDE-KeyboardMgr">
<title>Keyboard Style Manager</title>
<para>
Keyboard Style Manager tool can be used to set (xset) 4 values:
<itemizedlist>
<listitem><para>
Auto Repeat on/off: Sets characters to repeat when you hold down their keys
</para></listitem>
<listitem><para>
Start Delay (start of repeat delay): initial delay on pressed key to start with auto repetition
</para></listitem>
<listitem><para>
Repeat Delay: Speed at which auto repeat works
</para></listitem>
<listitem><para>
Click Volume: Determines the volume of key clicks (turned off at 0%)
</para></listitem>
</itemizedlist>
</para>
<para>
This values are standard xset(1) <emphasis>r</emphasis> and <emphasis>c</emphasis> subcommands
and their values, minimal and maximal allowed values are (or should be in most cases) the same
in GUI as they are in command line tool.
</para>
<para>
<guibutton>Default</guibutton> button will set auto repeat to on, start rate to 512, repeat delay to
16 and click volume to 50.
</para>
<para>
<guibutton>Apply</guibutton> button applies setting in runtime, while <guibutton>Save</guibutton>
button writes <filename>$FVWM_USERDIR/Xset.conf</filename> file which is a generated
<command>xset</command> command batch executed during startup.
</para>

<para>
Key Bindings:
<itemizedlist>
<listitem><para>
<keysym>Ctrl+Q</keysym>: Quits Keyboard Style Manager.
</para></listitem>
<listitem><para>
<keysym>Escape</keysym>: Quits Keyboard Style Manager.
</para></listitem>
<listitem><para>
<keysym>Sun Help and F1</keysym>: Displays this help text.
</para></listitem>
</itemizedlist>
</para>

</sect2>

<sect2 id="NsCDE-Occupy">
<title>Occupy Workspace, Occupy Page and Occupy Monitor</title>
<para>
This tool dialog is called from the left titlebar button 1 Window Operations Menu as
"Occupy Workspace", "Occupy Page" or "Occupy Monitor". Or from <keysym>Meta+Space</keysym> key for Workspace,
<keysym>Alt+Space</keysym> for Page, and <keysym>Meta+Alt+Space</keysym> key combinations from the window context. Occupy tool is
the extended (for FVWM pages and multiple monitors) version of the same CDE dialog and it sends selected window to a
workspace, page or XRandR monitor selected from the list, or it can make it sticky across workspaces and/or
pages with <guibutton>All Workspaces</guibutton> or <guibutton>All Pages</guibutton> checkbox
pressed in. One addition here is the checkbox <guibutton>Go With the Window</guibutton>; when checked,
makes NsCDE to change a current workspace, page and/or monitor and go with the window, or where window was sent.
Radio buttons <guibutton>Workspaces:</guibutton>, <guibutton>Pages:</guibutton> and <guibutton>Monitors:</guibutton> are changing the
current context of operation between workspaces, pages and monitors, which is visually also manifested in the
main list as the names of either workspaces, pages or RandR names of the monitors. If called as "Occupy Workspace",
pages or monitors can also be selected and changed by switching this context with this buttons or with the <keysym>Space</keysym>
key shortcut in focused Occupy window. Radio button for monitors and "Occupy Monitor" functionality is only shown
and available if multiple physical (or virtual) monitors are detected by FVWM and NsCDE.
<guibutton>OK</guibutton> performs an action, <guibutton>Dismiss</guibutton> quits Occupy tool without
taking action.
</para>
<para>
On the upper left part of the window there are three buttons with labels <guilabel>Workspaces</guilabel>,
<guilabel>Pages</guilabel> and <guibutton>Monitors:</guibutton>. When either one or another selection is changed from the current state,
that is, state of the workspace and page on which window context was when Occupy is called, there will
appear an ASCII asterisk (*) symbol at the end of the label. This means selection is changed, and this
is visible for workspaces or monitors even when pages are on the selection list and/or vice versa. If selection is
changed back again to state of page, workspace and/or monitor, which was initial, asterisk will disappear, but will
again appear when this selection is changed to some other choice again. That way, orientation of what
was touched can be known.
</para>
<para>
Key Bindings:
<itemizedlist>
<listitem><para>
<keysym>Escape</keysym>: Quits Occupy Tool without performing an action.
</para></listitem>
<listitem><para>
<keysym>H, Sun Help and F1</keysym>: Displays this help text, like <guibutton>Help</guibutton> was pressed.
</para></listitem>
<listitem><para>
<keysym>A</keysym>: Checks <guilabel>All Workspaces</guilabel> or if context is pages,
<guilabel>All Pages</guilabel> checkbox.
</para></listitem>
<listitem><para>
<keysym>Return</keysym>: Performs move action like OK button was pressed, without going to the
selected workspace and/or page.
</para></listitem>
<listitem><para>
<keysym>Ctrl+Return</keysym>: Performs move action like OK button was pressed, and changes active
workspace and/or page to the same destination where window has been sent.
</para></listitem>
<listitem><para>
<keysym>Up/Down</keysym>: Selects workspace, page or monitor in the up or down direction on the list.
</para></listitem>
<listitem><para>
<keysym>Space</keysym>: Changes between workspaces, pages and monitors mode of operation. Actions on workspaces,
pages and monitors can be combined while switching modes of operation, no matter if it was initially called
as "Occupy Workspace", "Occupy Page" or "Occupy Monitor".
</para></listitem>
</itemizedlist>
</para>
</sect2>

<sect2 id="NsCDE-GWM">
<title>Graphical Workspace Manager (GWM)</title>
<para>
Same named graphical tool was historically present usually on Sun Solaris. Graphical Workspace Manager
of NsCDE is FvwmPager and FvwmScript based version of GWM. It implements most of the functions of CDE
GWM which are applicable in NsCDE and FVWM environment. It also implements some NsCDE and FVWM specific
options.
</para>
<para>
This tool can be called from Root Menu, from Applications->NsCDE submenu of the Workspace Menu,
<keysym>Shift+Tab</keysym> (second call) and <keysym>Meta+Alt+Home</keysym> keybindings, and by default
from the 7th Subpanel of the Front Panel (Desktop Settings).
</para>
<para>
GWM enables user to see all of the NsCDE workspaces and pages, navigate pages and workspaces with
mouse, select windows with middle mouse button, and taking actions on them with Window menu actions.
</para>

<para>
With actions on the Workspaces menu, it is possible to:
</para>
<para>
<itemizedlist>
<listitem><para>
Call Workspaces and Pages Style Manager
</para></listitem>
<listitem><para>
Call Workspaces and Pages Style Manager in Rename Workspace mode active with the current workspace
selected for rename.
</para></listitem>
<listitem><para>
Rearrange all windows on the current page in a cascade
</para></listitem>
<listitem><para>
Rearrange all windows on the current page to be tiled vertically
</para></listitem>
<listitem><para>
Rearrange all windows on the current page to be tiled horizontally
</para></listitem>
<listitem><para>
Open the GWM Options dialog
</para></listitem>
<listitem><para>
Exit GWM
</para></listitem>
</itemizedlist>
</para>
<para>
With actions on the Window menu, it is possible to:
</para>
<para>
<itemizedlist>
<listitem><para>
Iconify and deiconify Window selected with a mouse button 2
</para></listitem>
<listitem><para>
Shade or deshade Window selected with a mouse button 2
</para></listitem>
<listitem><para>
Close Window
</para></listitem>
<listitem><para>
Forcefully Close Window (Terminate Application)
</para></listitem>
<listitem><para>
Call Occupy Workspace on the window selected with a mouse button 2
</para></listitem>
</itemizedlist>
</para>
<para>
Help menu contains information about GWM keybindings and GWM manual (this one).
</para>
<para>
Key Bindings:
<itemizedlist>
<listitem><para>
<keysym>Ctrl+M</keysym>: Calls Workspaces and Pages Style Manager
</para></listitem>
<listitem><para>
<keysym>Ctrl+R</keysym>: Calls Workspaces and Pages Style Manager in rename workspace
mode with the current workspace ready to be renamed
</para></listitem>
<listitem><para>
<keysym>Ctrl+O</keysym>: Pops up Options window of the GWM
</para></listitem>
<listitem><para>
<keysym>Ctrl+W</keysym>: Calls Occupy Workspace tool
</para></listitem>
<listitem><para>
<keysym>Escape</keysym>: Quits GWM.
</para></listitem>
<listitem><para>
<keysym>Ctrl+Q</keysym>: Quits GWM.
</para></listitem>
<listitem><para>
<keysym>Sun Help and F1</keysym>: Displays this help text, like <guibutton>Help</guibutton> was pressed.
</para></listitem>
</itemizedlist>
</para>
<sect3 id="NsCDE-GWMOptions">
<title>Graphical Workspace Manager Options</title>
<para>
GWM Options dialog can configure some aspects of the GWM itself and GWM pager behaviour.
By configuring the later, a stripped down version "GlobalPager" is also configured.
</para>
<para>
The following controls can be configured:
</para>
<para>
<itemizedlist>
<listitem><para>
Show Workspace Backdrops - if unselected, only a CDE palette colors associated to this
workspace will be drawin in the workspace pager background. Default is selected.
</para></listitem>
<listitem><para>
Highlight Current Workspace Page - current workspace background will be colored in active
window color. By default this option is off, it is however used by LocalPager.
</para></listitem>
<listitem><para>
Workspace Names Above Workspaces - workspace names are drawn as headers of the workspaces. Default.
</para></listitem>
<listitem><para>
Workspace Names Below Workspaces - workspace names are drawn as footers of the workspaces. Not default.
</para></listitem>
<listitem><para>
Number Of Visible Rows - when this number is smaller, workspaces are firstly drawn horizontally, then
vertically. If this number is 1, workspaces are all in one row. Biggest number possible with current
number of workspaces used will produce vertical GWM application with all workspaces in one column.
</para></listitem>
<listitem><para>
Desired Workspace Width (Ratio) - number between 10 and 20. By default a calculation is done to show
bigger GWM on higher screen resolutions and more compact smaller on lower screen resolutions. If this
number is too big, and in combination with one-row or one-column setup with 4 or more workspaces on
lower resolutions can produce wider window that cannot fit on the screen. Experimenting is
enocouraged however.
</para></listitem>
<listitem><para>
Show Window Names In Balloons - weather to show small marker balloons on mouse over windows action
in the pager. Default is on.
</para></listitem>
<listitem><para>
Respect Window Skip List - do not draw in the pager windows which are part of the FVWM skiplist
(like Front Panel, Gkrellm, transients etc ...)
</para></listitem>
<listitem><para>
Show Small Icons Inside Windows - if selected (the default) it will draw mini icons of applications
present on the workspaces.
</para></listitem>
<listitem><para>
Show Names Inside Windows: icon names of the windows will be written in pager windows frames with
very small font instead of mini icons. Not default.
</para></listitem>
</itemizedlist>
</para>
<para>
Options Dialog Key Bindings:
<itemizedlist>
<listitem><para>
<keysym>Escape</keysym>: Closes GWM Options dialog without taking any action
</para></listitem>
<listitem><para>
<keysym>Tab</keysym>: Cycles configurable item elements from top to bottom of the window
</para></listitem>
<listitem><para>
<keysym>Return</keysym>: Takes the action as if <guibutton>OK</guibutton> button was pressed.
</para></listitem>
<listitem><para>
<keysym>Sun Help and F1</keysym>: Displays this help text, like <guibutton>Help</guibutton> was pressed.
</para></listitem>
</itemizedlist>
</para>
</sect3>
</sect2>

<sect2 id="NsCDE-GeometryMgr">
<title>Window Geometry Manager</title>
<para>
This tool dialog is called from the left titlebar button menu. Or from <keysym>Meta+Alt+G</keysym>
key combination from the window context. This Manager offers convenience to save size and position
of the non-transient window. Once window geometry is saved, next run of the same application window
on FVWM page where the window of the same resource+class combination is not already present will cause
window to be resized to that exact width, height, X position and Y position X11 coordinates as stored
in the <filename>$FVWM_USERDIR/GeoDB.ini</filename>. This ini-style file is managed by this
application, as well as from the background runner <filename>$NSCDE_TOOLSDIR/confset</filename> and
read by the <filename>$NSCDE_TOOLSDIR/confget</filename>. Application automatically fills X11 Class
and X11 Resource names on contextual call, as well as geometry parameters. Before applying this
settings, user has a chance to fine tune this parameters in text fields and confirm (or cancel) the
action on the end. Using <guibutton>Clear</guibutton> all geometry values, as well as those which may
be saved from the past are cleared and deleted. After the Clear action, there are two options:
<itemizedlist>
<listitem><para>
Filling all fields manually and saving the result
</para></listitem>
<listitem><para>
Saving empty fields: this action will cancel and/or remove any existing geometry
mappings for the selected X11 program window.
</para></listitem>
</itemizedlist>
Note that geometry savings are dependent on the current monitor resolution. In other words,
size and position of the X11 window are saved for 1920x1080, 2560x1440, 1600x900 and any
other possible monitor resolution. Multiple savings on different monitor resolutions are
possible and saved under separate sections in <filename>$FVWM_USERDIR/GeoDB.ini</filename>.
</para>
<para>
Key Bindings:
<itemizedlist>
<listitem><para>
<keysym>Escape</keysym>: Quits Window Geometry Manager without performing an action.
</para></listitem>
<listitem><para>
<keysym>Sun Help and F1</keysym>: Displays this help text, like <guibutton>Help</guibutton> was pressed.
</para></listitem>
<listitem><para>
<keysym>Return</keysym>: Performs action like Save button was pressed.
</para></listitem>
</itemizedlist>
</para>
</sect2>

<sect2 id="NsCDE-PointerMgr">
<title>Mouse Style Manager</title>
<para>
Mouse Style Manager tool manages pointer - that is, mouse settings. It's
duties are few more than only xset(1) <emphasis>m</emphasis> command. Namely:
<itemizedlist>
<listitem><para>
Mouse acceleration (xset)
</para></listitem>
<listitem><para>
Threshold (xset)
</para></listitem>
<listitem><para>
Double-Click
</para></listitem>
<listitem><para>
Handedness (xmodmap)
</para></listitem>
</itemizedlist>
</para>
<para>
Acceleration and Threshold are standard xset(1) <emphasis>m</emphasis> options
and man page for xset(1) should be consulted.
</para>
<para>
<emphasis>Handedness</emphasis> can be set to flip left and right mouse button functions, while
<emphasis>Double Click</emphasis> is in fact most complex: it has test area where user can test
double click speed (pixmap will change on double-click success), and this
setting is changing:
</para>
<para>
<itemizedlist>
<listitem><para>
 FVWM MenuStyle DoubleClick value (<filename>$FVWM_USERDIR/NsCDE.conf</filename>)
</para></listitem>
<listitem><para>
 X Resources multiClickTime resource in <filename>$FVWM_USERDIR/Xdefaults.mouse</filename>
</para></listitem>
<listitem><para>
 Qt/KDE settings in <filename>$HOME/.kde/share/config/kdeglobals</filename> (or similar path) if
  found
</para></listitem>
<listitem><para>
 Gtk2 (<filename>$HOME/.gtkrc-2.0</filename>) if file exists
</para></listitem>
<listitem><para>
 Gtk3 (<filename>$HOME/.config/gtk-3.0/settings.ini</filename>) if file exists
</para></listitem>
</itemizedlist>
</para>
<para>
Double-Click value is in milliseconds in all mentioned configurations.
<guibutton>Apply</guibutton> button applies <command>xset</command> and
<command>xmodmap</command> values set in runtime, but not double-click settings.
</para>
<para>
<guibutton>Save</guibutton> button saves changes in <filename>$FVWM_USERDIR/Xset.conf</filename>
and all other optional files for widget and FVWM integration.
<guibutton>Default</guibutton> button will set handedness for right-handed, double-click on 450,
acceleration on 60, and threshold on 8, apply xset and xmodmap values, FVWM
<emphasis>MenuStyle</emphasis> <emphasis>DoubleClickTime</emphasis> and will warp pointer
to <guibutton>Save</guibutton> button for actions to be written in config files.
</para>

<para>
Key Bindings:
<itemizedlist>
<listitem><para>
<keysym>Escape</keysym>: Quits Mouse Style Manager.
</para></listitem>
<listitem><para>
<keysym>Ctrl+Q</keysym>: Quits Mouse Style Manager.
</para></listitem>
<listitem><para>
<keysym>Sun Help and F1</keysym>: Displays this help text.
</para></listitem>
</itemizedlist>
</para>

</sect2>

<sect2 id="NsCDE-PowerSaveMgr">
<title>Power Save Manager</title>
<para>
This tool manages screen DPMS values. It uses standard <command>xset(1)</command> to set screen
<emphasis>standby</emphasis>, <emphasis>suspend</emphasis> and <emphasis>off</emphasis> times.
Values are from 0 to 65535. Standby time cannot be bigger than suspend and/or off time, and
suspend time cannot be bigger than off time.
</para>
<para>
It has a checkbox which enables or disables DPMS management at all.
Values are written in <filename>$FVWM_USERDIR/Xset.conf</filename>.
</para>
<para>
If <filename>$HOME/.xscreensaver</filename> is present and has DPMS options
in it, they will be synchronized with xset <emphasis>dpms</emphasis> options
written in <filename>Xset.conf</filename>.
<guibutton>Apply</guibutton> button applies runtime (but not xscreensaver) while
<guibutton>Save</guibutton> button writes configuration file and <filename>$HOME/.xscreensaver</filename>
DPMS settings if this file exists. <guibutton>Default</guibutton> button will set the following defaults:
DPMS <emphasis>on</emphasis>, standby <emphasis>1200 seconds</emphasis>, suspend <emphasis>1800
seconds</emphasis>, and off time <emphasis>2400 seconds</emphasis>, apply this settings on runtime,
and point mouse to <guibutton>Save</guibutton> button for changes to be written.
</para>

<para>
Key Bindings:
<itemizedlist>
<listitem><para>
<keysym>Escape</keysym>: Quits Powersave Style Manager.
</para></listitem>
<listitem><para>
<keysym>Ctrl+Q</keysym>: Quits Powersave Style Manager.
</para></listitem>
<listitem><para>
<keysym>Sun Help and F1</keysym>: Displays this help text.
</para></listitem>
</itemizedlist>
</para>

</sect2>

<sect2 id="NsCDE-SubpanelMgr">
<title>Subpanel Manager</title>
<para>
Only in NsCDE. Tool written for managing FvwmButtons transient Subpanels which
are opened from the Front Panel. It is called from <emphasis>Install Icon</emphasis> action on
every Subpanel. This tool exists because FvwmButtons doesn't implement drag
and drop, and there is no application manager present, since this part of CDE
functions cannot be easy implemented even if some file manager is taken to act
as application manager.
</para>
<para>
Subpanel Manager has a list of all applications which are providing system menu
with it's presence (fvwm-menu-desktop is used in the background for generating
application list), and the list of applications provided in the current Subpanel from
which tool is called by "Install Icon".
This lists are displayed on the top of the window side by side: system menu
applications on the left, and current Subpanel items on the right list.
There are 3 text fields: <guilabel>Name</guilabel>, <guilabel>Command</guilabel>
and <guilabel>Icon File</guilabel>. This fields are
automatically populated when some item from mentioned lists is clicked, but it
can also be populated manually if user wishes to add a custom application,
Fvwm Module, Fvwm Function or other entry manually on the Subpanel. For manually
adding application entry to subpanel, initially at least one item from the list
of available applications must be initially selected, and then totally or partially
rewritten and overriden, otherwise, no item will be added to the subpanel.
Special type of "Check for ..." is meant for entries which in command field are
defining for the first command something common like shell, <command>env</command> etc.
If we want to override a pointless check existance for this, and define other command
string for checking, popdown menu option <guilabel>Check for ...</guilabel> can be selected,
and small text field below popdown menu will appear, where this command can be specified.
Subpanel Manager can also remove existing entries from the Subpanel.
</para>
<para>
Subpanel Manager implements this helper functions for modifying and applying
settings on new items:

<itemizedlist>
<listitem><para>Type (exec, module, function, other, check-for)</para></listitem>
<listitem><para>Do not check for command existence</para></listitem>
<listitem><para>Icon indicator</para></listitem>
</itemizedlist>

</para>

<para>
To place some new application from the left (all applications) list in exact place
on the subpanel, select an existing entry on the subpanel (right) list. When left
arrow button is clicked, new application will appear on the list exactly below that
one which has been previously selected, otherwise, default is to place new entries
as second entry on the subpanel's list of applications.
</para>

<para>
Click on the icon indicator will open simple file browser which can be used to find,
see as preview, and set icon for manual entries which are not part of the applications
list, or an alternative icon for program from applications list.
<guibutton>Apply</guibutton> button regenerates subpanel, while <guibutton>Save</guibutton>
button does this and also quits Subpanel Manager.
</para>

<para>
Subpanels configuration file <filename>Subpanels.actions</filename>, can be edited by
hand in <varname>$FVWM_USERDIR</varname> if something needs to be changed on existing
entries. If editing by hand, <command>$NSCDE_TOOLSDIR/generate_subpanels</command>
must be used to generate FVWM configuration output which must be redirected into
<filename>$FVWM_USERDIR/Subpanels.fvwmX.fvwmconf</filename>, where "fvwmX" is either
"fvwm2" or "fvwm3".
</para>

<para>
Key Bindings:
<itemizedlist>
<listitem><para>
<keysym>Escape</keysym>: Quits Subpanel Manager.
</para></listitem>
<listitem><para>
<keysym>Ctrl+Q</keysym>: Quits Subpanel Manager.
</para></listitem>
<listitem><para>
<keysym>Sun Help and F1</keysym>: Displays this help text.
</para></listitem>
</itemizedlist>
</para>

</sect2>

<sect2 id="NsCDE-SubpanelSettings">
<title>Subpanel Settings</title>
<para>
A small helper dialog with functions to change display name of the subpanel,
width of the subpanel if titles require wider (or short ones narrower) panel
frame, end enabled/disabled state of the subpanel.
Button <guibutton>Reset</guibutton> will erase user configuration and load
system default one for given subpanel. Name, width and enablement all have
their own <guibutton>Default</guibutton> button right of the text field. If pressed, it will load
system defaults for name, width and subpanel's enablement state. All buttons are doing
in memory changes until <guibutton>OK</guibutton> is pressed,
except <guibutton>Reset</guibutton> button which acts immediately.
<guibutton>Close</guibutton> button closes dialog without changes except if <guibutton>Reset</guibutton>
has been pressed. This dialog is called from subpanel menu which can be
popped with the left (and only) button on subpanel's titlebar. It is called
<guilabel>Subpanel Settings</guilabel>. It reloads configuration of the given subpanel after
applying changes and exiting with <guibutton>OK</guibutton>.
</para>

<para>
Key Bindings:
<itemizedlist>
<listitem><para>
<keysym>Escape</keysym>: Quits Subpanel Settings.
</para></listitem>
<listitem><para>
<keysym>Ctrl+Q</keysym>: Quits Subpanel Settings.
</para></listitem>
<listitem><para>
<keysym>Sun Help and F1</keysym>: Displays this help text.
</para></listitem>
</itemizedlist>
</para>

</sect2>

<sect2 id="NsCDE-SysActionDialog">
<title>System Action Dialog</title>

<para>
This is the login/logout form with the possibilities to reboot or shutdown the
system, or change X session. It has also options for suspend/sleep (S3), hybrid suspend,
and hibernation of the system. Of course, <command>reboot</command>, <command>shutdown</command>,
<command>suspend</command>, <command>hybrid suspend</command> and <command>hibernate</command>
will work for a ordinary user only if system is configured with authorizations for a user to
perform such actions. Examples of this can be systemd(1) on Linux which recognizes local user,
or system with <command>sudo(8)</command> entries are configured to do so. While System Action
Dialog is active, root cursor changes to line-crossed cursor which is dismissed after the
action is performed or dialog action dismissed. Not all of this actions are possible on all
systems, but with the <filename>$NSCDE_TOOLSDIR/acpimgr</filename> wrapper, Linux with pm-utils,
Linux without pm-utils but with systemd(1) and FreeBSD with acpiconf(8) are supported in this
moment.
</para>

<para>
In <filename class="directory">$NSCDE_ROOT/share/doc/nscde/examples/sudo</filename>, one can
find example which can be put in <filename class="directory">/etc/sudoers.d</filename> with
little changes. <guibutton>Confirm</guibutton> button applies, <guibutton>Dismiss</guibutton>
cancels and closes the dialog.
</para>

<para>
Key Bindings:
<itemizedlist>
<listitem><para>
<keysym>Escape</keysym>: Quits System Action Dialog without performing any action.
</para></listitem>
<listitem><para>
<keysym>R</keysym>: Toggles Remember State of Action On/Off
</para></listitem>
<listitem><para>
<keysym>Ctrl+Q</keysym>: Same as <guibutton>Escape</guibutton>
</para></listitem>
<listitem><para>
<keysym>Ctrl+Return</keysym>: Performs an action as if <guibutton>Confirm</guibutton> is pressed.
</para></listitem>
<listitem><para>
<keysym>Up/Down</keysym>: Changes between 7 possible options of System Action Dialog's popup menu.
</para></listitem>
<listitem><para>
<keysym>Sun Help and F1</keysym>: Displays this help text.
</para></listitem>
</itemizedlist>
</para>

</sect2>

<sect2 id="NsCDE-SysInfo">
<title>Sysinfo</title>
<para>

Well known <emphasis>Workstation Information</emphasis> info dialog.
It doesn't have any functions apart <guibutton>close (Dismiss)</guibutton> button. It's
role is informational. It displays current username, hostname, machine
and CPU architecture type. IP address, hostid, network (NIS, NISPLUS,
LDAP ...) domain name, internet domain name, size of the physical RAM,
swap size, swap usage (as progressbar), operating system long name, and
then version of the FVWM and version of the NsCDE. Last, it shows time
when system was last booted. This dialog can be found on the <emphasis>Tools</emphasis>
or fourth Subpanel of the Front Panel in default configuration, under
the entry <emphasis>Workstation Info</emphasis>.
In the context of it's window, keys <keysym>Escape</keysym>, <keysym>Return</keysym> and
<keysym>Q</keysym> will close a window, while Sun <keysym>Help</keysym> and
<keysym>F1</keysym> displays this documentation.

</para>
</sect2>

<sect2 id="NsCDE-WindowMgr">
<title>Window Style Manager</title>
<abstract>
<para>
This GUI tool is not just exact copy of the similary named CDE tool
<link linkend="NsCDE-WindowMgr">Window Style Manager</link>.
NsCDE Window Style Manager extends number of actions which can be
configured regarding window behaviour, which is undestandible because
FVWM window manager is a way more configurable and powerful than CDE's
original dtwm.
</para>
<para>
On the other hand, writing a tool that will handle ALL fvwm options
and write that in FvwmScript which not much a powerful language can
easily contain tens of thousands lines of code, and yet be buggy and
probably some things will be impossible to do. Even then, it will be
burden for users to use and almost completely avoided.
</para>
<para>
A middle solution was provided: all functions from original CDE dialog,
plus some similar extended FVWM options, on the first tab, and other
important configurations on the rest three tabs. Tabs are implemented
as popup menu on the top right side of the window - choosing an option
from that menu changes displayed options - a poor man's tabs in a way.
Some of options provided by
<link linkend="NsCDE-WindowMgr">Window Style Manager</link> are not full set of
this options if configured manually in FVWM configuration, but for
needs of CDE clone this is more than enough.
</para>
</abstract>

<sect3 id="NsCDE-WindowMgr-Behavior">
<title>Configuration Section: Window Behavior</title>
<para>
<itemizedlist>
<listitem><para>
 <guilabel>Only Pointer Inside Window Makes Focus</guilabel>: this configures so called
<emphasis>MouseFocus</emphasis> as catch-all FVWM Style (*). See fvwm(1) for MouseFocus.
</para></listitem>
<listitem><para>
 <guilabel>Point In Window To Make Active</guilabel>: this is FVWM <emphasis>SloppyFocus</emphasis>
Style option. This is default focus style. If you want more CDE behavior,
select MouseFocus option above. In SloppyFocus mode, pointer will make
focus on window while entering it, but will not lose focus while leaving
the window. See fvwm(1) for SloppyFocus.
</para></listitem>
<listitem><para>
 <guilabel>Click In Window To Make Active</guilabel>: self-explanatory.
This is FVWM's ClickToFocus style.
</para></listitem>
<listitem><para>
 <guilabel>Raise Window When Made Active</guilabel>: self explanatory. If selected,
focused window will be raised. This option will enable FvwmAuto
module instance with <parameter class="option">-mfocus</parameter> option. See fvwm(1) and FvwmAuto(1).
</para></listitem>
<listitem><para>
 <guilabel>Allow Primary Windows On Top</guilabel>: this will allow window to lower it's
transient windows (popups and such). See fvwm(1) for <emphasis>RaiseTransient</emphasis>
and <emphasis>DontRaiseTransient</emphasis> styles.
</para></listitem>
<listitem><para>
 <guilabel>Lower Transient With Primary Window</guilabel>: self explanatory. See fvwm(1)
for <emphasis>LowerTransient</emphasis> and <emphasis>DontLowerTransient</emphasis>
</para></listitem>
<listitem><para>
 <guilabel>Raise/Lower Primaries With Transients</guilabel>: if transient windows are
raised or lowered, primary windows goes with them. See fvwm(1) for
<emphasis>StackTransientParent</emphasis> and <emphasis>DontStackTransientParent</emphasis>
style options.
</para></listitem>
<listitem><para>
 <guilabel>Show Contents During Move</guilabel>: weather window contents is visible or
not during window move. Default is a transparent frame with a grid.
See fvwm(1) for <emphasis>OpaqueMoveSize</emphasis>.
</para></listitem>
<listitem><para>
 <guilabel>Time After Which Active Window Is Raised</guilabel>: if <guilabel>Raise Window When
Made Active</guilabel> is turned on, this option will be enabled and time in
milliseconds can be set here. See FvwmAuto(1).
</para></listitem>
<listitem><para>
 <guilabel>Manual Window Movement Threshold</guilabel>: see fvwm(1) for a
<emphasis>MoveThreshold</emphasis> option. 5 pixels is the default.
</para></listitem>
</itemizedlist>
</para>
</sect3>

<sect3 id="NsCDE-WindowMgr-Icons">
<title>Configuration Section: Window Icons</title>
<para>
<itemizedlist>
<listitem><para>
 <guilabel>Use Icon Box</guilabel>: if this option is selected, main FVWM configuration
in <filename>Main.fvwmconf</filename> will spawn <emphasis>FvwmIconBox</emphasis>
configured as close as possible as an alternative to icons of iconified windows.
Classic icons will be disabled. The rest of options in this "tab" will be disabled because
they do not apply anymore in this configuration. Note: FvwmIconBox has
not exactly the same functionality as CDE's Icon Box.
</para></listitem>
<listitem><para>
 <guilabel>Place On Workspace</guilabel>: default. Icons of the windows will be placed
on the screen. By default, from top left to the direction bottom left.
</para></listitem>
<listitem><para>
 <guilabel>Place Icons Left/Right from Bottom/Top to Top/Bottom</guilabel>: this four
exclusive options will direct icon placement on the screen. See
<emphasis>IconBox</emphasis> and <emphasis>IconFill</emphasis> options in fvwm(1) for more information.
</para></listitem>
<listitem><para>
 <guilabel>Default Icon Size</guilabel>: in pixels. See <emphasis>IconSize</emphasis> in fvwm(1).
</para></listitem>
<listitem><para>
 <guilabel>Maximum Icon Size</guilabel>: in pixels. See <emphasis>IconSIze</emphasis> in fvwm(1).
</para></listitem>
</itemizedlist>
</para>
</sect3>

<sect3 id="NsCDE-WindowMgr-Pageedges">
<title>Configuration Section: Page Edges</title>
<para>
<itemizedlist>
<listitem><para>

 <guilabel>Raise Front Panel On Page Change</guilabel>: as is says, when current active
page changes, Front Panel will be raised.
</para></listitem>
<listitem><para>
 <guilabel>Pager Preview On Page Change</guilabel>:  on page change, spawn a small
transient FVWM pager called <emphasis>LocalPager</emphasis> on the top center of the
screen to indicate what is on the current page in the workspace - this is controlled
by the FVWM infostore variable <varname>pageshowrootpager</varname> in the
<filename>$FVWM_USERDIR/NsCDE.conf</filename>
</para></listitem>
<listitem><para>
 <guilabel>Disable Page Change On Screen Edge</guilabel>:  if selected, current page will
not change when pointer is longer time on the screen edge. In this mode,
active page must be changed by other means (keyboard shortcuts, WSM
submenus, PGM, left click on 1st titlebar button ...)
</para></listitem>
<listitem><para>
 <guilabel>Page Change On Screen Edge (1px)</guilabel>:  default internal detector of the
screen edge. Do not change this if it is working.
</para></listitem>
<listitem><para>
 <guilabel>Page Change On Screen Edge (2px)</guilabel> If FVWM has a problem with X server
and page change does not work smooth, use this option as a safe
alternative. See fvwm(1).
</para></listitem>
<listitem><para>
 <guilabel>Page Edge Resistance</guilabel>:  how many milliseconds FVWM waits on the screen
edge area for an page change action to be taken. Default is 380.
</para></listitem>
<listitem><para>
 <guilabel>Edge Window Move Resistance</guilabel>:  similar as Page  Edge Resistance, but
for move operation - how hard it should be to move a window between pages.
Defaults to 80 pixels.
</para></listitem>
<listitem><para>
 <guilabel>Edge Window Move Delay</guilabel>:  time to wait to consider moved window for page
change in the first place (to start counting pixels of the Edge Window Move
Resistance). Defaults to 320 pixels.
</para></listitem>
</itemizedlist>
</para>
</sect3>

<sect3 id="NsCDE-WindowMgr-Animations">
<title>Configuration Section: Animation</title>
<para>
This tab controls behavior of the FvwmAnimate. See FvwmAnimate(1).
<itemizedlist>
<listitem><para>
 <guilabel>Animate Window Iconification</guilabel>:  on/off of the FvwmAnimate module.
</para></listitem>
<listitem><para>
 <guilabel>Animation Effect</guilabel>:  See FvwmAnimate(1)
</para></listitem>
<listitem><para>
 <guilabel>Animation Frame Delay</guilabel>: See FvwmAnimate(1)
</para></listitem>
<listitem><para>
 <guilabel>Animation Revolution Twist</guilabel>: See FvwmAnimate(1)
</para></listitem>
<listitem><para>
 <guilabel>Outline Width</guilabel>: See FvwmAnimate(1)
</para></listitem>
<listitem><para>
 <guilabel>Animation Iterations</guilabel>: See FvwmAnimate(1), be careful on virtual displays
with a bad video driver. It can behave really slower than on host system with
the same parameters.
</para></listitem>
</itemizedlist>
</para>
</sect3>

<sect3 id="NsCDE-WindowMgr-Misc">
<title>Misc Window Style Manager Functions</title>
<para>
Button <guibutton>Default</guibutton> on the top right edge of the window will read
system defaults into options and they will be set in permanent configuration if
<guibutton>OK</guibutton> button is pressed afterwards.
</para>
<para>
<guibutton>OK</guibutton> button applies changes to <filename>$FVWM_USERDIR/NsCDE.conf</filename>.
<guibutton>Dismiss</guibutton> button will close the window without making any changes.
</para>

<para>
Key Bindings:
<itemizedlist>
<listitem><para>
<keysym>Escape</keysym>: Quits Window Style Manager.
</para></listitem>
<listitem><para>
<keysym>Ctrl+Q</keysym>: Quits Window Style Manager.
</para></listitem>
<listitem><para>
<keysym>Sun Help and F1</keysym>: Displays this help text.
</para></listitem>
</itemizedlist>
</para>

</sect3>

</sect2>

<sect2 id="NsCDE-WsPgMgr">
<title>Workspaces and Pages Style Manager (WsPgMgr)</title>
<para>
This tool is specific to NsCDE. It configures the following things:
<itemizedlist>
<listitem><para>
Number of the workspaces
</para></listitem>
<listitem><para>
 Names of the workspaces
</para></listitem>
<listitem><para>
 Number of virtual pages in the workspaces
</para></listitem>
<listitem><para>
 Use / Do not use compact Workspace Manager on the Front Panel
</para></listitem>
<listitem><para>
 Desktop Model on multi head monitor setup (FVWM3 only)
</para></listitem>
</itemizedlist>
</para>
<para>
This graphical tool writes files <filename>$FVWM_USERDIR/WSM.conf</filename>
and <filename>$FVWM_USERDIR/NsCDE.conf</filename>.
On the top of the window is a graphical representation of the Workspace
Manager. When clicked, every button becomes editable field and it's name can
be changed (pres <keysym>return</keysym> on the text field after writing new name).
This change will be written immediately WITHOUT pressing <guibutton>OK</guibutton> button.
Name of the workspace will be changed across all NsCDE and FVWM (WSM, Occupy
Workspace/Page/Monitor, menus etc). In NsCDE, there are 4 options for workspaces:
2, 4, 6 and 8 model. FVWM itself however supports much larger number, but in NsCDE care
must be taken about presentation of this workspaces in various applets and tools.
Nevertheless, theoretically even in NsCDE with maximum number of workspaces
multiplied with maximum number of pages, user can get 128 working screens
which is probably enough (too much) for 99% of the people.
</para>
<para>
Check Box <guibutton>Use Compact Workspace Manager</guibutton> when checked in will
instruct NsCDE to use Workspace Manager widget in the Front Panel sized for as it is
for four workspaces, but it will expand buttons in two workspaces setup and shrink
accordingly in the case of six or eight workspaces setup. This option does not have
any visual effect on four workspaces setups, because it is sized for such setup.
</para>
<para>
Number of vertical and horizontal pages can also be configured here.
This change will affect Page Manager (PGM) icon on the Front Panel, and menus which are displaying
pages. Page names are not configurable via GUI, their names are read from
<filename class="directory">$NSCDE_DATADIR/defaults/pages/</filename>, but can be overriden in
user's configuration. User can put into it's <filename>$FVWM_USERDIR/WSM.conf</filename> enties
in the same format as files in the above mentioned directory.
</para>
<para>
Pop up menu prefixed as "Monitor Workspaces" allows users of NsCDE with FVWM3 to select between
currently existing three modes of FVWM3 desktop configurations: global, per-monitor or shared.
When used with FVWM2, this popup will not be shown, instead, text "Global Only (FVWM2)" will
indicate non-applicability of this feature under FVWM2. Under FVWM3, new DesktopConfiguation
model is used immediately, but FVWM3 is still restarted to get consistent and clear new
behaviour of the window manager.
</para>
<para>
<guibutton>OK</guibutton> button saves configuration, restarts window manager and quits.
<guibutton>Cancel</guibutton> button discards, except if new names of desks are set, because
this is written immediately, but window manager is not restarted.
Workspaces and Pages Style Manager is called from the Style Manager, NsCDE submenu of the
Workspace Menu's Applications submenu, and Front Panel's small left button menu which is called
when that button is clicked with the right pointer button.
</para>
</sect2>

<sect2 id="NsCDE-NProcMgr">
<title>NsCDE Process Manager (NProcMgr)</title>
<para>
This tool is specific to NsCDE. It manages NsCDE FVWM and rest NsCDE processes, and re-reads
given part of the FVWM configuration on demand. The following actions are provided and supported:
<itemizedlist>
<listitem><para>
 Recheck - Check selected item processes running state
</para></listitem>
<listitem><para>
 Restart - Restarts selected item processes
</para></listitem>
<listitem><para>
 Stop - Stops selected item processes
</para></listitem>
<listitem><para>
 Start - Starts selected item processes
</para></listitem>
<listitem><para>
 Reread - Reads fresh FVWM configuration for the item selected on the
 <guibutton>Configurations</guibutton> popup menu.
</para></listitem>
</itemizedlist>
</para>
<para>
There can be more processes (items) selected for a given action. Items are not unselected after action.
NsCDE Process Manager can be used for diagnostic, debugging and developing functions and other parts of
the NsCDE. It Provides GUI for "KillModule", "Module" and various NsCDE FVWM functions, and for f_ReadCfg".
Process list consists of check buttons with item/process names on the left, and their functional state, running
state and PID on the right side. After every action, selected item is checked again and it's running state and
PID are refreshed. <guibutton>Check All Now</guibutton> button when pressed will refresh status for all items,
selected or not.
</para>

<para>
Key Bindings:
<itemizedlist>
<listitem><para>
<keysym>Ctrl+Q</keysym>: Quits Workspaces and Pages Style Manager.
</para></listitem>
<listitem><para>
<keysym>Sun Help and F1</keysym>: Displays this help text.
</para></listitem>
<listitem><para>
<keysym>Ctrl+A</keysym>: Hits Apply button.
</para></listitem>
<listitem><para>
<keysym>Ctrl+R</keysym>: Hits Reread button.
</para></listitem>
<listitem><para>
<keysym>Ctrl+K</keysym>: Hits Check All Now button.
</para></listitem>
<listitem><para>
<keysym>A</keysym>: Cycles actions from Action PopUp menu.
</para></listitem>
<listitem><para>
<keysym>C</keysym>: Cycles configurations from Configurations PopUp menu.
</para></listitem>
</itemizedlist>
</para>

</sect2>

</sect1>

<sect1 id="NsCDE-Helper-Dialogs">
<title>Helper Dialogs</title>
<sect2 id="NsCDE-ActionForm">
<title>ActionForm - FvwmScript</title>
<para>
Dialog which uses custom text and asks user for action.
Action is then executed (<guibutton>OK</guibutton>) or aborted (<guibutton>Dismiss</guibutton>).
Example of usage is restart dialog. Application must
provide in argument vector question text, title text, buttons text,
and buttons actions when calling this dialog.
</para>
</sect2>

<sect2 id="NsCDE-ChoiceForm">
<title>ChoiceForm - FvwmScript</title>
<para>
Similar as ActionForm, but button actions are not provided in command
line, but signal about chosen action is sent to the calling program
("father" FvwmScript usually).
Used only in <link linkend="NsCDE-FontMgr">Font Style Manager</link> for now.
</para>
</sect2>

<sect2 id="NsCDE-FilePicker">
<title>FilePicker - FvwmScript</title>
<para>
A simple file pick open/save dialog. Copy of FVWM file picker,
but with added option to display a file if file is an icon. It is a
simple file browser with <guibutton>up</guibutton> and <guibutton>home</guibutton> shortcuts,
path view and <guibutton>show/hide</guibutton> button for hidden (files starting with a dot) files.
</para>
<para>
Used in <link linkend="NsCDE-BackdropMgr"> Backdrop</link> Style Manager, Subpanel Manager,
and <link linkend="NsCDE-ColorMgr">Color Style Manager</link>
for adding backdrops, photos, icons and palettes.
</para>
</sect2>

<sect2 id="NsCDE-InputForm">
<title>InputForm - FvwmScript</title>
<para>
Form with text field which asks user to name something. If <guibutton>OK</guibutton> is
pressed, string is sent to the parent script for further processing.
Used in <link linkend="NsCDE-FontMgr">Font Style Manager</link>.
</para>
</sect2>

<sect2 id="NsCDE-WaitNotice">
<title>WaitNotice - FvwmScript</title>
<para>
Short lived simple FvwmScript form, butonless and with a 3 slots for text.
This dialog serves as short information if some NsCDE action is started which
is not immediately obvious in a 1-2 seconds. It will appear in the middle of the
screen with a bigger font and relief text and live between half of the second till
5 seconds. Depending with which text and duration time it was called by some function
or other FvwmScript program. If clicked or receives return or escape key, it will
dissapear immediately.
</para>
<para>
Used by <link linkend="NsCDE-ColorMgr">Color Style Manager</link>,
SysActionDialog and a documetation view function
<filename>f_DisplayURL</filename>.
</para>
</sect2>

<sect2 id="NsCDE-Splash">
<title>Splash - FvwmScript</title>
<para>
Splash screen is started at the beggining of the NsCDE session. It covers all the
screen(s) and displays NsCDE logo in upper left corner, and on the lower left corner
there is a info about system on which NsCDE is running, FVWM version used, licence,
and startup message. Pressing <keysym>Ctrl+C</keysym> or clicking at the text exits
Splash screen before it's timeout, which is 7-8 seconds. Splash is wrapped in the
f_Splash function and can be called interactively during existing session by
calling this function.
</para>
</sect2>

</sect1>

<sect1 id="NsCDE-Backdrops-Palettes-Fonts">
<title>Backdrops, Palettes and Fonts</title>
<para>
Together with Workspace Manager, Backdrops and Palettes are probably most
recognizable aspects of CDE, by which CDE is visually distinguished from
other desktop environments.
</para>
<para>
CDE backdrops, are relatively simple XPM textures and pictures consisting
usualy from 2-5 <emphasis>base</emphasis> colors: <emphasis>background</emphasis>,
<emphasis>foreground</emphasis>, <emphasis>selectColor</emphasis>,
<emphasis>topShadowColor</emphasis>, and <emphasis>bottomShadowColor</emphasis>.
This colors are taken from the current (or custom) palette and applied to the symbolic
definition of colors in XPM templates. Backdrop is then generated, tiled and
applied to the root window. Every workspace can have it's own backdrop texture. In
4 colors mode of the palette theme, they are all colored in the same pattern,
while in 8 colors mode, every workspace from 1-4 has it's own color variant from
the current palette, in that case, workspaces from 5 to 8 are repeating colors
from 1 to 4. In other words, if there are more that four desks defined, color of
the fifth workspace is repeated color of the first, sixth of the second and so on.
</para>
<para>
Here, in addition to original CDE textures, there are some 100 new and custom
textures created from (free and public) textures which were convenient for
this customization. In other words, NsCDE implements more than 100 backdrops,
and with Backdrop Style Manager user can import to it's
<filename class="directory">$FVWM_USERDIR/backdrops</filename> it's own backdrops,
or put them there with terminal or file manager.
</para>
<para>
Backdrops must have alternative extension for X Pixmaps: that is, not
<emphasis>.xpm</emphasis>, but <emphasis>.pm</emphasis>.
</para>
<para>
If one wants their custom backdrop to be dynamic with palette/theme of NsCDE,
one must edit them to set symbolic names of the colors described above. Examining
existing backdrops is the fastest way to get idea what needs to be done. Apart
from symbolic names, backdrops also have a real color defined to be compatible
with XPM specification, but values of this colors can be arbitrary, since they
are not used if symbolic name on the same line is set. Usually, they are in gray
spectrum.
</para>
<para>
Default backdrops are set from the
<filename class="directory">$NSCDE_DATADIR/defaults/backer</filename> until
user does not redefine/set his own with
<link linkend="NsCDE-BackdropMgr">Backdrop Style Manager</link>. Default
palette is <emphasis>Broica</emphasis> in 8 colors variant.
</para>
<para>
Thematically generated backdrops generated by <link linkend="NsCDE-BackdropMgr">Backdrop Style manager</link>
are installed in user's <filename>$FVWM_USERDIR/backer/DeskN-&lt;backdropname&gt;.pm</filename> and defined
in <filename>$FVWM_USERDIR/Backdrops.fvwmgen</filename> as colorsets of
<emphasis>TiledPixmap</emphasis> type. NsCDE reserved FVWM colorsets numbers for backdrops
are from 31-38 for all eight possible workspaces.
<filename>$FVWM_USERDIR/Backdrops.fvwmgen</filename> file is read by FvwmBacker(1) FVWM module.
It is automatically generated when user makes first change with
<link linkend="NsCDE-BackdropMgr">Backdrop Style Manager</link>.
</para>
<para>
Until then, system wide file <filename>$NSCDE_DATADIR/fvwm/Backdrops.fvwmconf</filename>
applies, which itself reads pre-generated and pre-defined backdrops from the
<filename class="directory">$NSCDE_DATADIR/defaults/backer</filename> directory.
Default color theme is <emphasis>Broica</emphasis>.
</para>
<para>
We can consider backdrops as the source form or template files, and when processed
with color values from the palette, this backdrop's final form is, ready to be set by FvwmBacker(1).
</para>
<para>
When NsCDE is used with FVWM3 and <emphasis>per-monitor</emphasis> or <emphasis>shared</emphasis>
DekstopConfiguration monitor modes, FvwmBacker(1) is not in use, because it cannot treat different
physical (and virtual) monitors separately. Functions driven by the <emphasis>new_desk</emphasis>
FvwmEvent(1) event are called in that case, which will be loaded from the cache directory
<filename class="directory">$FVWM_USERDIR/backer/bgcache</filename> if found, or automatically
generated with the help of ImageMagick's convert(1) tool if they do not exist, and then loaded.
This mechanism automatically calculates screen width, height, X and Y coordinates, desks and backdrops
to produce cjoined backdrops as one big PNG file which is then loaded to show correct background
for desks on different monitors.
</para>
</sect1>

<sect1 id="NsCDE-Configuration-Files">
<title>Configuration files explained</title>
<abstract>
<para>
As pointed above, NsCDE has a number of configuration files.
Approximately 75% of them are the FVWM configurations, where a line
between using FVWM directives for it's core and modular functionality
as a desktop-building material and tool, and merely configuring
aspects for end use are wastly blurred and cannot be really
distinguished and separated in that strict categories. This system of
configurations is arranged in some logical and consistent way. For
example, keyboard shortcuts in Keybindings.fvwmconf, FvwmBacker
configuration in Backer.fvwmconf, (generated) colorsets in
Colorset.fvwmgen etc.
</para>
<para>
All this configurations are included from the Main.fvwmconf.
This is the starting FVWM configuration which sets core options
and safe defaults, and reads the rest of the configuration files
which are included there. It defines StartFunction which starts
all additional modules and calls important things during start
or restart of the Window Manager. System Wide configuration files
are located in $NSCDE_DATADIR/fvwm and $NSCDE_DATADIR/defaults,
while user local hooks or user complete overrides are stored in
<filename class="directory">$FVWM_USERDIR</filename>.
</para>
</abstract>
<para>
This is default list of system-wide configurations:
</para>

<sect2 id="FrontPanel_actions">
<title>FrontPanel.actions</title>
<para>
A non-FVWM file. Lines in this file are default actions and icons for Front Panel.
This file is parsed by the <command>fpexec</command> and <command>fpseticon</command>
shell script tools. All or individual entries from this file can be overridden by
creating <filename>$FVWM_USERDIR/FrontPanel.actions</filename> file. This is a
CSV-like file (comma is a field separator), and it defines buttons of the
Front Panel, their actions and icons.
</para>
<para>
File format is:
<itemizedlist>
<listitem><para>Button Number (Btn1, Btn2, BtnN ...)</para></listitem>
<listitem><para>Icon path (FVWM relative from ImagePath)</para></listitem>
<listitem><para>Mouse Button (3 mouse buttons for 3 different actions if needed)</para></listitem>
<listitem><para>Program executable to check for or <emphasis>NOCHK</emphasis> for check
 avoidance</para></listitem>
<listitem><para>Actions (commands) with options and arguments to the end of the line</para></listitem>
</itemizedlist>
</para>
<para>
If Icon Path field is <varname>__APPLET__</varname> for mouse button 1, then in the check/nocheck
field an applet program may be defined for FvwmButtons based Front Panel to be swallowed instead
of an icon. In this field, direct FvwmButtons(1) syntax must be manually written with this exceptions:
</para>
<itemizedlist>
<listitem><para>Comma (,) must be replaced with a pipe (|)</para></listitem>
<listitem><para>Double quotes (") must be escaped by the two backslashed (\\)</para></listitem>
</itemizedlist>
<para>
If the swallowed applet has it's own action on mouse buttons clicks, then declaration of the
applet must be prefixed with a <varname>ActionIgnoresClientWindow</varname>. In this case,
last filed with the actions can be "Nop" because Front Panel will not accept this clicks
(it may accept them if possible transparent area around applet exists and is clicked). If
the applet is not clickable, a standard FVWM Action or command can be put in the last field
to make a click on the applet useful.
</para>
<para>
Here is the example of the custom swallowed applet. This one was initially created for the
Window Maker window manager:

<programlisting>
<![CDATA[
   Btn10,__APPLET__,M1,
   "ActionIgnoresClientWindow| Swallow (Respawn) \\"WmstickynotesApplet\\" 
   \\"Exec exec wmstickynotes\\"",Nop

   Btn10,,M2,FVWM,Nop

   Btn10,,M3,FVWM,f_FrontPanelPropsMenu 10 APPLET
]]>
</programlisting>
</para>

<para>
Here is the example of the custom swallowed applet which does not accept mouse clicks:

<programlisting>
<![CDATA[
   Btn10,__APPLET__,M1,
   "Swallow (Respawn) \\"MyFavoriteApplet\\" 
   \\"Exec exec mfa -s\\"",Exec exec vlc

   Btn10,,M2,FVWM,Nop

   Btn10,,M3,FVWM,f_FrontPanelPropsMenu 10 VLC
]]>
</programlisting>

</para>

<para>
This example is replacing standard Front Panel Clock with Solaris Globe Icon based
Front Panel clock, using the same pclock program as standard one, but with a
slightly different options:

<programlisting>
<![CDATA[
   Btn1,__APPLET__,M1,"Swallow (Respawn) \\"pclock\\"
   \\"Exec exec $NSCDE_TOOLSDIR/$(uname -s)_$(uname -m)/fpclock
   -H red -S white --hands-width=4
   --hour-hand-length=15 --minute-hand-length=20
   --second-hand-length=22 -w 
   -B $NSCDE_DATADIR/icons/NsCDE/SDtEarth.l.xpm\\",Exec exec firefox

   Btn1,,M2,FVWM,Nop

   Btn1,,M3,FVWM,f_FrontPanelPropsMenu 1 Browser
]]>
</programlisting>

</para>

<para>
Notice that button definition for mouse M1 (first line) is split in 3 lines in this examples,
but in the <filename>FrontPanel.actions</filename> must be written as one line.
</para>

<para>
After editing this file (system-wide or user's) nothing needs to be
reloaded because file is read from the <function>f_FrontPanelAction</function> function
on every click on every icon on the Front Panel. There is no GUI tool for fully managing this
file yet, but currently, "Copy to Main Panel" action from the submenu will edit <filename>FrontPanel.actions</filename>
and put choosen entry there, binding it to some button.
</para>
</sect2>

<sect2 id="AppMenus_conf">
<title>AppMenus.conf</title>
<para>
This file defines which custom menu entries will be appended on the Window Options menu when
this menu is called by titlebar button 1. This is for example used by all known terminal
applications to implement <guimenuitem>Wide Terminal</guimenuitem> menu entry. By default,
<command>Watch Errors</command> and <command>Fvwm Diagnostic Console</command> have appended
appropriate entries for conveniently call each other. Also, some of the known File Managers
has this entry for opening new window of the same type. Entries in this file are the following
comma separated values (syntax):
<itemizedlist>
<listitem><para>X11 Window Class</para></listitem>
<listitem><para>X11 Window Resource</para></listitem>
<listitem><para>Menu item title (and optionally keyboard shortcut after two TAB's)</para></listitem>
<listitem><para>FVWM Exec or function command, module or action to be executed</para></listitem>
</itemizedlist>
</para>
<para>
This file exists as the <filename>$NSCDE_DATADIR/defaults/AppMenus.conf</filename>, but it can be
extended by creating and writing <filename>$FVWM_USERDIR/AppMenus.conf</filename> file.
</para>

</sect2>

<sect2 id="NsCDE-Animate_fvwmconf">
<title>Animate.fvwmconf / Animate.fvwmgen</title>
<para>
FVWM Animate Module configuration. Animate module is started by NsCDE by
default automatically, but with <emphasis>None</emphasis> as a default effect. This can be
reconfigured by the user in private <filename>$FVWM_USERDIR/Animate.fvwmgen</filename> with Window Style Manager,
or in static manual configuration <filename>$[FVWM_USERDIR]Animate.fvwmconf</filename>.
No effect (None) is choosen as default for increased CDE similarity, because CDE doesn't have iconification
animation effects.
</para>
</sect2>

<sect2 id="Backdrops_fvwmgen">
<title>Backdrops.fvwmgen</title>
<para>
This file defines 8 colorsets for all (maximal) 8 desktops as a <emphasis>TiledPixmap</emphasis>
colorset type. In the system configuration, static non-generated configuration (.fvwmconf) defines
pre-generated default backdrops of default <emphasis>Broica</emphasis> color scheme. When user
makes the first change with <link linkend="NsCDE-BackdropMgr">Backdrop Style Manager</link>,
user's private copy of this file is created in <varname>$FVWM_USERDIR</varname>. In NsCDE,
colorsets 31 - 38 are reserved for backdrops (or png, xpm photos).
</para>
</sect2>

<sect2 id="Backer_fvwmconf">
<title>Backer.fvwmconf</title>
<para>
Rarely needed in <varname>$FVWM_USERDIR</varname>. FvwmBacker(1) configuration which defines
8 maximum desks and refers them to 8 colorsets from 31 - 38. Option
<option>RetainPixmap</option> is defined in case user wants to use X compositor such as
compton(1) with NsCDE.
</para>
</sect2>

<sect2 id="Colorset_fvwmgen">
<title>Colorset.fvwmgen</title>
<para>
Definition of all colorsets minus colorsets 31 - 38 which are reserved for the
backdrops. System-wide file has predefined color values for default color scheme (Broica),
while user's file in <varname>$FVWM_USERDIR</varname> is created on first change made with
<link linkend="NsCDE-ColorMgr">Color Style Manager</link>. Apart from FVWM colorsets, this
file exports in environment two variables: <varname>NSCDE_PALETTE</varname> with the name
of the color palette used in generation of the file, and
<varname>NSCDE_PALETTE_NCOLORS</varname> which is either 4 or 8, depending which color
variant has been used in <link linkend="NsCDE-ColorMgr">Color Style Manager</link>.
</para>
</sect2>

<sect2 id="NsCDE_conf">
<title>NsCDE.conf</title>
<para>
This file defines various FVWM and NsCDE defaults. NsCDE.conf can be considered as
the main user's configuration file. System wide configuration are static defaults
which can be loaded by <link linkend="NsCDE-WindowMgr">Window Style Manager</link>
or by erasing user's copy of the file. User's copy of the <filename>NsCDE.conf</filename>
contains all options (minus FvwmAnimate) from
<link linkend="NsCDE-WindowMgr">Window Style Manager's</link> set of options,
but it has some options such as FVWM <emphasis>infostore</emphasis> variables for
default terminal and file manager applications, graphical editor, and
such. Infostore variables <varname>desknum</varname>,
<varname>pagematrixX</varname> and <varname>pagematrixY</varname> are managed by
the Workspace and Pages Manager while <varname>menudclicktm</varname> infostore
variable is managed by the Pointer Style Manager. In <filename>NsCDE.conf</filename>,
defaults for page edges, focus, icons, and such are defined. See <xref linkend="NsCDE-WindowMgr"/>
and fvwm(1) for details. Since this is read by FVWM, user can set in this file local
variables and additional configuration options if needful, which are not covered in
other parts of the configuration. While applications are taking great care with long
regexp lines to parse and write this file, if edited manually, user is advised to keep it
clean: use proper capitalization as it is described in fvwm(1), without line breaks and
if possible, surplus spaces and tabs. Comments are allowed as usual: as lines which
begins with <emphasis>#</emphasis> sign.
</para>
<para>
Some of the important FVWM Infostore variables which can be set in the <filename>NsCDE.conf</filename> are:
<itemizedlist>
<listitem><para>InfoStoreAdd filemgr <varname>file manager of choice</varname></para></listitem>
<listitem><para>InfoStoreAdd xeditor <varname>GUI text editor of choice</varname></para></listitem>
<listitem><para>InfoStoreAdd calculator <varname>GUI calculator of choice</varname></para></listitem>
<listitem><para>InfoStoreAdd taskmgr <varname>Task manager of choice</varname></para></listitem>
<listitem><para>InfoStoreAdd printmgr <varname>Printer manager of choice</varname></para></listitem>
<listitem><para>InfoStoreAdd browser <varname>WWW Browser of choice</varname></para></listitem>
<listitem><para>InfoStoreAdd mailreader <varname>Mail application of choice</varname></para></listitem>
<listitem><para>InfoStoreAdd terminal <varname>terminal</varname> - emulator app of choice by default commented out and figured out by the list of known terminals. It can be set here.</para></listitem>
<listitem><para>InfoStoreAdd sandboxmode 0|1 - reduced NsCDE for embedded Xephyr X jails</para></listitem>
<listitem><para>InfoStoreAdd desklastpage 0|1 - remember last visited page on desk</para></listitem>
<listitem><para>InfoStoreAdd wsmcolored 0|1 - additional menu color around Workspace Manager like in some versions of CDE</para></listitem>
<listitem><para>InfoStoreAdd nscde_use_xscreensaver 0|1</para></listitem>
<listitem><para>InfoStoreAdd nscde_use_stalonetray 0|1</para></listitem>
<listitem><para>InfoStoreAdd nscde_use_dunst 0|1</para></listitem>
<listitem><para>InfoStoreAdd nscde_use_rofi 0|1</para></listitem>
<listitem><para>InfoStoreAdd nscde_use_xsettingsd 0|1</para></listitem>
<listitem><para>InfoStoreAdd wsm.eco 0|1</para></listitem>
<listitem><para>InfoStoreAdd frontpanel.pos.placement <varname>screen c 50-50w -0p ewmhiwa</varname></para></listitem>
<listitem><para>InfoStoreAdd stalonetray.pos.placement <varname>-0 -0 ewmhiwa</varname></para></listitem>
<listitem><para>InfoStoreAdd gkrellm.pos.placement <varname>-0 +0 ewmhiwa</varname></para></listitem>
<listitem><para>InfoStoreAdd polkit.agent <varname>Path of the choosen PolicyKit Agent</varname></para></listitem>
<listitem><para>InfoStoreAdd loc_pg.desk_scale <varname>Zoom factor of the Local Pager</varname></para></listitem>
<listitem><para>InfoStoreAdd glob_pg.desk_scale <varname>Zoom factor of the Global Pager</varname></para></listitem>
<listitem><para>InfoStoreAdd windowlist.fontsize <varname>small | medium | large</varname></para></listitem>
<listitem><para>InfoStoreAdd windowlist.title.fontsize <varname>small | medium | large</varname></para></listitem>
<listitem><para>InfoStoreAdd fvwm3_default_logging <varname>0|1</varname> weather to log FVWM3 messages by default
from the startup</para></listitem>
<listitem><para>InfoStoreAdd xlogcmd <varname>custom-command</varname> if <filename>$HOME/.xsession-errors</filename>
is not in use, for example <varname>"journalctl -u gdm -n 300 -f"</varname></para></listitem>
<listitem><para>InfoStoreAdd rootpagerposition <varname>"screen c 50-50w +10p"</varname> - where to put local pager on page change if enabled</para></listitem>
<listitem><para>InfoStoreAdd desktopconfiguration global|per-monitor|shared - for FVWM3</para></listitem>
</itemizedlist>
Further, common system environment variables are provided already set, or for optional uncommenting
if needed or desirable:
<itemizedlist>
<listitem><para><varname>QT_QPA_PLATFORMTHEME</varname> - set to "qt5ct"</para></listitem>
<listitem><para><varname>HAS_WINDOWNAME 1</varname> - uncomment and set it to 1 if FVWM is patched with additional
FvwmButtons NsCDE patches. On FVWM3, this is default</para></listitem>
<listitem><para><varname>GTK_OVERLAY_SCROLLING 0</varname> - handy to turn off irritating blinking of scrollbar
area in GTK3 applications</para></listitem>
<listitem><para><varname>SetEnv GTK_CSD 0</varname> - if you have misfortune to must use some of the GNOME 3
applications and have gtk3-nocsd installed</para></listitem>
<listitem><para><varname>f_VarAppend : LD_PRELOAD /usr/local/lib/libgtk3-nocsd.so.0</varname> - if you have
misfortune to must use some of the GNOME 3 applications and have gtk3-nocsd installed</para></listitem>
<listitem><para><varname>SetEnv NSCDE_REDRAW_WORKAROUND 1</varname> - Uncomment this if you are having problems
with FvwmScript PopupMenu widgets under compton, compton-ng or picom in the form of not refreshing their part
of the screen.</para></listitem>
</itemizedlist>
</para>
</sect2>

<sect2 id="Event_fvwmconf">
<title>Event.fvwmconf</title>
<para>
FvwmEvent(1) module configuration. In this file a single instance of the
FvwmEvent called <option>MainLoop</option> is defined. It passes ID (Window ID, desk
etc ... depending on context) for window manager actions. <option>Cmd</option> option is
empty: FVWM functions are used for all defined actions. The following events are observed
and reacted by functions Currently:

<itemizedlist>
<listitem><para><option>new_desk</option></para></listitem>
<listitem><para><option>new_page</option></para></listitem>
<listitem><para><option>add_window</option></para></listitem>
<listitem><para><option>destroy_window</option></para></listitem>
<listitem><para><option>focus_change</option></para></listitem>
<listitem><para><option>enter_window</option></para></listitem>
<listitem><para><option>leave_window</option></para></listitem>
<listitem><para><option>configure_window</option></para></listitem>
<listitem><para><option>iconify</option></para></listitem>
<listitem><para><option>deiconify</option></para></listitem>
<listitem><para><option>res_class</option></para></listitem>
<listitem><para><option>map</option></para></listitem>
</itemizedlist>

Event Functions from <filename>Functions.fvwmconf</filename> are triggered on the events above.
This serves Workspace Manager, Page Manager (PGM) and window placement functions in an
important way. If redefined or disabled, things will start to break. It can be extended by
the user to suit the needs in <filename>$NSCDE_USERDIR/Event.fvwmlocal</filename>, but here
also care must be taken, because complex functions, or calling slow and/or resource hungry
commands from that functions can make FVWM (and hence NsCDE) dramatically slow and even unstable.
</para>
</sect2>

<sect2 id="Font-DPIdpi_fvwmgen">
<title>Font-&lt;NSCDE_FONT_DPI&gt;dpi.fvwmgen</title>
<para>
... where "DPI" ($NSCDE_FONT_DPI) is by default hardcoded to 96.
</para>
<para>
This files are regular files in the system-wide configuration, but may be symbolic links to some
system wide or local fontset in <filename class="directory">$FVWM_USERDIR</filename> when generated
by <link linkend="NsCDE-FontMgr">Font Style Manager</link>.
</para>
<para>
Font sizes in this config are defined as infostore variables and used across
FVWM config files, they are provided to FvwmScript programs with
<command>getfont</command> wrapper. Font sizes are in points. While defining
them in pixels (pixelsize=) will be easier, and all this care about DPI will
not be needed, integration with GTK2 and GTK3 in best of my knowledge and
research does not provide a way to define fonts in pixel sizes, so either
font sizes in points or unsure recalculation (again based on DPI) will be
needed while writing gtk settings.
</para>
</sect2>

<sect2 id="Form_fvwmconf">
<title>Form.fvwmconf</title>
<para>
Defaults for fonts, colorsets, cursors etc of FVWM form module. FvwmForm is
reading this. FvwmForm is not used actively by NsCDE anymore, This file and
definitions in it are provided only to enforce colors and fonts in accordance
with the current NsCDE theme if any custom installation decides to use forms
again.
</para>
</sect2>

<sect2 id="FrontPanel_fvwmconf">
<title>FrontPanel.fvwmX.fvwmconf</title>
<para>
Main NsCDE Front Panel configuration file. Here, FvwmButtons is configured under
the alias <option>*FrontPanel</option>. Special care is taken to place most of
configurable parts out of this file, so it doesn't have to be forked into
<varname>$FVWM_USERDIR</varname>, but this option nevertheless exists. Here, all
geometry, buttons, subpanels, default icons, frames and widgets are written and
put in place. This configuration, together with swallowed WSM (Workspace
Manager) is probably the most recognizable part of the setup which provides us
with familiar and desired CDE look - a Front Panel. FvwButtons FrontPanel
configuration is non-trivial, but it is very trustworthy mimicking the original.
Icon actions which user wants to change here can be overridden with
<filename>FrontPanel.actions</filename> file and Subpanels which are also
described here. Swallowed apps and "widgets" are in most part already described
in sections above.
</para>
<para>
In NsCDE 2.0, FrontPanel has double configuration: in two separate configuration
files. One is for fvwm2 (<filename>FrontPanel.fvwm2.fvwmconf</filename>) and the
second for fvwm3 (<filename>FrontPanel.fvwm3.fvwmconf</filename>) a "front" file
<filename>FrontPanel.fvwmconf</filename> contains the code for auto detection of
FVWM (patched fvwm2 will use fvwm3 file if detected).
</para>
</sect2>

<sect2 id="Functions_fvwmconf">
<title>Functions.fvwmconf</title>
<para>
Another important part of the configuration. Almost all FVWM functions are defined
here, except 5-6 of core functions in <filename>Main.fvwmconf</filename> which are
reading the rest of the configuration. They are sorted in logical groups and are
used widely in almost every part of the configuration, and particularly from the
FvwmScript scripts. Main groups of NsCDE FVWM functions are:
</para>
<itemizedlist>
<listitem><para>Core Window Operation Functions</para></listitem>
<listitem><para>Front Panel functions</para></listitem>
<listitem><para>Misc core functions</para></listitem>
<listitem><para>Functions called from FvwmEvent <option>MainLoop</option></para></listitem>
<listitem><para>Functions for generating menus</para></listitem>
<listitem><para>Placeholders for functions aimed for user to override</para></listitem>
<listitem><para>Functions used in NsCDE FvwmScripts</para></listitem>
<listitem><para>Upgrade Functions</para></listitem>
</itemizedlist>
<para>
For a FVWM function description see fvwm(1), in this file there is a plethora of
examples, and for user usage is the most interesting part placeholders for
functions which are here merely for programs to not complain about missing them
and which should be overridden in user's local extension
<filename>$FVWM_USERDIR/Functions.fvwmlocal</filename> - this extension file will
be read by the main configuration immediately after processing
<filename>Functions.fvwmconf</filename>. This functions are:
</para>
<itemizedlist>
<listitem><para>
  <function>f_CheckMail</function>: called by CheckMailApplet on the FrontPanel on click
  and periodically. This is the place where some script can be called
  and with SendToModule to "1 1" (widget 1, routine 1) icon of empty
  mailbox will be changed to the icon of the full mailbox.
</para></listitem>
<listitem><para>
  <function>f_Calendar</function>: called by MonthDayApplet on click. Can be used to call
  external calendar application, to focus Thunderbird with lightning
  extension or whatever user finds useful.
</para></listitem>
<listitem><para>
  <function>f_Mixer</function>: unused currently.
</para></listitem>
<listitem><para>
  <function>f_AddCustomToRootMenu</function>: add custom entries in a convenient point of
  the root menu which is called by the right mouse button on the root
  window.
</para></listitem>
<listitem><para>
  <function>f_UserChangeDesk</function>: called when current active workspace changes
</para></listitem>
<listitem><para>
  <function>f_UserChangePage</function>: called when current active page changes
</para></listitem>
<listitem><para>
  <function>f_UserRestartFunction</function>: hook called when NsCDE restarts
</para></listitem>
<listitem><para>
  <function>f_UserEnterWindow</function>: hook called when window is entered
</para></listitem>
<listitem><para>
  <function>f_UserLeaveWindow</function>: hook called when focus leaves window
</para></listitem>
</itemizedlist>
<para>
Another useful function is conditional execution function <function>f_WarpOrExec</function>.
It takes 3+ arguments. First is the window name or class (or icon, resource) name, second is
the binary to check in <varname>$PATH</varname>>, and 3rd to the rest of the command line is
what to execute with all arguments included. If window with name from arg1 is already
present on <varname>$DISPLAY</varname>, it will not be executed, but pointer will be simply
pointed to that window. If window was iconified, or function called from another workspace
or page, window will be deiconified, and workspace and/or current page changed to one where
existing window is residing.
</para>
<para>
It is pointless and bad idea for this file to be overridden by the local copy of the
<emphasis>conf</emphasis> (fvwmconf, not fvwmlocal) file, because a lot of things
depends on this functions. Regular update of NsCDE software version will almost certain
make setup with missing or incompatible functions.
</para>
</sect2>

<sect2 id="IconMan_fvwmconf">
<title>IconMan.fvwmconf</title>
<para>
If <guilabel>Use Icon Box</guilabel> option is selected in the
<link linkend="NsCDE-WindowMgr">Window Style Manager</link>,
infostore variable <varname>iconbox</varname> will be defined as non-zero, and
FvwmIconMan(1) module will be started on login from the <filename>Main.fvwmconf</filename>.
This file, <filename>IconMan.fvwmconf</filename> contains default configuration of that
module.
</para>
</sect2>

<sect2 id="Ident_fvwmconf">
<title>Ident.fvwmconf</title>
<para>
Module FvwmIdent(1) is called either from a small menu which can be popped up with middle pointer
click on a titlebar, or from the root window version of the <guilabel>Window Options</guilabel>
menu. This is FvwmIdent's configuration file. It simply defines colorset and font for the
FvwmIdent's module window.
</para>
</sect2>

<sect2 id="Init_fvwmconf">
<title>Init.fvwmconf</title>
<para>
Most probable candidate for copying to <varname>$FVWM_USERDIR</varname>. Here are defined
start, quit and restart function (sessionless and session-managed) which are internally
recognized by FVWM during certain important actions. <function>InitFunction</function> or
<function>SessionInitFunction</function> is the place to put all programs and actions user
wants to be executed during NsCDE startup. In system-wide default configuration there are
already conditionally defined some probable applications and there are hints and examples
for user to customize this further.
</para>
</sect2>

<sect2 id="Keybindings_fvwmconf">
<title>Keybindings.fvwmconf</title>
<para>
According to the old CDE documentation, there are couple of key bindings known under CDE,
but that documentation also assumes Motif application bindings and X resource configuration,
which is far from universally applicable in today's world. That said, while GTK and Qt
applicatios have it's own key bindings, NsCDE tries to combine a bit of CDE legacy with
a huge number of new functions, originally not present in CDE. Hence, we have a rich set
of keybindings for almost any action in NsCDE.
</para>
<para>
NsCDE is using 4 modifier keys in single and multi-modifier combinations with other keys
to implement key bindings. This modifiers are:
<itemizedlist>
<listitem><para>Control</para></listitem>
<listitem><para>Shift</para></listitem>
<listitem><para>Meta (often called Super)</para></listitem>
<listitem><para>Alt</para></listitem>
</itemizedlist>
In combinations with escape, function keys, tab, backspace, home, menu, letters, numbers
and other keys, NsCDE builds rich set of keyboard shortcuts also called keybindings which
tries to achieve some golden middle between ergonomics position on the keyboard for often
used ones, and logical grouping for easy memorizing actions.
</para>
<para>
Keybindings can be partially or complitely overriden by the user's writing
<filename>$FVWM_USERDIR/Keybindings.fvwmconf</filename> (override) or
<filename>$FVWM_USERDIR/Keybindings.fvwmlocal</filename> (extend, paritally override).
Key bindings which are described with their <emphasis>Mod+Key</emphasis> items on menus
can be extended or overwritten in <filename>$FVWM_USERDIR/Keymenu.actions</filename>.
</para>
<para>
Notice when there is a reference to the "Menu" key this means also "Compose" on some
keyboards.
</para>
<para>
If some unwanted or clashing keybindings needs to be cleared, for example <keysym>Shift+Tab</keysym>
from the any context, use the following FVWM syntax:
<programlisting>
<![CDATA[
Silent Key Tab A S -
]]>
</programlisting>
</para>
<para>
For explanation what is the context, and what modifier, see FVWM explanation
(copied from original default FVWM config and extended a bit). Namely:
</para>

<itemizedlist>
<listitem><para>
  cursor keys <keysym>up</keysym>, <keysym>down</keysym>,
  <keysym>left</keysym> and <keysym>right</keysym> with ctrl modifier are
    moving viewport from page to page in any context.
</para></listitem>

<listitem><para>
  cursor keys <keysym>up</keysym>, <keysym>down</keysym>, with Alt modifier are cycling
  window focus and raises or lowers them on the current page in all contexts except icon
</para></listitem>

<listitem><para>
  cursor keys <keysym>up</keysym>, <keysym>down</keysym>, <keysym>left</keysym> and
  <keysym>right</keysym>, with <keysym>meta</keysym> (<keysym>mod4</keysym>) are moving viewport by
  4% of the screen. (<keysym>Ctrl</keysym> moves 100%)
</para></listitem>

<listitem><para>
  the same cursor keys as above, but with <keysym>shift</keysym> modifier moves pointer by
  1% of the screen
</para></listitem>

<listitem><para>
  <keysym>Meta+Alt+I</keysym> in any context apart from icon context will move focus and pointer
  to icons on the currect page (if any). Here, Up and Down keys can be used to browse icons.
  In the context of icon itself, this keybinding will choose last non-iconified window and move
  off focus from icons.
</para></listitem>

<listitem><para>
  <keysym>Up/Down</keysym> in the context of a icon focuses first icon above or below of
  the current selected and focused icon. Key Space will bring main icon menu in the
  context of the focused icon.
</para></listitem>

<listitem><para>
<keysym>I</keysym> in the context of the icon deiconifies that icon.
</para></listitem>

<listitem><para>
  <keysym>Menu (Compose)</keysym> key, if pressed twice in a time window of two seconds
  pops up root menu in any context. On keyboards without <keysym>Menu (Compose)</keysym> key,
  combination <keysym>Alt+ISO_Level3_Shift</keysym> does the same thing
</para></listitem>

<listitem><para>
  <keysym>Meta+Menu</keysym> combination pops up root Window Operations Menu
  On keyboards without <keysym>Menu (Compose)</keysym> key, combination
  <keysym>Meta+ISO_Level3_Shift</keysym> does the same thing
</para></listitem>

<listitem><para>
  <keysym>Meta+Alt+Menu</keysym> pressed twice, brings up page menu on the Front Panel
  and Local Pager in the middle of the screen if enabled. On keyboards without
  <keysym>Menu (Compose)</keysym>, combination <keysym>Meta+Alt+U</keysym>
  does the same thing
</para></listitem>

<listitem><para>
  <keysym>Meta+Alt+Home</keysym> will spawn or raise and focus if already active - a Graphical
  Workspace Manager or GWM.
</para></listitem>

<listitem><para>
  <keysym>Meta+Alt+N</keysym> Cycles window focus between all
  windows on the current page, raises them, and moves pointer to them
</para></listitem>

<listitem><para>
  <keysym>Meta+Alt+B</keysym> Same as <keysym>Meta+Alt+N</keysym> but in
  backward direction
</para></listitem>

<listitem><para>
  <keysym>Meta+Shift+N</keysym> Cycles window focus between all windows on
  the current workspace, raises them, and moves pointer to them
</para></listitem>

<listitem><para>
  <keysym>Meta+Shift+B</keysym> Same as <keysym>Meta+Shift+N</keysym> but
  in backward direction
</para></listitem>

<listitem><para>
  <keysym>Meta+Alt+J</keysym> Moves pointer to the focused window
  if pointer is not already there
</para></listitem>

<listitem><para>
  <keysym>Space</keysym> in the icon frame context pops up icon-specific contextual menu
</para></listitem>

<listitem><para>
Key <keysym>Meta+Alt+Insert</keysym> will give a focus to the last opened window
</para></listitem>

<listitem><para>
Key <keysym>Meta+Alt+BackSpace</keysym> will give a focus to the previously focused window
</para></listitem>

<listitem><para>
  <keysym>Shift+BackSpace</keysym> If pressed twice in a time frame of two seconds will call LocalPager in any context.
  This Pager will disappear soon as it looses a pointer focus, or if keybinding is pressed again once, while pager is still visible.
</para></listitem>

<listitem><para>
  <keysym>Shift+Tab</keysym>Calls visual GlobalPager, a stripped down version of GWM (Graphical
Workspace Manager) which shows matrix of pages and workspaces. This keybinding works in any
context, but it must be called twice to avoid accidental invocation. When Global Pager is
visible, calling it second time will replace it's window with full version of standard GWM window
tool until it is not closed with a third invocation of this same keybinding. In stripped down
semi-transient mode, this pager, if not called as full GWM, disappears shortly after losing mouse
focus to free up space on the screen.
</para></listitem>

<listitem><para>
  <keysym>Alt+Tab</keysym> is cycling trough pages of the active page of the current workspace
  from up to down and then right up to down
</para></listitem>

<listitem><para>
  <keysym>Meta+Tab</keysym> is cycling trough the all workspaces (desks)
</para></listitem>

<listitem><para>
  <keysym>Meta+Shift+Tab</keysym> is reverse cycling trough the all workspaces (desks)
</para></listitem>

<listitem><para>
  <keysym>Meta+Alt+L</keysym> activates screensaver, that is, locks the screen
</para></listitem>

<listitem><para>
  <keysym>Meta+Alt+X</keysym> Executes "xrandr --auto"
</para></listitem>

<listitem><para>
  <keysym>Meta+Alt+W</keysym> will call f_CleanRestoreWorkspace function.
  This will iconify and put into invisible group all iconified windows on the active page.
  Repeating this action once again, restores all iconified windows back in place quickly
  and without animation. Windows which were iconified before calling this action or from
  windows started and iconified after this action are not affected by this function. This
  is NsCDE smart version of the "show desktop" functionality. Individual windows from the
  group can be deiconified too, which will sign off this windows from the group.
</para></listitem>

<listitem><para>
  Key <keysym>Meta+Alt+M</keysym>in the context of the window, frame corners, frame
    sides and a title bar pops up Window Options context menu
</para></listitem>

<listitem><para>
  Key <keysym>Meta+Alt+O</keysym> - same as <keysym>Meta+Space</keysym> if called in the
  window context.
</para></listitem>

<listitem><para>
  Key <keysym>Meta+Alt+R</keysym> - Vertically tiles windows of the current page in a grid, making them
  "grow" maximized state (See Alt+F7 and Alt+F8).
</para></listitem>

<listitem><para>
  Key <keysym>Meta+Alt+H</keysym> - Horizontally tiles windows of the current page in a grid, making them
  "grow" maximized state (See Alt+F7 and Alt+F8).
</para></listitem>

<listitem><para>
  <keysym>Meta+Alt+E</keysym> Again executes last selected item from the last used subpanel.
  From the Sun keyboard, this can also be accomplished with <keysym>Meta+Sun Again (Redo)</keysym>.
</para></listitem>

<listitem><para>
  <keysym>Meta+Escape</keysym> Will cycle trough focus-accepting windows on the current page of
  the current desk, avoiding CirculateSkip windows and the FrontPanel.
</para></listitem>

<listitem><para>
  <keysym>Alt+Escape</keysym> Will open WindowList in the middle of the screen for the
 current workspace (desk) if pressed twice, local WindowList will be replaced with
 global WindowList
</para></listitem>

<listitem><para>
  <keysym>XF86PowerOff</keysym> on Sun keyboards (most upper right) calls System Action Dialog with system suspend (S3) option selected.
  For this to work, ACPI action needs to be configured on the system. Otherwise, this will likely initiate direct system shutdown.
</para></listitem>

<listitem><para>
  <keysym>Ctrl+XF86PowerOff</keysym> on Sun keyboards (most upper right) calls System Action Dialog with system shutdown option selected.
  For this to work, ACPI action needs to be configured on the system. Otherwise, this will likely initiate direct system shutdown.
</para></listitem>

<listitem><para>
  <keysym>Alt+XF86PowerOff</keysym> on Sun keyboards (most upper right) calls System Action Dialog with system reboot option selected.
  For this to work, ACPI action needs to be configured on the system. Otherwise, this will likely initiate direct system shutdown.
</para></listitem>

<listitem><para>
  <keysym>Meta+XF86PowerOff</keysym> on Sun keyboards (most upper right) calls System Action Dialog with X Session logout option selected.
  For this to work, ACPI action needs to be configured on the system. Otherwise, this will likely initiate direct system shutdown.
</para></listitem>

<listitem><para>
  <keysym>Help</keysym> key on Sun keyboards if pressed twice in a second, in the context of the root window will
  call PDF viewer (if any) with complete (this) NsCDE documentation.
</para></listitem>

<listitem><para>
  Sun <keysym>Front</keysym> key on Sun keyboards acts as a <keysym>Alt+F6</keysym> - Raise or Lower the window.
</para></listitem>

<listitem><para>
  Sun <keysym>Find</keysym> key on Sun keyboards calls f_Find NsCDE FVWM function which has to be user defined to be usefull.
</para></listitem>

<listitem><para>
  Sun <keysym>Props</keysym> key on Sun keyboards will call Style Manager window when pointer is on the root window.
</para></listitem>

<listitem><para>
  Sun <keysym>Meta+Props</keysym> key on Sun keyboards will call Style Manager window.
</para></listitem>

<listitem><para>
  Sun <keysym>Open</keysym> same as <keysym>Alt+F12</keysym> invokes Exec dialog or Rofi launcher
  if configured with nscde_use_rofi infostore variable in the <filename>$FVWM_USERDIR/NsCDE.conf</filename>
</para></listitem>

<listitem><para>
  <keysym>XF86AudioLowerVolume</keysym> and <keysym>XF86AudioRaiseVolume</keysym> on Sun type 6 or 7 keyboards will lower and raise sound volume by 1 percent, or by 10 percent if combined with Ctrl modifier. This works by default on systems on which pactl(1) PulseAudio tool is installed. On other systems, f_Mixer function has to be redefined. See <filename>$NSCDE_DATADIR/fvwm/Keybindings.fvwmconf</filename> for f_Mixer options and interaction.
</para></listitem>

<listitem><para>
  <keysym>XF86AudioMute</keysym> key on Sun keyboards will mute the sound. Function f_Mixer expects PulseAudio system. See previous item for possible alternatives.
</para></listitem>

<listitem><para>
<keysym>Shift+BackSpace</keysym> if pressed twice in a short time frame will spawn Local Pager under the pointer.
Pressend second time just once, it will dismiss Local Pager
</para></listitem>

<listitem><para>
  Key <keysym>Meta+Space</keysym> in the context of the window, frame corners, frame
  sides, title bar and icon (ovoids root window context!) calls
  Occupy Workspace dialog for window moving between the desks.
  </para>
  <para>
  Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
  for automatic description on menus.
</para></listitem>

<listitem><para>
 Key <keysym>Alt+Space</keysym> in the context of the window, frame corners, frame
    sides, title bar and icon (ovoids root window context!) calls
    Occupy Page dialog for window moving between the desks.
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
  Key <keysym>Meta+Alt+Space</keysym> in the context of the window, frame corners, frame
   sides, title bar and icon (ovoids root window context!) calls
   Occupy Monitor dialog for window moving between the monitors. This key binding is available
   only when multiple monitors are detected by NsCDE and FVWM.
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
  <keysym>Alt+F1</keysym> regenerates and refreshes the window
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
  <keysym>Meta+F1</keysym> Calls xrefresh(1) command to refresh the X11 display
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
  <keysym>Alt+F2</keysym> iconifies (deiconifies if in icon context)
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
  <keysym>Meta+F2</keysym> "shades" or rolls up the window to titlebar only view
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
  <keysym>Alt+F3</keysym> Repositions the window according to saved geometry
  (see <link linkend="NsCDE-GeometryMgr">Geometry Manager</link>), or if there
  is no record for a window in <filename>GeoDB.ini</filename>, places again
  window with FVWM <command>PlaceAgain</command> command
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
  <keysym>Meta+F3</keysym> Centers the window in the middle of the screen where
  mouse pointer currently resides, together with frame
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
  <keysym>Alt+F4</keysym> enters resize mode which can be finished with cursors keys
    and enter
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
<keysym>Meta+F4</keysym> will resize and enlarge any resizable focused window by 25 pixels in all
directions and place it again on page
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
<keysym>Meta+Shift+F4</keysym> will resize and shrink any resizable focused window by 25 pixels in all
directions and place it again on page
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
  <keysym>Alt+F5</keysym> enters move mode which can be finished with cursors keys
    and enter
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
  <keysym>Meta+F5</keysym> In the context of the window and it's frames places that
  window in a full sticky state. That is, it occupies all workspaces and pages.
  Pressing this key combination again, or pressing <keysym>Meta+Alt+F5</keysym> plus
  <keysym>Meta+Shift+F5</keysym> combinations will put window back from sticky state
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
  <keysym>Meta+Alt+F5</keysym> In the context of the window and it's frames places that
  window in a state sticky across workspaces. That is, it occupies all workspaces, but not pages
  Pressing again the same combination toggles this state back
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
  <keysym>Meta+Shift+F5</keysym> In the context of the window and it's frames places that
  window in a state sticky across pages. That is, it occupies all pages, but not workspaces
  Pressing again the same combination toggles this state back
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
  <keysym>Alt+F6</keysym> raises or lowers the window
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
  <keysym>Alt+F7</keysym> maximizes window 100% (whole screen + decorations);
  when pressed again it maximizes to 86% (stretch), third press will put window
  in the grow state (Maximized on page up to the first obstacle), while third press will put
  window into normal state. We can say how window is cycling between maximized, stretched,
  grow and maximized states. This is a cyclic keybinding in a "shrink" direction.
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
  <keysym>Meta+F7</keysym> Works like <keysym>Alt+F7</keysym>, but selects every second
  operation. In practice, from restored state goes to stretched and back, and from grow
  state goes to fully maximized and back.
</para></listitem>

<listitem><para>
  <keysym>Alt+F8</keysym> grows window up to the first obstacle on page,
  when pressed again, it maximizes window ~ 86% - avoids Front Panel; when pressed further,
  it maximizes to 100% (whole screen + decorations); third call to Alt+F8 restores
  window into normal state. We can say how window is cycling between normal, grow,
  stretched and maximized state. This is a cyclic keybinding in a "grow" direction.
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
   <keysym>Meta+F8</keysym> is the same as <keysym>Meta+F7</keysym>. This variant is
   presented on Window Operations menu for actions when going towards bigger maximized
   state, while <keysym>Meta+F7</keysym> is presented for actions which are shrinking
   back.
</para></listitem>

<listitem><para>
  <keysym>Alt+F9</keysym> is empty
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
  <keysym>Meta+F9</keysym> in the context of the known terminal application windows
    scratches the window to some 75%x72% of the screen, which is also a
    menu option in this windows called <emphasis>Wide Terminal</emphasis>
</para></listitem>

<listitem><para>
  <keysym>Alt+F10</keysym> deletes a window (see fvwm(1))
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
  <keysym>Meta+F10</keysym> closes a window
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
  <keysym>Meta+Alt+F10</keysym> forcefully destroys a window
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
  <keysym>Alt+F11</keysym> is empty
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
  <keysym>Meta+F11</keysym> is empty
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
  <keysym>Alt+F12</keysym> invokes Exec dialog or Rofi launcher if configured with nscde_use_rofi infostore
  variable in the <filename>$FVWM_USERDIR/NsCDE.conf</filename>
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
  <keysym>Meta+F12</keysym> invokes default terminal app ($[infostore.terminal])
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
  <keysym>Meta+Alt+G</keysym> Calls Window Geometry Manager dialog which saves geometry
  information for a current window in the GeoDB.ini
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
  <keysym>Meta+Alt+F</keysym> in the context of a window, frame, or corner, puts a current window
  into a real fullscreen mode. Calling this keybinding again, restores a window.
</para></listitem>

<listitem><para>
  <keysym>Meta+Alt+D</keysym>In the context of a window calls FVWM Ident module which presents
  dialog with various X11 and window manager attributes on the screen
</para></listitem>

<listitem><para>
  <keysym>Meta+Shift+Print</keysym> takes a screenshot of the root window with 3 seconds delay.
 Screenshots in PNG format are saved in <filename class="directory">XDG_PICTURES_DIR</filename> or
 <varname>$HOME</varname> if <filename class="directory">XDG_PICTURES_DIR</filename> is not defined.
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
  <keysym>Meta+Control+Print</keysym> pops cross cursor to pick selected screen area for screenshot.
 Screenshots in PNG format are saved in <filename class="directory">XDG_PICTURES_DIR</filename> or
 <varname>$HOME</varname> if <filename class="directory">XDG_PICTURES_DIR</filename> is not defined.
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
  <keysym>Shift+Print</keysym> takes a screenshot of the root window with 3 seconds delay.
 Screenshots in PNG format are saved into clipboard for pasting into compatible X11 applications.
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
  <keysym>Control+Print</keysym> pops cross cursor to pick selected screen area for screenshot.
 Screenshots in PNG format are saved into clipboard for pasting into compatible X11 applications.
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
  <keysym>Shift+Escape</keysym> will do the same as <keysym>Ctrl+Escape,</keysym> but Front Panel is
    after repositioning shaded to bottom border of the screen. Invoking
    this key sequence again will unshade the Front Panel. Middle mouse
    button on the borders of the frame has the same effect
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
  <keysym>Ctrl+Escape</keysym> will raise Front Panel and reposition it to it's default
    place on the screen. If key combination is pressed for the second time, focus and
    pointer focus will be transferred to the Front Panel, enabling <keysym>Meta+[0-9]</keysym>
    keys to function on subpanels and <keysym>Ctrl+Return</keysym> on icons of the Front Panel
    itself.
    </para>
    <para>
    Dynamic: defined in <filename>$NSCDE_DATADIR/defaults/Keymenu.actions</filename>
    for automatic description on menus.
</para></listitem>

<listitem><para>
In the context of the Front Panel, <keysym>Meta+ 1-10</keysym> will pop up subpanels 1 to 10
and warp pointer to it
</para></listitem>

<listitem><para>
In the context of the any subpanel, <keysym>Meta + 1-10</keysym> will pop down this subpanel
and warp pointer to Front Panel
</para></listitem>

<listitem><para>
In the context of the Front Panel and any subpanel, <keysym>Meta+Return</keysym> will activate button
under the pointer and execute FvwmButton action defined in configuration of that button.
</para></listitem>

<listitem><para>
In the context of the Front Panel and any Subpanel, Sun <keysym>Help</keysym> key will display
Front Panel or Subpanels documentation.
</para></listitem>

</itemizedlist>

</sect2>

<sect2 id="Keymenu_actions">
<title>Keymenu.actions</title>
<para>
This file is not FVWM configuration file. It is written manually (with editor), and read by the
<command>$NSCDE_TOOLSDIR/keymenu</command> command which will generate infostore variables with
descriptive keyboard shortcut names which are used in NsCDE menus from
<filename>Menus.fvwmconf</filename> and <filename>Functions.fvwmconf</filename>, and additionaly,
use the whole line after the keyword in the first column with "Silent Key" prefix to dinamically
generate this part of keybindings which are separated from
<filename>Keybindings.fvwmconf</filename> and processed specially because they definition must
automatically match keyboard binding description in various menus.
</para>
<para>
The syntax of this file is simple: first column is the keyword which becomes infostore
variable (km_xrefresh as <varname>$[infostore.km_xrefresh]</varname>), and the rest columns of
every line is FVWM "Key" sintax which is paired with "Silent Key" prefix during initialization
with <function>f_KeyMenu -a</function> from <filename>Main.fvwmconf</filename>.
</para>
<para>
Every line, or dynamic keybinding can be overriden here if (re)defined in user's
<filename>$FVWM_USERDIR/Keymenu.actions</filename>: whole file or just choosen keybindings.
The goal is to get their descriptions (after functions and menus reload) automatically in place
on menus. For example, "F3 A M" configuration for FVWM "Key" will become <keysym>Alt+F3</keysym>
description right of the <guilabel>(De)Shade</guilabel> item on titlebar left button popdown menu.
</para>
<para>
File Keymenu.actions is processed by <command>$NSCDE_TOOLSDIR/keymenu</command> script.
This script generates FVWM infostore variables used in menus, and executes FVWM "Key" commands
producing dynamic keybindings which are described in menus.
</para>
<para>
For a list of keybindings that are "dynamic", that is, not defined in
<filename>Keybindings.fvwmconf</filename>, but in <filename>Keymenu.actions</filename>, see
notices in section about <link linkend="Keybindings_fvwmconf">Keybindings.fvwmconf</link>.
</para>

</sect2>

<sect2 id="Main_fvwmconf">
<title>Main.fvwmconf</title>
<para>
  Core configuration. This file is read as first initialization upon starting FVWM Window Manager.
  In fact, FVWM is invoked with <option>-f /path/to/Main.fvwmconf</option> to read it instead of
  default FVWM system configuration or user's <filename>~/.fvwm/config</filename>.
  This invocation and configuration in <filename>Main.fvwmconf</filename>
  changes everything: it avoids <filename class="directory">~/.fvwm</filename> if user has a plain (normal)
  FVWM setup, defines and redefines FVWM internal variables and sets
  <varname>NSCDE_ROOT</varname>, configures some core FVWM options (like <option>DefaultIcon</option>),
  defines main FVWM <command>Read</command> command wrapper <function>f_ReadCfg</function>,
  sets desktop names, reads <filename>NsCDE.conf</filename> depending if user has it, or system-wide one,
  defines <function>StartFunction</function>, <option>DesktopSize</option>, and
  then reads most of the files described in this documents, composing NsCDE FVWM configuration.
  Care must be taken NOT to read this file with <function>f_ReadCfg</function>, because it
  will end up in the endless CPU hogging loop because <function>f_ReadCfg</function> will be
  destroyed and recreated during it's own execution. This file should never be overridden
  in <varname>$FVWM_USERDIR</varname>. It is the init(8) of the NsCDE system.
</para>
</sect2>

<sect2 id="Menus_fvwmconf">
<title>Menus.fvwmconf</title>
<para>
In NsCDE, there is a bunch of the menus. Root menus, contextual menus,
and even menus called or dinamically generated from the FvwmScript(1)
scripts.
</para>

<itemizedlist>
<listitem><para>
  <guimenuitem>MenuFvwmRoot</guimenuitem> built-in root menu of FVWM. As in CDE, menu of such
    type, it is called with a right click on the root window.
</para></listitem>

<listitem><para>
  <guimenuitem>m_Applications</guimenuitem> - main and dynamically generated menu with a FVWM python
    script <command>fvwm-menu-desktop</command> (contains flat list of apps and icons for Front
    Panel's subpanels). It reads <filename>/etc/xdg/menus/&lt;desk&gt;-applications.menu</filename>
</para></listitem>

<listitem><para>
  <guimenuitem>m_QuickMenu</guimenuitem> beneath m_Applications. Empty by default. Intended to be
    destroyed and recreated by the user (<filename>Menus.fvwmlocal</filename>) with own
    favorites.
</para></listitem>

<listitem><para>
  <guimenuitem>m_NsCDEHelpMenu</guimenuitem> beneath Quick Menu. Contains links to this documentation
  in PDF and HTML forms.
</para></listitem>

<listitem><para>
  <guimenuitem>m_NsCDEMenu</guimenuitem> on the top of generated Applications menu.
  Contains entries to various the NsCDE internal tools.
  in PDF and HTML forms.
</para></listitem>

<listitem><para>
  <guimenuitem>m_MoveToPage</guimenuitem>: invoked from the 1st titlebar button. Moves window to
    the specified page on desk
</para></listitem>

<listitem><para>
  <guimenuitem>m_MoveToWorkspace</guimenuitem>: as
  <guimenuitem>m_MoveToPage</guimenuitem>, but moves across desks. Invoked
    with middle pointer on the 1st titlebar button
</para></listitem>

<listitem><para>
  <guimenuitem>m_ControlFrontPanelMenu</guimenuitem>: Front Panel specific functions. Invoked
    from the left top control panel menu button on right pointer click
</para></listitem>

<listitem><para>
  <guimenuitem>m_DeiconifyOnPage</guimenuitem>: submenu of the main icon menu invoked with the
    1st pointer click on desktop icon, deiconify window on another page
</para></listitem>

<listitem><para>
  <guimenuitem>m_FrontPanelWinMenu</guimenuitem>: Front Panel flavor of the
  <emphasis>Window Operations</emphasis>
    menu. Invoked from the top left menu button of the Front Panel
</para></listitem>

<listitem><para>
  <guimenuitem>m_IconM2</guimenuitem>: calls small menu with FvwmIdent, xwininfo and xprop if
    icon is clicked with a middle pointer button
</para></listitem>

<listitem><para>
  <guimenuitem>m_IconOps</guimenuitem>: main icon menu invoked with a click on the icon. Contains
    Icon flavor of the "Window Operations" menu, submenus (see above)
    and deiconify action
</para></listitem>

<listitem><para>
  <guimenuitem>m_SubpanelWindowOps</guimenuitem>: a Subpanel flavor of the Window Operations
    menu. Invoked from the Subpanel's titlebar left (and only) button
    contains also contextual actions <guilabel>Refresh Subpanel</guilabel> and
    <guilabel>Subpanel Settings</guilabel>
</para></listitem>

<listitem><para>
  <guimenuitem>m_TitleBarM2</guimenuitem>: Middle pointer click on titlebar. Invokes a small
    menu which gives FvwmIdent, xwininfo, xprop, and two to four types of screenshot of the window.
</para></listitem>

<listitem><para>
  <guimenuitem>m_WindowOpsStandard</guimenuitem>: main menu of <emphasis>Window Operations</emphasis>
    invoked with a mouse
    click on left titlebar button. It has extended (<guimenuitem>More ...</guimenuitem>) and
    reduced (<guimenuitem>Less ...</guimenuitem>) version.
</para></listitem>

<listitem><para>
  <guimenuitem>m_WindowOpsExtended</guimenuitem>: changes <guimenuitem>m_WindowOpsStandard</guimenuitem>
    from default reduced, to extended view (<guimenuitem>More ...</guimenuitem> option on
    Window Operation menu)
</para></listitem>

<listitem><para>
<guimenuitem>m_RootMenu</guimenuitem>: Small root menu with options to call
Invoked with a click on the root window. It has menu items for invoking
workspace-local window list, global window list, local pager, global pager, Window Options
menu, and to refresh all windows on the screen.
</para></listitem>

<listitem><para>
  <guimenuitem>m_WindowOpsRootWin</guimenuitem>: Standalone root window version of the Window
    Operations menu intended for a general and tricky circumstances. It is invoked from the
    m_RootMenu, and keybindings <keysym>Ctrl+Meta+Space</keysym> and <keysym>Meta+Menu</keysym>.
</para></listitem>

</itemizedlist>

</sect2>

<sect2 id="Mousebindings_fvwmconf">
<title>Mousebindings.fvwmconf</title>
<para>
 File <filename>Mousebindings.fvwmconf</filename> is done in similar manner as the
  <filename>Keybindings.fvwmconf</filename>. Can be overridden (.fvwmconf) or
  extended (.fvwmlocal) just like (almost) any NsCDE conf file.
  See fvwm(1) for "Mouse" commands. Here commands invoked with pointer
  are defined. As it is the case with key bindings, mouse actions are too far more in
  NsCDE than in original CDE. The syntax is described at the top of the file.
</para>
<para>
  Actions are:
</para>

<itemizedlist>

<listitem><para>
  Titlebar 1st (left) button left click: invokes Window Operations
    menu, double click closes (Delete) a window
</para></listitem>

<listitem><para>
  Titlebar 1st (left) button middle click: Shortcut for calling Occupy
  dialog with Go with the window selected by default.
</para></listitem>

<listitem><para>
  Titlebar 1st (left) button left click: invokes extended or full
  version of the Window Operations menu, double click closes (Delete)
  a window
</para></listitem>

<listitem><para>
  Titlebar 2nd (right) button left click: Iconify Window
</para></listitem>

<listitem><para>
  Titlebar 2nd (right) button middle click: No Operation
</para></listitem>

<listitem><para>
  Titlebar 2nd (right) button right click: Shade (Roll up/down) Window
</para></listitem>

<listitem><para>
  Titlebar 3rd (rightmost) button left click: (Un)Maximize Window 86% or up to
  the Front Panel on the bottom of the screen. Double click (un)maximizes 100%,
  covering Front Panel and it's EWMH panel area
</para></listitem>

<listitem><para>
  Titlebar 3rd (rightmost) button middle click: (Un)Maximizes 86% and
    makes window sticky or unsticks it depending on window's initial
    state
</para></listitem>

<listitem><para>
  Titlebar 3rd (rightmost) button right click: (Un)Maximizes 86% and
    makes window raise or lower depending on window's initial state
</para></listitem>

<listitem><para>
  Titlebar left click: Moves window on move, raises/lowers on click
</para></listitem>

<listitem><para>
  Titlebar middle click: pops up menu with functions to take a
    screenshot of the window, identify with info (FvwmIdent), xprop(1),
    and xwininfo(1)
</para></listitem>

<listitem><para>
  Titlebar right mouse button quickly raises or lowers a window
</para></listitem>

<listitem><para>
  Pointer actions 4 and 5 (mouse wheel) are shading and unshading
    (rollup, rolldown) a window
</para></listitem>

<listitem><para>
  Left pointer click on border or corner raises or lowers a window
    while move action will interactively resize the window
</para></listitem>

<listitem><para>
  Middle pointer click on border or corner will only do lower/raise
    action, without resize on pointer movement
</para></listitem>

<listitem><para>
  Right pointer click on border or corner also does lower/raise
    action, but on pointer movement moves the window
</para></listitem>

<listitem><para>
  Left pointer click in combination with control on border or corner
    calls a root window version of the Window Operations menu - this
    rare and border functionality is aimed for difficult situations
    where there is no other option easily available
</para></listitem>

<listitem><para>
  Middle pointer click in combination with control on border or corner
    refreshes the window
</para></listitem>

<listitem><para>
  Right pointer click in combination with control on border or corner
    calls root applications menu (<guimenuitem>MenuFvwmRoot</guimenuitem>) - this rare and border
    functionality is aimed for difficult situations where there is no
    other option easily available
</para></listitem>

<listitem><para>
  Left pointer click on icon calls <guimenuitem>m_IconOps</guimenuitem> menu, while double click
    action deiconifies a window
</para></listitem>

<listitem><para>
  Middle pointer click on icon calls <guimenuitem>m_IconM2</guimenuitem> menu
</para></listitem>

<listitem><para>
  Right pointer click on icon directly deiconifies a window
</para></listitem>

<listitem><para>
  Left click on the root window calls <guimenuitem>Root Menu</guimenuitem> whith
  handy shortcuts for calling visual pagers and window lists. Submenu "Window Operations"
  will show Window Options actions.
</para></listitem>

<listitem><para>
  Left double click on the root window calls <guimenuitem>Window Operations</guimenuitem>.
</para></listitem>

<listitem><para>
  Middle click calls FVWM <function>WindowList</function> super-menu see fvwm(1) for
    <option>WindowList</option>
</para></listitem>

<listitem><para>
  Right click calls main root menu <guimenuitem>MenuFvwmRoot</guimenuitem>
</para></listitem>

<listitem><para>
  Pointer actions 4 and 5 (mouse wheel) will scroll between current up and down pages
  of the current workspace by 2% if pointer is in the context of the root window
</para></listitem>

<listitem><para>
  <keysym>Control+</keysym> left mouse click will call f_CleanRestoreWorkspace function.
  This will iconify and put into invisible group all iconified windows on the active page.
  Repeating this action once again, restores all iconified windows back in place quickly
  and without animation. Windows which were iconified before calling this action or from
  windows started and iconified after this action are not affected by this function. This
  is NsCDE smart version of the "show desktop" functionality.
</para></listitem>

<listitem><para>
  <keysym>Control+</keysym> middle mouse click will call extended version of the
    WindowList with additional window info such as page number and
    window geometry.
</para></listitem>

<listitem><para>
  Left mouse button on border of the shaded Front Panel context will
    de-shade and reposition Front Panel
</para></listitem>

<listitem><para>
  Right mouse button on border of Front Panel will shade or de-shade
    Front Panel
</para></listitem>

</itemizedlist>

</sect2>

<sect2 id="WspLocPager_fvwmconf">
<title>WspLocPager.fvwmconf</title>
<para>
Configures FvwmPager(1) type which is called as <guilabel>Local Pager</guilabel>
from the right-click popup menu on Workspace Manager buttons. This pager is
transient and will disappear after being used with a pointer click.
</para>
</sect2>

<sect2 id="LocalPager_fvwmconf">
<title>LocalPager.fvwmconf</title>
<para>
Pager which is showing only a current workspace. It's windows and pages on thish windows
reside. This pager is meant to be primary of informational nature. Infostore variable
<varname>pageraisefp</varname> in <filename>NsCDE.conf</filename> is by default 0.
If enabled (1), when active page or workspace changes, visual FvwmPager(1) will be shown
in the center of the screen near the top of it by default. On <keysym>Ctrl+Compose</keysym>
(<keysym>Ctrl+Menu</keysym>) and/or <keysym>Shift+ISO_Level3_Shift</keysym> (Right Alt),
pager will move to the position of the pointer, it will eventually disappear from the
screen after 1 second, 3 seconds, 5 seconds, 8 seconds, or 10 seconds if it looses the
focus, or it can be dismissed by pressing the same key combination once more while
pointer is above pager. Local pager can also be called with
<keysym>Shift+Backspace</keysym> keys. Local pager's initial appearing position on the
active screen can be controled with <varname>rootpagerposition</varname> FVWM
InfoStore variable in the <filename>$FVWM_USERDIR/NsCDE.conf</filename>. There, a timeout
can also be set with <varname>rootpagertimeout</varname> variable; rootpagertimeout is
in milliseconds.
</para>
</sect2>

<sect2 id="Script_fvwmconf">
<title>Script.fvwmconf</title>
<para>
Some bare defaults for all FvwmScript(1) Module based applications and widgets: script Path,
default font and colorset. All this values are usually redefined outside of this file, so
in FvwmScript source body, nothing really should be changed here.
</para>
</sect2>

<sect2 id="NsCDE-WSM_conf">
<title>WSM.conf</title>
<para>
Non-FVWM config file. Here, the names of the NsCDE Workspaces are read and written
by the NsCDE and can be changed manually or with the Workspaces and Pages Style Manager.
Options for Graphical Workspace Manager (GWM) are also saved here. Names of the workspace
pages (for the menus) can be redefined here manually (there is no tool for this one).
</para>
<para>
WSM file is not read from the system's central location. It is installed there only
for a reference. <filename>WSM.conf</filename> will be created in
<filename class="directory">$FVWM_USERDIR</filename> when workspaces are renamed, or
GWM settings are changed. Overrides for names of the pages are user's care if there
is really need to name pages differently from default scheme.
</para>
</sect2>

<sect2 id="Style_fvwmconf">
<title>Style.fvwmconf</title>
<para>
Main decoration configuration. <option>Style</option> '*' is applied globally. This is
the main source of CDE and Motif-like look and behavior. If user wants to preserve
CDE-like look and feel, this options should not be changed too much. Otherwise, a
plain FVWM configuration can be done which can drastically differ from NsCDE, since
FVWM has much more options and variants for a huge number of tastes.
<option>Style</option> '*' options are partially overridden or extended in
<filename>NsCDE.conf</filename> which can be generated with
<link linkend="NsCDE-WindowMgr">Window Style Manager</link> or simply copied from
<filename class="directory">$NSCDE_DATADIR/fvwm</filename> to
<varname>$FVWM_USERDIR</varname> and edited to suit.
</para>
<para>
Options in Style.fvwmconf are grouped in 7 categories:
</para>
<itemizedlist>
<listitem><para>
   Default, or '*' styles
</para></listitem>
<listitem><para>
   Fvwm modules and FvwmScript(1) script specific
</para></listitem>
<listitem><para>
   Some basic sane defaults for common applications
</para></listitem>
<listitem><para>
   Menu styles (not a style commands, but styles anyway)
</para></listitem>
<listitem><para>
   Cursor styles (not a style commands, but styles anyway)
</para></listitem>
<listitem><para>
   Decors "SubpanelsDecor" and "FpDecor" which are slightly modifiying Front Panel and it's
   Subpanels.
</para></listitem>
<listitem><para>
   GeometryWindow directives (FVWM3 only)
</para></listitem>
</itemizedlist>
<para>
This styles can be extended and/or overridden by the user's own
<filename>$FVWM_USERDIR/Style.fvwmlocal</filename>, and core style
for all windows <emphasis>(*)</emphasis> can be overriden by creating
<filename>$FVWM_USERDIR/Style.override</filename> which extends or
changes directives for core style from <filename>$NSCDE_DATADIR/fvwm/Style.fvwmconf</filename>
prior to applying particular application styles and prior to reading
<filename>$FVWM_USERDIR/Style.fvwmlocal</filename>.
</para>
<para>
Colorsets and fonts used in this configuration are generated and stored
in <filename>Font-$DPIdpi.fvwmgen</filename> and <filename>Colorset.fvwmgen</filename>.
</para>
<para>
Man page fvwm(1) has a rich and extended description of what can be done
with a huge set of <option>Style</option> commands.
</para>
</sect2>

<sect2 id="Subpanels_actions">
<title>Subpanels.actions</title>
<para>
This file is not FVWM configuration file. It is written by the 
<link linkend="NsCDE-SubpanelMgr">Subpanels Manager</link>, 
<link linkend="NsCDE-SubpanelSettings">Subpanel Settings</link>, or
manually with editor, and read by the <command>$NSCDE_TOOLSDIR/generate_subpanels</command>
command which will generate
<link linkend="Subpanels_fvwmconf"><filename>Subpanels.fvwmX.fvwmconf</filename></link> file
in user's <varname>$FVWM_USERDIR</varname> directory, where "fvwmX" is either fvwm2 or fvwm3
depending under which FVWM NsCDE is running. The syntax of this file is simple. It is CSV-like
file where values are delimited with a comma ",". Every line belongs to one of the ten
subpanels. Comma and "'" characters cannot be part of the field values. This values are:
</para>

<itemizedlist>
<listitem><para>
   S&lt;X&gt;: where &lt;X&gt; is a number from 1 to 10 indicates which subpanel's line is this
</para></listitem>
<listitem><para>
   NAME, WIDTH, ENABLED, ENTRY: second line indicates subpanel's display name, subpanel's width
   regarding font and long application names on the menu, state of enablement, and entries defined
   for this subpanel. ENTRY lines can be multiple (as much as screen resolution allows), other values
   must be unique for every subpanel.
</para></listitem>
<listitem><para>
   For NAME, WIDTH and ENABLED, there is only a third parameter: for a NAME the name of the subpanel,
   WIDTH is an integer (reasonable values: 120 - 260), and enabled is boolean 1 or 0.
</para></listitem>
<listitem><para>
   For ENTRY lines, there are fields application title, check type, icon path and name,
   and command with arguments fields that must be defined. Title is name of the entry. For example
   "Firefox" or "Workstation Info". Check type can be one of "FVWM-M" for FVWM module, "FVWM-F" for
   FVWM function, "OTHER" (currently unused), CHECK:&lt;appname&gt; where &lt;appname&gt; is the
   command which should be checked for existance instead of the first string of the command field,
   empty space (nothing between commas: <emphasis>,,</emphasis>), and NOCHK
   which indicates that no check for
   a command existance should be done in <filename>Subpanels.fvwmconf</filename>.
   Most of the entries will default to <emphasis>empty</emphasis> which will prepend
   <option>Test (x &lt;appname&gt;)</option> to the entry specification in the resulting
   FvwmButtons(8) config.
   Icon is full path of the icon file (32x32) which should belong
   to the application. and the rest of the line is application's calling command, possibly
   with options and arguments.
</para></listitem>
</itemizedlist>

</sect2>

<sect2 id="Subpanels_fvwmconf">
<title>Subpanels.fvwmX.fvwmconf</title>
<para>
The files <filename>Subpanels.fvwm2.fvwmconf</filename> and <filename>Subpanels.fvwm3.fvwmconf</filename>
are generated by the <command>$NSCDE_TOOLSDIR/generate_subpanels</command>. It's configuration is static
in the system directory after NsCDE installation, but customizable and easly generated in the user's
<varname>$FVWM_USERDIR</varname> where it is then called
<filename>$FVWM_USERDIR/Subpanels.fvwmX.fvwmgen</filename>, where "fvwmX" is either FVWM2 or FVWM3,
depending on which FVWM is used by the NsCDE. It contains FvwmButtons(8) definitions of all 20 possible
subpanels which can be popped up from the <link linkend="NsCDE-FrontPanel">Front Panel</link>. There are 3
ways to regenerate this file: <link linkend="NsCDE-SubpanelMgr">Subpanels Manager</link> tool called from
the <emphasis>Install Icon</emphasis>, <link linkend="NsCDE-SubpanelSettings">Subpanel Settings</link> tool
called from the titlebar popdown menu on every subpanel as <emphasis>Subpanel Settings</emphasis> or
manually by calling <command>$NSCDE_TOOLSDIR/generate_subpanels</command> which will read user's or
system <link linkend="Subpanels_actions"><filename>Subpanels.actions</filename></link> for every subpanel
and if it exists, user's one; take this one while generating Subpanels.fvwmX.fvwmconf.
In system default, subpanels 2, 5, 6 and 8 are disabled by default, but can be activated with a very quick
tripple middle pointer click on the empty launcher without up arrow: a
<link linkend="NsCDE-SubpanelSettings">Subpanel Settings</link> application will appear on the screen
which has a checkbox <guilabel>"This Subpanel is Enabled"</guilabel> which will be checked out by
for disabled subpanels by default, and can be checked in, to apply <guibutton>OK</guibutton> will enable
subpanel with initial system defaults for name, width and application entries.
</para>

</sect2>

</sect1>

<sect1 id="NsCDE-System-User-Tree-Layout">
<title>System and User NsCDE Tree Layout</title>
<para>
This section describes in detail what is stored where in NsCDE system-wide
installation hierarchy, and user's home directory <filename>.NsCDE</filename>
or <varname>$FVWM_USERDIR</varname>.
</para>

<sect2 id="NsCDE-System-Tree-Layout">
<title>System Tree Layout</title>
<para>
From the major version 2, NsCDE is following Filesystem Hierarchy Standard of Linux
and other surviving Unix and BSD systems. The installation procedure will put main
calling wrapper <emphasis>nscde</emphasis> and <command>nscde_fvwmclnt</command> into
PREFIX/bin, NsCDE helper programs and tools into PREFIX/libexec/NsCDE, python api code
and FvwmScript scripts, fpclock and colorpicker binaries into PREFIX/lib/NsCDE, while
rest of the data goes into PREFIX/share/NsCDE, except icon theme, .desktop files, which
are following XDG specification and are installed in /usr/share/icons/NsCDE,
/usr/share/applications, and so on. NsCDE app menu will be positioned in
PREFIX/etc/xdg/menus (or /etc/xdg/menus if installed from package), while X session
file read by the graphical display manager usually goes into /usr/share/xsessions,
regardless of the PREFIX, or /usr/local/share/xsessions on BSD-based systems.
</para>
<para>
Variable meanings for further paths:
<itemizedlist>

<listitem>
<para>
<filename class="directory">$NSCDE_ROOT</filename>
</para>
<para>
Main top directory of NsCDE installation; usually /usr, /usr/local, /opt/local,
/opt/sfw, /usr/pkg etc ... most parts of the installation are under this hierarcy
referenced also as "$PREFIX" in documentation
</para>
</listitem>

<listitem>
<para>
<filename class="directory">$NSCDE_DATADIR</filename>
</para>
<para>
This points to $PREFIX/share/NsCDE
</para>
</listitem>

<listitem>
<para>
<filename class="directory">$NSCDE_TOOLSDIR</filename>
</para>
<para>
This is sometimes $PREFIX/libexec/NsCDE and some systems, which doesn't like libexec
will put this as $PREFIX/lib/NsCDE, $PREFIX/lib64/NsCDE and so on
</para>
</listitem>

<listitem>
<para>
<filename class="directory">$NSCDE_LIBDIR</filename>
</para>
<para>
This is usually $PREFIX/lib/NsCDE with variations as $PREFIX/lib64/NsCDE, $PREFIX/lib/x86_64-linux-gnu/NsCDE
and so on.
</para>
</listitem>

</itemizedlist>
</para>

<para>
This are the main directory components of the NsCDE with description what is what,
and what is where:
</para>

<itemizedlist>

<listitem><para>
<filename class="directory">bin</filename>
</para>
<para>
  nscde start wrapper called from <filename>/usr/share/xsessions/nscde.desktop</filename>
  nscde_fvwmclnt caller of the right (FVWM2 or FVWM3) FvwmCommand.
</para></listitem>

<listitem><para>
   <filename class="directory">$NSCDE_DATADIR/fvwm</filename>
</para>
<para>
  NsCDE private FVWM settings directory. All .fvwmconf files described in documentation
  are here. They are read from <filename>Main.fvwmconf</filename> which is called
  from PREFIX/bin/nscde by fvwm binary with <option>-f</option> directly.
</para></listitem>

<listitem><para>
   <filename class="directory">$NSCDE_DATADIR/config_templates/progbits</filename>
</para>
<para>
  Template X pixmap files used by <link linkend="NsCDE-ColorMgr">Color Style Manager</link> for producing
  user's copy in the <filename class="directory">$FVWM_USERDIR/icons/NsCDE/</filename>
  this pixmaps are invalid as pictures in their source form since they contain internal
  macros for replacement with real colors. System starting theme is using their copied
  in <filename class="directory">$NSCDE_DATADIR/icons/NsCDE</filename>.
</para></listitem>

<listitem><para>
  <filename class="directory">$NSCDE_LIBDIR/python</filename>
</para>
<para>
  Python libraries used by <command>themegen</command>: part of the integration suite
  for GTK and Qt theme.
</para></listitem>

<listitem><para>
  <filename class="directory">$NSCDE_TOOLSDIR</filename>
</para>
<para>
  The rest of the scripts (korn shell and python) are located here. In
  normal circumstances this scripts should not be run directly, but
  they are used by numerous NsCDE FvwmScript apps and FVWM functions
  as helpers and background program workers.
</para></listitem>

<listitem><para>
  <filename class="directory">$NSCDE_DATADIR/backdrops</filename>
</para>
<para>
  Backdrop files. CDE and new, additional. Source for generation of active
  user's backdrop depending on theme, that is color scheme. They have
  <filename>.pm</filename> extension instead of <filename>.xpm</filename>.
  Bitmap files <filename>.bm</filename> (<filename>.xbm</filename>) are not
  supported by style managers and hence some of CDE's original
  backdrops of that type are in NsCDE converted to X pixmaps.
</para></listitem>

<listitem><para>
  <filename class="directory">$NSCDE_DATADIR/icons/cursors</filename>
</para>
<para>
  Custom cursors which are missing on plain X server installations but
  can be found in CDE. Referenced in <filename>$NSCDE_DATADIR/fvwm/Style.fvwmconf</filename>.
</para></listitem>

<listitem><para>
  <filename class="directory">$NSCDE_DATADIR/defaults/backer</filename>
</para>
<para>
  Default generated backdrops for first start (Broica, 8 colors)
  Referenced in system's <filename>$NSCDE_DATADIR/fvwm/Backdrops.fvwmconf</filename>.
</para></listitem>

<listitem><para>
  <filename class="directory">$NSCDE_DATADIR/defaults/pages</filename>
</para>
<para>
  Default page names for every possible combination supported by NsCDE
</para></listitem>

<listitem><para>
  <filename class="directory">$PREFIX/share/doc/nscde</filename>
</para>
<para>
  Documentation
</para></listitem>

<listitem><para>
  <filename class="directory">$PREFIX/share/doc/nscde/examples</filename>
</para>
<para>
Examples for X display manager and DE integrations, <command>sudo</command> for <command>shutdown
</command>  <command>reboot</command>, <command>pm-suspend</command> or <command>pm-hibernate</command>,
<command>Gkrellm</command> NsCDE skin.
</para></listitem>

<listitem><para>
  <filename class="directory">$NSCDE_DATADIR/fontsets</filename>
</para>
<para>
  Default font sets used by the <link linkend="NsCDE-FontMgr">Font Style Manager</link>
</para></listitem>

<listitem><para>
  <filename class="directory">$NSCDE_DATADIR/icons/NsCDE</filename>
</para>
<para>
  CDE and custom NsCDE icons of which many are part of FvwmScript programs and
  applets
</para></listitem>

<listitem><para>
  <filename class="directory">$NSCDE_DATADIR/palettes</filename>
</para>
<para>
    CDE palettes plus a bunch of new custom palettes. Used by <link linkend="NsCDE-ColorMgr">Color
    Style Manager</link> and <link linkend="NsCDE-BackdropMgr">Backdrop Style Manager</link>, as well as
    <command>$NSCDE_TOOLSDIR/themegen</command>, <command>$NSCDE_TOOLSDIR/backdropmgr</command>,
    <command>$NSCDE_TOOLSDIR/colormgr</command>, <command>$NSCDE_TOOLSDIR/palette_colorgen</command>
</para></listitem>

<listitem><para>
  <filename class="directory">$NSCDE_DATADIR/photos</filename>
</para>
<para>
    A couple of nice free photos collected and resized for various
    screen resolutions. Can be used instead of backdrops (selectable
    from <link linkend="NsCDE-BackdropMgr">Backdrop Style Manager</link>) or
    in <filename>$HOME/.xscreensaver</filename> for some
    screensavers which are loading photos.
</para></listitem>

<listitem><para>
  <filename class="directory">$NSCDE_DATADIR/config_templates/app-defaults</filename>
</para>
<para>
    X resources for a particular X applications (like <command>XTerm</command>) which
    are processed by the <link linkend="NsCDE-ColorMgr">Color Style Manager</link> for
    user to be put into <filename class="directory">$FVWM_USERDIR/app-defaults</filename> (if enabled).
    Referenced by the usual <varname>XAPPLRESDIR</varname> environment variable.
</para></listitem>

<listitem><para>
  <filename class="directory">$NSCDE_DATADIR/integration/gtk2_gtk3_qt</filename>
</para>
<para>
    Part of the CDE theme which are used by <command>$NSCDE_TOOLSDIR/themegen</command> and
    the rest of $NSCDE_LIBDIRY/python/*.py to generate
    <filename class="directory">$HOME/.themes/NsCDE</filename> with
    a selected palette and color depth.
</para>
<para>
  $NSCDE_DATADIR/config_templates also contains <filename>Xdefaults</filename> and some include files
    for it, as well as configuration for <command>stalonetray</command> which is installed
    on initial setup, and <filename>BGdefault</filename>, which is a monochrome pixmap
    loaded as bare default early on start, before FvwmBacker(1) sets up
    backdrops on each user's workspace. From there, on initial setup, default
    <filename>Xsettingsd.conf</filename>, <filename>Stalonetray.conf</filename>,
    <filename>Dunst.conf</filename>, 
    <filename>colormgr.local</filename> and possibly other files are installed into
    user's <filename class="directory">$FVWM_USERDIR</filename>.
</para></listitem>


<listitem><para>
  <filename class="directory">$NSCDE_DATADIR/integration/firefox</filename>
</para>
<para>
Mozilla Firefox CSS which integrates Firefox Web Browser with the current NsCDE theme.
</para></listitem>

<listitem><para>
  <filename class="directory">$NSCDE_DATADIR/integration/thunderbird</filename>
</para>
<para>
Mozilla Thunderbird CSS which integrates Thunderbird Mail Reader with the current NsCDE theme.
</para></listitem>

<listitem><para>
  <filename class="directory">$NSCDE_DATADIR/integration/rofi</filename>
</para>
<para>
Template theme for rofi(1) window switcher, launcher, ssh dialog and dmenu replacement
</para></listitem>

</itemizedlist>
</sect2>

<sect2 id="NsCDE-User-Tree-Layout">
<title>User Tree Layout</title>
<para>
User part of configuration is located in <filename class="directory">$HOME/.NSCDE</filename>
- this place is what is referred as <varname>$FVWM_USERDIR</varname> in this documentation.
If user has a plain FVWM configuration in <filename class="directory">$HOME/.fvwm</filename>
it will not be used in any way and can co-exist with NsCDE. Here is the simple layout of things
in <varname>$FVWM_USERDIR</varname>:
</para>

<itemizedlist>

<listitem><para>
   <filename class="directory">app-defaults/</filename> directory:
   </para>
   <para>
   X resources referenced by the usual <varname>XAPPLRESDIR</varname> environment variable.
   Files inside are (will be) generated by the <link linkend="NsCDE-ColorMgr">Color Style Manager</link>
</para></listitem>

<listitem><para>
   <filename class="directory">backdrops/</filename> directory:
   </para>
   <para>
   If created, user can put custom backdrop sources here, and they can
   than be selected by the <link linkend="NsCDE-BackdropMgr">Backdrop Style Manager</link>
   and processed with
   current or custom color scheme.
</para></listitem>

<listitem><para>
   <filename class="directory">photos/</filename> directory:
   </para>
   <para>
   User's photos which can be used instead of backdrops if selected in
   <link linkend="NsCDE-BackdropMgr">Backdrop Style Manager</link> or
   configured in <filename>Backdrops.fvwmgen</filename>
   manually.
</para></listitem>

<listitem><para>
   <filename class="directory">backer/</filename> directory:
   </para>
   <para>
   Generated backdrops referenced by Colorsets 31-38 for FvwmBacker. This is what is displayed
   on the screen background, different for every workspace.
</para></listitem>

<listitem><para>
  <filename class="directory">backer/bgcache/</filename> subdirectory:
   </para>
   <para>
  If FVWM3 is used by NsCDE in non-global monitor <emphasis>DesktopConfiguration</emphasis> mode,
  Large PNG files are generated from the existing backdrops in
  <filename class="directory">$NSCDE_DATADIR/defaults/backer</filename>.
  This directory contains automatically generated hierachy structure of background cache for multiple different X RandR
  monitors when NsCDE is used with FVWM3 in non-global <option>DesktopConfiguration</option> mode, which are
  matching various combinations of desks across monitors.
  Referenced in function f_SetFvwm3NonGlobalBackground of <filename>fvwm/Functions.fvwmconf</filename> and
  in <filename>$NSCDE_TOOLSDIR/xrandr_backer</filename> backdrop autocreate script.
</para></listitem>

<listitem><para>
   <filename class="directory">fontsets/</filename> directory:
   </para>
   <para>
   If created, user can put or generate with <link linkend="NsCDE-FontMgr">Font Style Manager</link> own
   fontsets here.
</para></listitem>

<listitem><para>
   <filename class="directory">icons/</filename> directory:
   </para>
   <para>
   Populated by dynamic menu action <command>fvwm-menu-desktop</command>.
   If directory does not exist, script will create it.
</para></listitem>

<listitem><para>
   <filename class="directory">icons/NsCDE/</filename> directory:
   </para>
   <para>
   NsCDE custom icons. Put here by <link linkend="NsCDE-ColorMgr">Color Style Manager</link>
   and the rest of the tools. Since icons from here are referenced with a relative path,
   whatever is missing here, will be loaded from system's
   <filename class="directory">$NSCDE_DATADIR/icons/NsCDE</filename> automatically.
</para></listitem>

<listitem><para>
   <filename class="directory">libexec/</filename> directory:
   </para>
   <para>
   If created, <filename>colormgr.local</filename> script can be written and put here, as
   well as <filename>fontmgr.local</filename> and other user's hooks.
</para></listitem>

<listitem><para>
   <filename class="directory">palettes/</filename> directory:
   </para>
   <para>
   User can put custom palette files here, and they can
   than be selected by the <link linkend="NsCDE-ColorMgr">Color Style Manager</link> and processed for a
   preview or applied as new theme.
</para></listitem>

<listitem><para>
  <filename class="directory">templates/</filename> directory:
   </para>
   <para>
  Here, local subdirectory of <filename class="directory">app-defaults</filename>
  with tmpl files can be optionally created. Also, it is a good choice for Gkrellm or other
  files processed by the <filename>libexec/colormgr.local</filename>
</para></listitem>

<listitem><para>
  <filename class="directory">tmp/</filename> directory:
   </para>
   <para>
  Place used by parts of the NsCDE and in particular NsCDE's
  FvwmScript programs for temporary generated files for previews,
  or as scratch and work directory. Tools are usually taking care
  to cleanup their garbage from tmp/ on exit.
</para></listitem>

<listitem><para>
  <filename>XYZ.fvwmconf</filename> files:
   </para>
   <para>
  Absolute overrides of <filename>$NSCDE_DATADIR/fvwm/XYZ.fvwmconf</filename> files.
  If in existence, they will be read instead of system defaults.
  <emphasis>XYZ</emphasis> is here placeholder/example for Style, Functions, Keybindings,
  Init, Menus etc ... For some groups of FVWM configuration points this makes a sense,
  for most it doesn't see next description for such examples.
</para></listitem>

<listitem><para>
  <filename>XYZ.fvwmlocal</filename> files:
   </para>
   <para>
  Extensions, added values of <filename>$NSCDE_DATADIR/fvwm/XYZ.fvwmconf</filename> files.
  If in existence, they will be read right as the continuation of their .fvwmconf main
  configurations from system (or local) directory. This is preferred way to extend
  functionality or override something not big enough for a complete "fork" of the config
  file. Colorset, Backdrops, Animate, Font-$DPIdpi, Init, and Subpanel are exception of this,
  that is, it is preferred (if not only thing possible) to have it as
  <emphasis>.fvwmconf</emphasis> files only, and not <emphasis>.fvwmlocal</emphasis> files.
</para>
<para>
  <filename>Style.override</filename> file:
   </para>
   <para>
  If created, it will be read by the <filename>$NSCDE_DATADIR/fvwm/Style.fvwmconf</filename>.
  Here, core style for all windows (*) can be overriden prior to reading particular
  NsCDE application style overrides and addons, and prior to reading
  <filename>$FVWM_USERDIR/Style.fvwmlocal</filename>. Here, advanced users can override
  or extend core styles which are not customizable by the Window Style Manager. See fvwm(1) for
  a huge list of <emphasis>Style</emphasis> options.
  Putting core <emphasis>Style</emphasis> options after NsCDE applications in the
  <filename>$NSCDE_DATADIR/fvwm/Style.fvwmconf</filename> are processed can nullify overrides
  for that particular applications, this is why this mechanism is provided.
  This file is not created in <varname>$FVWM_USERDIR</varname> by setup procedure or Style
  Managers, but if created (manually) it will be read and processed.
</para>
<para>
  <emphasis>XYZ</emphasis> is here placeholder/example for Style, Functions, Keybindings,
  Init, Menus etc ...
</para></listitem>

<listitem><para>
  <filename>NsCDE.conf</filename> file:
   </para>
   <para>
  managed by <link linkend="NsCDE-WindowMgr">Window Style Manager</link>,
  <link linkend="NsCDE-WsPgMgr">Workspaces and Pages Style Manager</link>,
  <link linkend="NsCDE-PointerMgr">Pointer Style Manager</link> and users
  own editor manually. See the rest of the documentation.
  <filename>NsCDE.conf</filename> may be considered the most important
  user configuration NsCDE file.
</para></listitem>

<listitem><para>
  <filename>WSM.conf</filename> file:
   </para>
   <para>
  read/written by <link linkend="NsCDE-WsPgMgr">Workspaces and Pages Style Manager</link>,
  and <link linkend="NsCDE-GWMOptions">Graphical Workspace Manager (GWM) Options dialog</link>,
  and user's favorite editor. Not an FVWM config file. System default of this file is
  <filename>$NSCDE_DATADIR/defaults/WSM.conf</filename>, and it is not actively used, because
  defaults are hardcoded in WSM and GWM.
</para></listitem>

<listitem><para>
  <filename>FrontPanel.actions</filename> file:
   </para>
   <para>
   user's overrides/addons for Front Panel icons and actions. Written by editor manually, and by
   <guimenuitem>Copy to Main Panel</guimenuitem> option of the context submenu of subpanel's items.
   See section about <link linkend="FrontPanel_actions"> Front Panel </link> for more information.
</para></listitem>

<listitem><para>
  <filename>GeoDB.ini</filename> file:
   </para>
   <para>
    part of the Geometry Manager functionality. Written and read by the
    <command>$NSCDE_TOOLSDIR/confset</command> and <command>$NSCDE_TOOLSDIR/confget</command>
    on <guimenuitem>Save Geometry</guimenuitem>" and <guimenuitem>Reposition</guimenuitem>
    from Extended and Standard Window Operations menus. Windows-like <emphasis>ini</emphasis>
    files are WAY nicer than dconf and such binary registry-like facilities. See detals about
    <link linkend="NsCDE-GeometryMgr">Geometry Manager</link> for more information.
</para></listitem>

<listitem><para>
  <filename>Xdefaults</filename> file:
   </para>
   <para>
   Read on startup by xrdb(1).
</para></listitem>

<listitem><para>
  <filename>Xdefaults.local</filename>, <filename>Xdefaults.fontdefs</filename>,
  <filename>Xdefaults.mouse</filename> files:
   </para>
   <para>
  Included with preprocessor directives from <filename>Xdefaults</filename>
</para></listitem>

<listitem><para>
  <filename>Xset.conf</filename> file:
   </para>
   <para>
  Configuration (a batch file or shell script basically) with xset(1) parameters for
  system beep, pointer, keyboard, and DPMS settings which are managed by their
  respective Style Managers. User can put here <command>setxkbmap</command>,
  <command>xgamma</command> and such additional X server configuration commands
  (or whatever one likes). Care must be taken not to mess lines beggining with
  <emphasis>#XYZMgr,xxxx</emphasis> till <emphasis>#end</emphasis>, since this is
  internal marker of FvwmScript's buggy <function>WriteToFile</function> function.
</para></listitem>

<listitem><para>
 <filename>NsCDE-Sandbox.conf</filename> file:
 </para>
 <para>
 If exists, used only in bare sandbox mode, where basic functionality of the NsCDE
 is needed, and not full DE-like environment.
</para></listitem>

</itemizedlist>

</sect2>

</sect1>

<sect1 id="NsCDE-Installation-Dependencies">
<title>Installation Dependencies</title>
<para>
For NsCDE to work, essential software is FVWM Window Manager. Almost all is based on it.
Since NsCDE is heavy user of <varname>infostore</varname> internal variables and other
new features of FVWM, development has been done on FVWM versions 2.6.7 and 2.6.8. At
this time, this are recommended, if not mandatory versions of FVWM for NsCDE. Other
dependencies, that is, software used by NsCDE is:
</para>

<itemizedlist>

<listitem><para>
Original Korn Shell 93 or newer. All shell script routines inside configuration, helper
scripts and FvwmScript helpers are written with ksh. It is known for sure that pdksh
cannot be drop in replacement, and in tests on Arch Linux with mksh it became clear that
mksh cannot replace Korn Shell. Korn Shell is available and it is free.
</para></listitem>

<listitem><para>
<emphasis>Xorg utils</emphasis> (Fedora/CentOS RPM xorg-x11-utils) -
<command>xdpyinfo</command>, <command>xprop</command> ...
</para></listitem>

<listitem><para>
Util <emphasis>xdotool</emphasis> - used by FVWM2 which is not patched with WindowName
patch for the FvwmButtons. Not used by FVWM3.
</para></listitem>

<listitem><para>
<emphasis>ImageMagick</emphasis> - convert(1), display(1), resize(1) ... really needed.
</para></listitem>

<listitem><para>
<emphasis>Xscreensaver</emphasis> - optional, but Screen Style Manager functionality
will not work without it. Something needs to be installed for locking the screen.
</para></listitem>

<listitem><para>
<emphasis>cpp</emphasis> - C preprocessor for <command>xrdb</command> functionality
- for X resources integration. Used by xrdb(1).
</para></listitem>

<listitem><para>
<emphasis>xorg-x11-server-utils</emphasis> (CentOS, Fedora name) - xrdb, xset, xrefresh
mandatory for startup, some style managers and menus.
</para></listitem>

<listitem><para>
<emphasis>python-yaml</emphasis> - needed for python part of the color theme management
and for Gtk+Qt integration.
</para></listitem>

<listitem><para>
<emphasis>PyQt4</emphasis> or <emphasis>PyQt5</emphasis> (or possibly python-qt4, python-qt5 ...)
This is unfortunate dependency which is further dependent on Qt libraries. NsCDE tries to have as
less as possible dependencies, specially indirect (dependencies of dependent dependencies of
dependencies ...). Gtk/Qt integration is borrowed from CDEtheme Motif/CDE theme project and
adapted for use with FVWM (instead of heavy Xfce dependency) or standalone engine. In part of
the <filename>Theme.py</filename> code, some png pixmaps are cut and colored with functions from
this API. With present job and lack of time, there was no time to do this without PyQt4 or PyQt5
for the first public release.
</para>
</listitem>

<listitem><para>
<emphasis>Gtk2, Gtk3, Qt4, Qt5, qtconfig-qt4, qt5ct, qt5-qtstyleplugins</emphasis>
(optional) There is a great chance this libraries and some useful programs using them are
already installed on user's system. If Gtk and Qt integration is activated in
<link linkend="NsCDE-ColorMgr">Color Style Manager</link>, there is no point not to have it
installed.
</para>
<para>
Notice about Qt4 and Qt5: <command>qt4-config</command> (or <command>qt-config</command>)
and <command>qt5ct</command>: Although colors will be applied, for font setting to take effect,
qtconfig-qt4 (or qtconfig) must be run, something changed back and forth, and then applied/saved
- no matter that you will see fonts of your choice already selected. This can be considered a bug.
Same goes for Qt5.
</para>
<para>
Notice about Qt5: <varname>QT_QPA_PLATFORMTHEME</varname> environment variable must be
set, and be set to <varname>qt5ct</varname> value in order to run <command>qt5ct</command> configurator.
This variable is set by default from the <filename>$FVWM_USERDIR/NsCDE.conf</filename>.
</para></listitem>

<listitem><para>
Recommended fonts for as close as possible CDE look are <emphasis>DejaVu Serif</emphasis> for
variable, and <emphasis>DejaVu Sans Mono</emphasis> for monospaced fonts. Check should be made
if this fonts are installed on the system. For Solaris CDE look, <emphasis>Lucida Sans</emphasis>
and monospaced <emphasis>Lucida Sans Typewriter</emphasis> should be installed, selected and
used instead. (optional)
</para></listitem>

<listitem><para>
<command>Stalonetray</command> for "tray" facility (optional)
</para></listitem>

<listitem><para>
<command>Dunst</command> for notification daemon (optional)
</para></listitem>

<listitem><para>
<command>xterm</command>
</para></listitem>

<listitem><para>
<emphasis>python3</emphasis>
</para></listitem>

<listitem><para>
<emphasis>python36-pyxdg</emphasis> or <command>python3-pyxdg</command>
</para></listitem>

<listitem><para>
<emphasis>libstroke</emphasis> (FVWM2)
</para></listitem>

</itemizedlist>

</sect1>

<sect1 id="NsCDE-Installation">
<title>Installation</title>
<para>
In it's original non-packaged form, NsCDE release or gut clone directory result is in
unconfigured source form. NsCDE uses autoconf and automake to preprocess it's scripts,
programs and configurations, and compile 3 helper binaries. Dependencies are checked
during <command>./configure</command> phase, but errors are only produced if something
needed for final product is missing. That is, it is assumed that this will be built
on some build machines which doesn't have installed all runtime dependencies of the NsCDE.
</para>
<para>
Much fine grained control over what is needed in build time, and what in run time is
acomplished when NsCDE is packaged as RPM, DEB or Arch package. Fully functional example
RPM <emphasis>spec</emphasis>, Debian DEB <emphasis>control</emphasis> and Arch
<emphasis>PKGBUILD</emphasis> files are provided in <filename class="directory">pkg</filename>
of the NsCDE source distribution. Thanks to the "-tb" feature of RPM, RPM package can be
built straight from tarball as <command>rpmbuild -tb NsCDE-2.X.tar.gz</command>.
</para>
<para>
A generic installation instruction should look familiar:
</para>
<programlisting>
<![CDATA[
  $ su - || sudo -i
  # umask 0022
  # cd /tmp
  # wget https://github.com/NsCDE/NsCDE/archive/NsCDE-<version>.tar.gz
  # tar xpzf NsCDE-<version>.tar.gz
  # cd NsCDE-<version>
  # ./configure
  # make
  # make install
]]>
</programlisting>

<para>
Example above will install NsCDE into /usr/local. However, it is possible to install to
some other place. For example, this will install NsCDE in /opt/sfw, but put XDG menu
file in /etc/xdg/menus.
</para>

<programlisting>
<![CDATA[
  # ./configure --prefix=/opt/sfw --sysconfdir=/etc
  # make
  # make install
]]>
</programlisting>

<para>
For a latest master tree from development page on Github, NsCDE can be fetched with
git(1) and upgraded with fetching changes in the master or some other branch. An example
of this would be:
</para>

<programlisting>
<![CDATA[
  # git clone https://github.com/NsCDE/NsCDE.git
  # cd NsCDE
  # ./configure
  # make
  # make install
]]>
</programlisting>

<para>
Upgrades, either from tarball or from git, once new version is downloaded can be made
by uninstalling and installing NsCDE with make(1) tool. Example of upgrade:
</para>

<programlisting>
<![CDATA[
  # cd NsCDE
  # make uninstall
  # git fetch
  # git reset --hard @{u}
  # ./configure --sysconfdir=/etc
  # make
  # make install
]]>
</programlisting>

<para>
Running only <command>make uninstall</command> will uninstall NsCDE.
</para>

</sect1>
<sect1 id="NsCDE-Startup">
<title>NsCDE Startup</title>
<para>
Session can be started from the <filename>$HOME/.xsession</filename> in last command line
as <command>exec nscde</command> or <command>ssh-agent nscde</command> or with <command>gpg-agent</command>,
<command>lxsession</command> or whatever.
</para>
<para>
If supported by the X Display Manager which is in use on the target system, an xsession
file <filename>nscde.desktop</filename> will be put during the installation into
<filename class="directory">/usr/share/xsessions</filename>
(or in whatever place your system and your X Display Manager reads this files)
and afterwards NsCDE can be selected from the display manager's menu or similar
session selector. See the rest of the X Session Manager integration examples in the
directory <filename class="directory">$PREFIX/share/doc/nscde/examples/</filename>
for MATE, KDE, LXDE and similar DE integrations and play with this if you like.
</para>
</sect1>

<sect1 id="NsCDE-Localization">
<title>NsCDE Localization</title>
<para>
NsCDE implements localization capabilities provided by FVWM and system C library.
Directive <varname>LocalePath</varname> in <filename>$NSCDE_ROOT/config/Main.fvwmconf</filename>
is set to look at <varname>$[NSCDE_ROOT]/share/locale;NsCDE:$[NSCDE_ROOT]/share/locale;NsCDE-Subpanels:+</varname>.
In other words, whole NsCDE reads it's localization from "mo" files from
<filename class="directory">$[NSCDE_ROOT]/share/locale/$LANG/LC_MESSAGES/NsCDE.mo</filename> except subpanels
which have their localization in separate mo files in the same directory.
</para>
<para>
All FvwmScript based applications are reading their own "mo" file from
<filename class="directory">$[NSCDE_ROOT]/share/locale/$LANG/LC_MESSAGES/NsCDE.mo</filename> 
which is defined in every program's header with <varname>UseGettext</varname> directive.
</para>
<para>
All part of visible text provided by NsCDE has localization ability with
the restriction of the Workspace names, which are localized according to
locale present during user's first setup. That is: "One", "Two", "Three"
and "Four" are translated by catching text with gettext(1). Later this
workspaces can be renamed by user as needed.
</para>
<para>
LANGUAGE and/or LC_MESSAGES must be set for localization to work correctly. Best way to do this are
login and profile files of the user, parameters choosend with display manager, or as a fallback,
<filename>$FVWM_USERDIR/NsCDE.conf</filename> can be used to assign value of the
LC_MESSAGES (or LC_ALL) and LANGUAGE commands.
</para>
<para>
First translated language from original English is Croatian. Other translations are
welcome. There are some pitfalls and things which must be observed when translating
to the new languages. Existing .po files in "hr" can serve as a template for new
translations since just msgstr lines must be replaced and msgid's are already there.
</para>
<para>
For more information about localization see README.localization text file which is
provided with software in the root of the unpacked tarball.
</para>
</sect1>

<sect1 id="NsCDE-Initial-Configuration">
<title>Initial Configuration</title>
<para>
Upon the first (successful) start, <filename class="directory">~/.NsCDE,</filename>
that is <varname>$FVWM_USERDIR</varname> is created, and only icons subdirectory
is created as <command>fvwm-menu-desktop</command> is run. User will be presented with a default
system setup and with default color theme <emphasis>Broica</emphasis> in 8 colors, and
<function>f_FindApp</function> function will try hard to find some usable terminal
application and run it with setup. If Gkrellm, pnmixer programs are installed,
on the system and found, they will be run too. Stalonetray and Dunst will be run if enabled by the user. Stalonetray and Dunst colors and fonts will be handled internally by Color
Style Manager and Font Style Manager when theme or font is changed.
</para>
<para>
Initial setup is a simple script (<command>$NSCDE_ROOT/libexec/bootstrap</command>) from
the terminal which will run automatically and will set up the following:
</para>

<itemizedlist>
<listitem><para>X resources in <filename class="directory">~/.NsCDE</filename></para></listitem>
<listitem><para>Default background color (pre-FvwmBacker) from default theme</para></listitem>
<listitem><para>Default <filename>~/.NsCDE/NsCDE.conf</filename></para></listitem>
<listitem><para>Default <filename>~/.NsCDE/GeoDB.ini</filename></para></listitem>
<listitem><para> <filename>~/.icons/default/index.theme</filename>
 (default X cursor scheme)</para></listitem>
<listitem><para> <filename>~/.gtkrc-2.0</filename> </para></listitem>
<listitem><para> <filename>~/.config/gtk-3.0/settings.ini</filename> </para></listitem>
<listitem><para> <filename>~/.themes/NsCDE</filename> </para></listitem>
<listitem><para> <filename>~/.config/Trolltech.conf</filename> </para></listitem>
<listitem><para> <filename>~/.config/qt5ct/qt5ct.conf</filename> </para></listitem>
<listitem><para> <filename>~/NsCDE/Stalonetray.conf if it does not exist yet</filename> </para></listitem>
<listitem><para> <filename>~/NsCDE/Dunst.conf if it does not exist yet</filename> </para></listitem>
<listitem><para>Visual Pager NsCDE addon Option</para></listitem>
<listitem><para>Disable or enable XscreenSaver</para></listitem>
<listitem><para>Disable or enable use of the XSETTINGS xsettingsd daemon</para></listitem>
<listitem><para>Disable or enable use of Rofi Launcher on <keysym>Meta+F1</keysym> if installed</para></listitem>
<listitem><para>Enable NsCDE to remember last used page on workspace if selected</para></listitem>
<listitem><para>Configure favorite X file manager, if desired</para></listitem>
<listitem><para>Configure favorite X text editor, if desired</para></listitem>

</itemizedlist>

<para>
Note that no file from the above list will be overwritten if it already
exists in it's place. It will be skipped, but GTK and Qt theme
integration files can be still written with <link linkend="NsCDE-ColorMgr">Color Style Manager</link>.
After <command>bootstrap</command> script finishes setup,
<link linkend="NsCDE-ColorMgr">Color Style Manager</link> will be run and
user asked to confirm default theme or change it. <emphasis>Do not</emphasis> avoid this
step, since some program bits are not fully setup on bare defaults,
(like a clock background) and must be
generated in the <filename class="directory">~/.NsCDE/icons/NsCDE</filename> directory.
</para>

<para>
After <link linkend="NsCDE-ColorMgr">Color Style Manager's</link>
<guibutton>OK</guibutton> button is pressed, theme will be
regenerated. Gtk and Qt themes will be regenerated only if their
checkboxes in <link linkend="NsCDE-ColorMgr">Color Style Manager</link> are checked in.
Setup script after the finish will ask user to press <keysym>RETURN</keysym> to exit.
This is for user's convenience to read output of the setup for
informative and/or diagnostic reasons.
It is advised after this setup to open <filename>$FVWM_USERDIR/NsCDE.conf</filename>
and set up InfoStoreAdd internal FVWM variables for <varname>terminal</varname>,
<varname>filemgr</varname> and <varname>xeditor</varname> to user's favorite programs for
functions.
</para>

<para>
Layout of the <varname>$FVWM_USERDIR</varname> after the initial
setup should look like this:
</para>

<itemizedlist>
<listitem><para>app-defaults/</para></listitem>
<listitem><para>backdrops/</para></listitem>
<listitem><para>palettes/</para></listitem>
<listitem><para>fontsets/</para></listitem>
<listitem><para>templates/</para></listitem>
<listitem><para>photos/</para></listitem>
<listitem><para>backer/</para></listitem>
<listitem><para>backer/bgcache</para></listitem>
<listitem><para>GeoDB.ini</para></listitem>
<listitem><para>icons/</para></listitem>
<listitem><para>icons/NsCDE/</para></listitem>
<listitem><para>Backdrops.fvwmgen</para></listitem>
<listitem><para>Colorset.fvwmgen</para></listitem>
<listitem><para>NsCDE.conf</para></listitem>
<listitem><para>tmp/</para></listitem>
<listitem><para>Xdefaults</para></listitem>
<listitem><para>Xdefaults.fontdefs</para></listitem>
<listitem><para>Xdefaults.local</para></listitem>
<listitem><para>Xdefaults.mouse</para></listitem>
</itemizedlist>

<para>
It is advised to logout and login from the X session after this,
and check if everything looks ok. Also, it is a good idea to start
using programs from the menu and examine environment around for a
half an hour or so, before running Style Manager (2nd button right
of the Workspace Manager on the Front Panel) to customize other
aspects of the interface. NsCDE is now ready for usage.
</para>

</sect1>

<sect1 id="NsCDE-Logging">
<title>Diagnostic: X11, FVWM and Watch Errors</title>

<para>
Most of the X11 Display Managers, such as XDM, sddm, gdm etc, are redirecting diagnostic
output (standard error, stderr, file descriptor 2) into a file or some logging facility.
This file is usually <filename>$HOME/.xsession-errors</filename>. When "Watch Errors" item
is launched from default subpanel 7 (Desktop Settings), it will execute <command>xterm -e $[infostore.xlogcmd]</command>. If not redefined in <filename>$FVWM_USERDIR/NsCDE.conf</filename>,
contents of the variable FVWM infostore variable <varname>$[infostore.xlogcmd]</varname> will be
<emphasis>"tail -300f ~/.xsession-errors"</emphasis>.
</para>
<para>
If your X Display Manager is using
different path or file name, this can be redefined as it is mentioned above. Beware that some
X Display Managers (namely lightdm) are sending diagnostic output into
<filename>/dev/null</filename>. In this case, no variable redefinition can get this
output visible to the user.
</para>
<para>
Reading X, FVWM and NsCDE log output can be informative and helping while solving possible
unexpected or unexplainable problems with desktop setup.
</para>
<para>
Window Options menu (called by titlebar button 1, leftmost) of the "Watch Errors" window under
FVWM 2.X has a custom menu entry <guimenuitem>Fvwm Diagnostic Console</guimenuitem> which
starts FVWM module FvwmConsole. FvwmConsole on the other hand has custom menu entry
<guimenuitem>Watch Errors</guimenuitem> which calls Watch errors.
When both windows are on the screen, this menu entries will simply transfer focus to each other.
</para>
</sect1>

<sect1 id="NsCDE-Integrations">
<title>Integration with X resources and widgets</title>

<sect2 id="NsCDE-Integration-Xresources">
<title>Integration of X resources</title>
<para>
NsCDE is using it's own copies of <filename>Xdefaults</filename> and includes files for X
resources integration in <varname>$FVWM_USERDIR</varname>. X resources are filled with
this from <command>$NSCDE_ROOT/bin/nscde</command> main wrapper during startup as the
part of session assembling. Variable <varname>XAPPLRESDIR</varname> is also adjusted
to <filename class="directory">$FVWM_USERDIR/app-defaults</filename>.
There can be problems while using certain X session managers or DE which are
clearing environment on a startup, and in this cases user must take care to put
environment from <command>nscde</command> wrapper in place after startup. Probably autostart job
in <filename class="directory">$HOME/.config/autostart</filename> and select from
Session Manager's app will do the job.
</para>
<para>
Special private paths for X resources are used in order not to mess
with user's maybe existing resources and files. If wanted, custom
app-defaults files can be places in
<filename class="directory">$FVWM_USERDIR/app-defaults</filename> or
even better, <filename class="directory">$FVWM_USERDIR/templates/app-defaults</filename>
and reworked for <link linkend="NsCDE-ColorMgr">Color Style Manager</link> integration,
because if find in that directory,
and with <emphasis>.tmpl</emphasis> extension, it will be processed in the same way
as system files from <filename class="directory">$NSCDE_DATADIR/config_templates/app-defaults/</filename>
and put in <filename class="directory">$FVWM_USERDIR/app-defaults</filename>.
</para>
<para>
Plain custom X resources can be put in <filename>$FVWM_USERDIR/Xdefaults.local</filename>.
This file will not be overwritten by Style Managers.
X resources integration is turned on by default in
<link linkend="NsCDE-ColorMgr">Color Style Manager</link>.
</para>
</sect2>

<sect2 id="NsCDE-Integration-Gtk-Qt">
<title>Gtk2, Gtk3, Qt4 and Qt5</title>
<para>
<command>$NSCDE_TOOLSDIR/themegen</command> with
<filename class="directory">$NSCDE_ROOT/lib/NsCDE/python</filename> and with
<filename class="directory">$NSCDE_DATADIR/integration/gtk2_gtk3_qt</filename>
are parts of the optional Gtk2, Gtk3, Qt4 and Qt5 integration suite. When run from the
<link linkend="NsCDE-ColorMgr">Color Style Manager</link> or manually with the
<command>$NSCDE_TOOLSDIR/themegen</command>,
with proper options, this will produce <filename class="directory">$HOME/.themes/NsCDE</filename>
directory with either or both Gtk2 and Gtk3 themes. <filename>$HOME/.gtkrc-2.0</filename> and
<filename>$HOME/.config/gtk-3.0/settings.ini</filename> will be edited to point to this
directory with <option>gtk-theme-name</option> option. Excessive button images on menus and
buttons will be turned off of course.
</para>
<para>
If Qt4 and/or Qt5 integration is also selected in
<link linkend="NsCDE-ColorMgr">Color Style Manager</link>, files
<filename>$HOME/.config/Trolltech.conf</filename> and
<filename>$HOME/.config/qt5ct/qt5ct.conf</filename> will
be edited to use "GTK2" Qt theme engine. This means, there is no
Qt4 and/or Qt5 integration without at least Gtk2 integration because
Gtk2 theme in use is deciding what GTK2 Qt4 and Qt5 engine will display.
For Qt5 integration, make sure <emphasis>qt5-qtstyleplugins</emphasis> (or something like
that name) is installed: <filename>platformthemes/libqgtk2.so</filename> is needed.
</para>
</sect2>

<sect2 id="NsCDE-Integration-Mozilla">
<title>Mozilla: Firefox and Thunderbird</title>
<para>
From version 1.3 and further, NsCDE contains CSS code and icons which can be used from
<filename>$FVWM_USERDIR/libexec/colormgr.local</filename> while applying new color style and theme,
to generate colorsets also for either or both Firefox and Thunderbird.
</para>
<para>
For this to work,
appropriate code or the whole <filename>colormgr.local</filename> from
<filename>$NSCDE_DATADIR/config_templates/colormgr.local</filename> must be adapted into
<filename>$FVWM_USERDIR/libexec/colormgr.local</filename>. Shell variable
<varname>FIREFOX_CHROMEDIR</varname> should contain path to the
<filename class="directory">~/.mozilla/firefox/__PROFILE__/chrome.</filename>,
<varname>FIREFOX_MAJVER_PFX</varname> should be either "7x" or "9x" depending of major version
of the Firefox is installed and used on the system. Firefox 8x belongs to 9x code base. The same
as for <varname>FIREFOX_CHROMEDIR</varname>, variable <varname>THUNDERBIRD_CHROMEDIR</varname> should
point to chrome directory of user's thunderbird profile. If chrome subdirectory in the user's profile
directory does not exist, it will be created by the <filename>colormgr.local</filename>. This will make
appropriate entiries in <filename>userChrome.css</filename> and <filename>userContent.css</filename> to
import <filename>nscdeChrome.css</filename>, <filename>nscdeIcons.css</filename> and
<filename>nscdeContent.css</filename> from the <filename class="directory">$NSCDE_DATADIR/integration/firefox</filename>
and/or from <filename class="directory">$NSCDE_DATADIR/integration/thunderbird</filename>.
File <filename>nscdeColordefs.css</filename> will be generated in the chrome dir with color mappings to the
current NsCDE theme. This wile is also imported in userChrome.css and userContent.css.
</para>
<para>
If the option "Run $FVWM_USERDIR/libexec/colormgr.local (if exists)" is not turned off in the
Color Style Manager while applying a theme, CSS which makes Firefox and Thunderbird as to a high degree
similar to Motif/CDE application, and in the right colors will be generated. Firefox and Thunderbird
must be restarted for this changes to take a place.
</para>
<para>
In Thunderbird, because of the nature of mail, it is not 100% possible to use color 4 from the NsCDE
theme as background/foreground combination, because this can give ugly and bad results with some amount
of structured HTML mails. Hence, solor for test is black, while background is from Solaris theme (#fff7e9)
which is yellowish, almost white.
</para>
<para>
Here is how chrome directory layout and files must look for thunderbird after <filename>colormgr.local</filename>
makes a changes:

<programlisting>
<![CDATA[
/home/user/.thunderbird/profile_test_009/chrome
|- nscdeColordefs.css
|- userChrome.css
|- userContent.css
]]>

$ cat /home/user/.thunderbird/Profile_1/chrome/userContent.css 
@import url("nscdeColordefs.css");
@import url("/opt/NsCDE/share/NsCDE/integration/thunderbird/nscdeContent.css");

$ cat /home/user/.thunderbird/Profile_1/chrome/userChrome.css
@import url("nscdeColordefs.css");
@import url("/opt/NsCDE/share/NsCDE/integration/thunderbird/nscdeChrome.css");
@import url("/opt/NsCDE/share/NsCDE/integration/thunderbird/nscdeIcons.css");
</programlisting>

</para>
<para>
This is how Firefox chromedir should look:

<programlisting>
<![CDATA[
/home/user/.mozilla/firefox/testtest.default-release/chrome
|- nscdeColordefs.css
|- nscdeContent.css -> /opt/NsCDE/share/NsCDE/integration/firefox/ff9x_nscdeContent.css
|- userChrome.css
|- userContent.css

$ cat /home/user/.mozilla/firefox/testtest.default-release/chrome/userChrome.css 
@import url("nscdeColordefs.css");
@import url("/opt/NsCDE/share/NsCDE/integration/firefox/ff9x_nscdeChrome.css");
@import url("/opt/NsCDE/share/NsCDE/integration/firefox/nscdeIcons.css");

$ cat /home/user/.mozilla/firefox/testtest.default-release/chrome/userContent.css
@import url("nscdeColordefs.css");
@import url("nscdeContent.css");
]]>
</programlisting>
</para>
<para>
Great care has been taken to get working CSS which modifies Mozilla applications not
to display light text on light background, or dark text on dark background, but this
ever changing CSS mess should be considered of beta quality, so issue reports,
specially those with ready made fixes are more than welcome.
</para>
</sect2>

<sect2 id="NsCDE-Integration-Custom">
<title>Custom application integration</title>
<para>
If <command>$FVWM_USERDIR/libexec/colormgr.local</command> exists,
<link linkend="NsCDE-ColorMgr">Color Style Manager</link>
will run it if it's checkbox is selected. This script or program will
be run with a full path of CDE palette file followed by the number of
colors selected in interface (4 or 8). This can be useful for
regenerating settings of applications which do not use X resources,
and neither GTK nor Qt, but have support for some level of customization
of this resources. Also "skins" for programs like <command>smplayer,</command> <command>audacious</command>
and <command>Gkrellm</command> can be processed from custom <command>colormgr.local</command>.
</para>
<para>
In the directory <filename class="directory">$NSCDE_DATADIR/config_templates/Gkrellm</filename>
is the complete NsCDE theme for the Gkrellm.
File <filename>$NSCDE_ROOT/share/examples/colormgr.local.example</filename>
can be used for this integration. There are also examples for
<command>Gkrellm</command> and
<command>mate-terminal</command>. Local script <command>colormgr.local</command>
will most likely use <command>$NSCDE_TOOLSDIR/nscde_palette_colorgen</command> in some way.
</para>
</sect2>

</sect1>

<sect1 id="NsCDE-Additional-Software">
<title>Additional recommended software</title>
<para>
Since NsCDE is basically a collection of configurations, themes and tools around FVWM
and not desktop environment in official definition, user must choose some favorite and
default applications such as X terminal emulator file manager, and X editor, which will
then be provided to him in occations where programs of that type must be called.
</para>
<para>
Apart from this, since <emphasis>system</emphasis> tray concept has been introduced on X11 and is
here to stay, user will need some standalone tray application. For this
purpose, a logical and really great <command>stalonetray</command> (Stand Alone Tray) is more than
adequate. When NsCDE configuration for stalonetray <filename>$FVWM_USERDIR/Stalonetray.conf</filename>
is used, it will have this defaults: grid 3x3 and it's place will be in the bottom right corner of
the screen. Stalonetray is not integrated into Front Panel because it's
size cannot be known in all times: is it one button size, two, ten? It is growing and
shrinking depending on number of widgets or tray icons, and apart from
that, this can significantly alter the precious CDE look of the Front Panel. A window
with traditional mwm/dtwm borders and without title in corner of the screen is
default in NsCDE. Ideas are welcome.
</para>
<para>
There are some programs which needs to be run under escalated privileges. Usually as root.
Some examples are firewall-applet(1) for managing firewalld on Linux systems, Wireshark etc ...
For this purpose on Linux (and most probably BSD systems), so called <emphasis>PolicyKit</emphasis>
or "polkitd" is used as a authenticator component, while on the client side, PolicyKit agent
must be used. This will then prompt user for a password. Since there is no equivalent of
this agent as standalone DE-indepentent program analogously to stalonetray(1) or dunst(1),
probably the closest match and most often used is polkit-gnome-authentication-agent-1 which is
usually installed in <filename class="directory">/usr/libexec</filename> and relatively without
huge dependencies on some desktop environment. It can be started from profile, for example from
InitFunction in <filename>$FVWM_USERDIR/Init.fvwmconf</filename> or by using dex autostarter
from this very file (default Init.fvwmconf has an example for this).
</para>
<para>
Small python program <emphasis>dex(1)</emphasis> can be installed and used from InitFunction
in <filename>$FVWM_USERDIR/Init.fvwmconf</filename>. This program can be configured to read
system autostart files in <filename class="directory">/etc/xdg/autostart</filename> and/or
user's from <filename class="directory">$HOME/.config/autostart</filename>. From here,
PolicyKit agent, NetworkManager applet, Nextcloud agent, Firewall agent, pnmixer and similar
can be started. Programs such as stalonetray(1), dunst(1), xsettingsd(1), xscreensaver(1)
are not candidates for this, since they are integrated directly with NsCDE and managed
by it's configuration and autodetenction procedures.
</para>
<para>
If found, and if configured in <filename>$FVWM_USERDIR/NsCDE.conf</filename> with InfoStore
variable <varname>nscde_use_dunst</varname> set to 1, NsCDE will make fresh copy of
<filename>$FVWM_USERDIR/Dunst.conf</filename> if it doesn't already exist, and start
<emphasis>dunst(1)</emphasis> notification daemon. This standalone notification daemon is
highly configurable and is Window Manager and Desktop Environment agnostic. Usage of
dunst(1) is highly recommended.
</para>
<para>
X Terminal program? <command>Urxvt</command>, <command> xterm</command>,
<command>mate-terminal</command>, <command> terminus</command> ... user's choice
as always. As a slight recommendation, <command>mate-terminal</command> from MATE DE can be
set to look almost as Dtterm, but with richer menu and better UTF-8
handling, the bad thing is that configuration if not done via GUI or configuration file but is
stored in binary DCONF registry, and registry editor like <command>dconf-editor</command> or
or dconf <command>gsettings</command> must be used for non-interactive or CLI editing.
See the example in <filename>$NSCDE_ROOT/share/examples/colormgr.local.example</filename>
on how to integrate <command>mate-terminal</command> with a
<link linkend="NsCDE-ColorMgr">Color Style Manager</link>.
Second (if not first) best choice is <command>Urxvt</command>, but since it does not have a menu nor a
real tabs, tmux(1), screen(1) or possibly tabbed(1) can be used for the same functionality.
Suggestions for more dtterm-like alternative are welcome.
</para>
<para>
File manager? Since author does not use them very much, there is no
some strong suggestion. Maybe <command>Krusader</command> from KDE is a best choice because
it has a lot of features and functions plus two pane mode for work. It
looks like a total contrast to GNOME way of doing things, so it must be
good, although it is not at all similar to CDE's original dtfile(1), but
dtfile(1) is a bad and poor file manager anyway. Another reasonable
choice can be <command>pcmanfm</command> or <command>pcmanfm-qt</command>.
For something more <emphasis>original</emphasis>, Xplore
file manager is written with Motif widget. It looks nice, but it is unfinished
(lacks real actions for many things, and instead input dialogs are
popped up for copy/paste ...) it is not maintained and developed, and
if someone does not brings it up from the past it can serve only for
overview of directories, simple actions and nice Motif decoration.
</para>
<para>
Editor? Gvim, Emacs, Xemacs, Nedit ... user's choice.
</para>
<para>
Another nice and useful app is <command>Gkrellm</command> for which
NsCDE has a ready drop-in theme called (of course) NsCDE in
<filename class="directory">share/config_templates</filename> and it can be put in user's
<filename class="directory">~/.gkrellm2/themes</filename> and integrated with
<link linkend="NsCDE-ColorMgr">Color Style Manager</link>
with the <filename>$NSCDE_ROOT/share/examples/colormgr.local.example</filename> which can be
installed as <filename>$FVWM_USERDIR/libexec/colormgr.local</filename>.
</para>
<para>
If standalone freedesktop autostarter <command>dex-autostart</command> (sometimes called "dex")
is installed, it will be used by default <filename>Init.fvwmconf</filename> function
<function>CommonInitFunction</function> in local mode: it will read and start ".desktop" files
in the <filename class="directory">$HOME/.config/autostart</filename> directory.
</para>
<para>
X Compositor: if user likes visual effects with tinting, transparency,
shadows, 3D, smooth changes and so on, <emphasis>compton(1)</emphasis>, <emphasis>compton-ng(1)</emphasis>
or <emphasis>picom(1)</emphasis> standalone compositors are excellent programs and tools for such users,
who want to combine retro and modern style. It the time of writing this, it looks like <emphasis>picom(1)</emphasis> is
the most maintained of this three X compositors. Personally, I feel it like some kind of <emphasis>lag</emphasis>, no matter how
powerful GPU, CPU and RAM I have. I turn it on occasionally, more as an
amusement of xsnow, xsanta or xeyes type, but when I have serious work to do,
I simply turn it off in some moment.
Maybe it can be better if it is configured more conservative than example. See
<filename class="directory">/opt/NsCDE/share/examples/compton-integration</filename> for
a starting point. Syntax of this file is largely compatible for all three above mentioned
X compositors.
</para>
<para>
Notice: when X Compositor is active on X display, FVWM geometry indicator which is shown
at the center of the screen during window move or resize actions will not be visible.
</para>
</sect1>

<sect1 id="NsCDE-Single-Logical-Screen">
<title>Single Logical Screen, Xinerama - multiscreen support</title>
<para>
NsCDE has a basic support for the multiscreen setup which is basic as it is
FVWM multiscreen support, with couple of menus added and functions dealing
with move and resize operations which are aware of the multiple logical
screens. Single logical screen is referred as "SLS" in FVWM and NsCDE
documentation. Screens are implemented (and this cannot be changed in FVWM)
on the sub-page level. In other words, as workspaces (desks) contains pages,
pages are split to two or more monitors inside one single page. This can be
a bit confusing in the combination with edge scrolling and window positioning
and it takes some practice to become comfortable with such third, non-trivial
space on the screen which is already divided logically in two levels.
</para>
<para>
Monitor handling by the Xrandr X extension is for now out of scope for NsCDE
and is dealed with xrandr(1) command and other such tools. Nevertheless, when
other monitor is added to the system in SLS mode, FVWM/NsCDE must be restarted
(restart session simply) to recompute spaces, screen sizes and so on. After
restart, two new menus are available: One on Root menu on which there are entries
to move all windows on current screen, or to pick a window for moving to some
of the (xrandr identified names) logical screens connected to the system.
Second menu will appears on the "Window Options" menu called from the first
titlebar button of the window or from the root version of the "Window Options"
menu. This menu allows moving current window to other logical screen.
</para>
<para>
When logical monitor is disconnected from the X setup, FVWM NsCDE must be
restarted again to get things right again.
</para>
<para>
Front Panel will appear on the primary screen, but can be moved to other
screens by <keysym>Ctrl+Escape</keysym> pressed while pointer is on the
desired screen. This does not work always well when logical screens are
of different resolution and it is specially visible when making third
mouse click on the Workspace Manager buttons which can be popped down
below the screen instead of up to be visible. On the monitors of the
same resolution in SLS configuration, no such problem exists.
</para>
<para>
All other functions and window positioning managed directly by the NsCDE will
handle windows and transient windows correctly, so no windows centered between
two screens are expected, but some barely visible flickering and quick moving
can be observed by some parts of the NsCDE in some cases. For example, PGM -
page manager left down from the Workspace Manager on the Front Panel when
clicked will popup "Go to Page ..." menu in a more free floating form, and
not directly above PGM dynamic icon and such things ...
</para>
</sect1>

<sect1 id="NsCDE-Similar-Different">
<title>Similarities and differences in usage and look between CDE and NsCDE</title>
<para>
NsCDE is not a mere clone of CDE. Under the first visual impression,
there are unintentional and intentional differences.
</para>
<para>
First of all, it is not a standalone Window Manager or Desktop
Environment written in some language(s). It is a patchwork which
owns 80% of it's functionality to wonderful and powerful Window Manager
of FVWM. Other parts are configurations, scripts and programs which are making the whole
thing to function like the combination of the CDE experience and modern
powerful X Window Manager. Here are some things that I can recall to
be different - for the worse or for the better, user's opinion may vary.
</para>
<para>
What is similar or the same:
</para>
<itemizedlist>
<listitem><para>There is a recognizable titlebar and buttons</para></listitem>
<listitem><para>Titlebar buttons have the same basic (left click) actions as CDE</para></listitem>
<listitem><para>Color themes and theming</para></listitem>
<listitem><para>Front Panel and subpanels</para></listitem>
<listitem><para>Workspace Manager</para></listitem>
<listitem><para>Workspace Menu / Root Menu (right click on the root window)</para></listitem>
<listitem><para>Workspaces (desks)</para></listitem>
<listitem><para>Most of the icons reused</para></listitem>
<listitem><para>Backdrops</para></listitem>
<listitem><para>Style Manager launcher and most of the Style Managers</para></listitem>
<listitem><para>Occupy Workspace/Page/Monitor dialog</para></listitem>
<listitem><para>Workstation Info window (as found in Solaris CDE)</para></listitem>
<listitem><para>FpLite (not with the same function)</para></listitem>
<listitem><para>Front Panel clock, calendar and check mail</para></listitem>
<listitem><para>Icon positioning</para></listitem>
<listitem><para>Look and feel via FVWM Styles</para></listitem>
<listitem><para>Nice vintage but somewhat irritating wait cursor in the sand clock shape</para></listitem>
<listitem><para>Various misc small imitations ...</para></listitem>
</itemizedlist>
<para>
Differencies exist: for worse or better. They are described here in detail
with complete explanations:
</para>

<itemizedlist>
<listitem><para>
  Workspace Manager has a four default choices for workspaces (desks). As in CDE four is a
  default, but combinations with 2, 6 and 8 are possible. Workspace Manger can be of dynamic
  width when number of workspaces is changed, or it can be of fixed width if InfoStore
  variable wsm.eco is set to 1 in <filename>$FVWM_USERDIR/NsCDE.conf</filename>.
</para></listitem>
 
<listitem><para>
  No drag and drop. This is specially visible in <emphasis>Install Icon</emphasis> action
  which actually calls custom tool Subpanel Manager for this actions.
  Subpanel Manager itself will be rewritten in a nicer and less buggy
  way on the first good occasion.
</para></listitem>

<listitem><para>
  No Dt Actions builder, and never will be. Write FvwmScript scripts
    or use some toolkit in combination with python, perl ...
</para></listitem>

<listitem><para>
  No Application Manager. If integration with <emphasis>Install Icon</emphasis> and
    possibly menus will be possible with some file manager, it may be
    (re)invented in the future.
</para></listitem>

<listitem><para>
  Keybindings are 90% custom made, and user have a choice to use it
    or - partially or totally rewrite it. There are more
    functions and actions in NsCDE than in CDE, and hence there are
    a lot of key bindings.
</para></listitem>

<listitem><para>
  Mouse bindings - some actions like Workspace Menu in CDE are
    mimicked in NsCDE, titlebar and titlebar buttons too, but since
    there is no much of them in original CDE anyway, there is a plenty of
    custom mouse bindings and mouse bindings in combination with
    modifier keys. As for keybindings apply: use it or write your own.
</para></listitem>

<listitem><para>
  <link linkend="NsCDE-ColorMgr">Color Style Manager</link> has numerous new functions: Gtk and Qt
    integration, X resources integration is optional, and it has even
    a possibility to run a custom script with required parameters of
    current palette and number of colors for external and marginal color
    scheme integrations - like <command>Gkrellm</command> for example.
    Palette color editor is missing. It should be possible to write it
    in the FvwmScript in some future version update.
</para></listitem>

<listitem><para>
  <link linkend="NsCDE-FontMgr">Font Style Manager</link> is totally NsCDE oriented and doesn't work much
    as font management in CDE. NsCDE supports XFT fonts (disable
    antialiasing if you want <emphasis>extreme</emphasis> original look) and it combines 5
    groups of fonts in 3 sizes described in this documentation.
</para></listitem>

<listitem><para>
  <link linkend="NsCDE-KeyboardMgr">Keyboard Style Manager</link> implements all options
    supported by the xset(1)
    on PC. CDE original in default installation at least, seems to have
    only auto-repeat and click volume controls.
</para></listitem>

<listitem><para>
  <link linkend="NsCDE-PointerMgr">Mouse Style Manager</link> does not have
    configurable middle mouse (button
    2) action since this is not applicable very much on today's GUI widgets.
</para></listitem>

<listitem><para>
  <link linkend="NsCDE-BeepMgr">Beep Style Manager</link> has a additional Beep
  button for testing during setup.
</para></listitem>

<listitem><para>
  Screensaver Style Manager is in fact Xscreensaver setup. Perfect
  drop in replacement and much fancier than original.
</para></listitem>

<listitem><para>
  <link linkend="NsCDE-WindowMgr">Window Style Manager</link>
  manages much more of window, icon, pages and animation
  behavior than original program in CDE, and even this is a small subset of
  options in FVWM. See it's documentation and fvwm(1) man page.
</para></listitem>

<listitem><para>
  <link linkend="NsCDE-PowerSaveMgr">Power Style Manager</link> is actually very
   rare in Style Manager across
   old CDE setups. It manages DPMS setting of the monitor with xset(1).
</para></listitem>

<listitem><para>
  <link linkend="NsCDE-WsPgMgr">Workspaces and Pager Style Manager</link> is NsCDE
   custom tool for managing Workspaces and Pages. It is not present in any version
   of the CDE.
</para></listitem>

<listitem><para>
  Startup Style Manager is available only if NsCDE is started under some X Session
  Manager. It detects supported DE's and starts appropriate settings
  tool for that desktop environment if it is found.
</para></listitem>

<listitem><para>
  Pages: not present in CDE in best of my knowledge. Only workspaces (desks) in
  original. Page Manager (PGM) is a custom FrontPanel icon which is using place
  left bottom of the Workspace Manager. It popups menu with the list of pages and can change current page.
</para></listitem>

<listitem><para>
  Custom keyboard and mouse actions on titlebars, buttons and root window.
</para></listitem>

<listitem><para>
  WsPgMgr - Manage Workspaces and Pages. NsCDE specific tool not present in CDE.
</para></listitem>

<listitem><para>
  <link linkend="NsCDE-GeometryMgr">GeometryMgr</link> - Manages custom X11 window starting size and position.
</para></listitem>

<listitem><para>
  FpLite is measuring system load, not desktop activity. It has much
    more fine grained indication of activity with colors, and it's
    height is 3x of the original for a better visibility. On click it is
    calling FVWM function which will run terminal program with top or similar
    program, or anything else if use overrides that function in local configuration.
</para></listitem>

<listitem><para>
  Calendar and Mail widgets are placeholders and simple indicators
  which are expected to be extended with already named functions
  to do what user wants.
</para></listitem>

<listitem><para>
  Probably some more small differences.
</para></listitem>

</itemizedlist>

</sect1>

<sect1 id="NsCDE-Patches-FVWM">
<title>Patches for FVWM</title>
<para>
Optional but recommended patches for FVWM 2.6.7 and 2.6.8 are in
<filename class="directory">/opt/NsCDE/src</filename> directory.
</para>
<para>
This patches will add:
</para>
<itemizedlist>
<listitem><para>
   Three underlines Menu Style (used in <guimenuitem>MenuFvwmRoot</guimenuitem> for NsCDE)
</para></listitem>
<listitem><para>
   corrections for cursor icon under buttons of the FvwmScript(1)
    it is really not a nice thing to have <option>XC_hand2</option> which is usually
    used for hyperlinks as a pointer icon when mouse is above buttons. Planned
    to be implemented as an option, not to disturb old default, no
    matter how bad is probably that default
</para></listitem>
<listitem><para>
   FvwmButtons(1) WindowName support - an native alternative to xdotool(1)
    workaround. It will set name and icon name of single subpanels, that
    is, every FvwmButtons object which has titlebar enabled with FVWM
    styles
</para></listitem>
<listitem><para>
   FvwmButtons triangle-in (sunken) support. Provides a 3rd argument
    for <option>indicator</option> parameter of the FvwmButtons(1) button. It can be
    "in" (default for NsCDE in <filename class="directory">fvwm/FrontPanel.fvwmconf)</filename>
    or "out" to confirm the FVWM default. If omitted, "out" is default, since
    it was that way before this patch.
</para></listitem>
</itemizedlist>
<para>
In order to have patched fvwm, apply this patch or patches against FVWM
2.6.7 or 2.6.8 source and (re)compile FVWM. You can even make your own RPM
DEB, Arch, BSD, SunOS or similar package from that and install it.
</para>
<para>
If NsCDE is going to be installed on system with non-patched FVWM, Installer.ksh
option "-w" should be used. This will ensure Front Panel pixmaps instead of built in
triangles on subpanel launcher buttons, and XOverrideFontCursor dynamic preloading
library piece which will handle XC_left_ptr for some FvwmScript(1) widgets instead
of strange default of the XC_hand2. Subpanel window names will be set by the xdotool(1)
xdowrapper script.
</para>
</sect1>

<sect1 id="NsCDE-FVWM3">
<title>FVWM3 Support</title>
<para>
NsCDE from version 1.3 has late beta quality of support for FVWM3.
NsCDE is and will stay compatible for FVWM2 as long as possible.
In the time of this writing, FVWM3 was in it's fourth release and much
of the previous problems are solved, altrough it still has some problems with
FvwmPager and FvwmBacker in multi-monitor setup. Nevertheless, NsCDE will
search for "fvwm" and then "fvwm3" in <varname>$PATH</varname>. If both, FVWM3
and FVWM2 are installed on the same system, FVWM2 will still be used first currently.
This can be overriden in user's environment (for example <filename>$HOME/.bashrc</filename>)
by setting environment variable <varname>FVWM_BIN</varname> with the value which points to
name of the FVWM binary, or full path to the binary if for example, FVWM3 was installed from
source in some non-standard place out of the path.
</para>
<para>
For example:
<programlisting>
<![CDATA[export FVWM_BIN=/opt/fvwm3/bin/fvwm3]]>
</programlisting>
or ...
<programlisting>
<![CDATA[export FVWM_BIN=fvwm3]]>
</programlisting>
or ...
<programlisting>
<![CDATA[export FVWM_BIN=fvwm]]>
</programlisting>
</para>
<para>
When running with FVWM3, NsCDE will behave almost identical as in FVWM2, with
benefit of RandR support in multiple monitors setup. This allows dynamic
addition and removal of physical monitors and better management of such
configurations.
</para>
<para>
Probably the most notable feature of FVWM3 is <varname>DesktopConfiguration</varname>.
FVWM3 configuration parameter <varname>DesktopConfiguration</varname> decides
of workspaces layout in case of multiple monitors. For now, there are three
options: "global" (default), "per-monitor" and "shared". First option is very similar
in layout to old Xinerama support in FVWM2, while second and third model are splitting
workspaces, so different parts of different workspaces can be shown on different
monitors. NsCDE implements dynamic finding and displaying, as well as creation of
joint backdrops combinations for multiple monitors layout out of the box, so old
hack described in <filename>$NSCDE_ROOT/share/examples/fvwm3-per-monitor/README</filename>
is not needed anymore. As in the future more desktop layouts are planned by FVWM3 developers, this
setting has it's GUI control usable on FVWM3 in the
<link linkend="NsCDE-WsPgMgr">Workspaces and Pages Style Manager</link>. NsCDE
provides <varname>InfoStoreAdd desktopconfiguration</varname> directive in
the <filename>$FVWM_USERDIR/NsCDE.conf</filename> when FVWM3 is used. This value can be
edited manually to contain "global", "per-monitor" or "shared" value, or Workspaces and Pages
Manager can be used for that task.
</para>
<para>
Third difference between NsCDE under FVWM2 and FVWM3 is logging. While FVWM2 logged
all it's actions on X server's standard output and standard error, which usually
ended up in <filename>$HOME/.xsession-errors</filename>, FVWM3 logs into default
or configured log file. In NsCDE this file is <filename>$FVWM_USERDIR/tmp/fvwm.log</filename>.
By default FVWM3 does not log anything there if not invoked with "-v" option, but
logging can be toggled by sending SIGUSR2 to FVWM3 process. When <guimenuitem>Watch Errors</guimenuitem>
menu item is called, it has one new option on personalized window menu which is
called from the first (left) titlebar button: <guimenuitem>Togle FVWM3 Logging</guimenuitem>.
When opening this log window, FVWM3 logging will be enabled almost immediately. To have logging
enabled as soon as possible when FVWM3 is started or restarted, infostore variable
<varname>$[infostore.fvwm3_default_logging]</varname> should be set in
<filename>$FVWM_USERDIR/NsCDE.conf</filename>.
</para>
<para>
Caution: using NsCDE under FVWM3 is still a bit of beta quality. Local Pager shown when
changing pages and workspaces will contain primary monitor content, which will be wrong
on the secondary monitor(s). Any misbehaviour should be carefully distinguished if it is
NsCDE or FVWM3 bug while deciding where to report bugs. Watching logs, trying to trigger
the same error under FVWM2 will be a good starting point for diagnostic of such problems
which may manifest itself.
</para>
</sect1>

<sect1 id="NsCDE-Credits">
<title>Credits</title>
<para>
Apart from FVWM, GTK integration framework was forked from one
advanced theme, clock is old standalone widget which I have found
in the old X11 software archives while searching for something which
can act as a Front Panel clock. Pclock fits here perfectly. Xscreensaver
seems to me as a logical choice for screensaver facility.
</para>
<para>
<itemizedlist>
<listitem><para>
 For forked CDEtheme: Jos van Riswick
</para></listitem>
<listitem><para>
 For pclock on a Front Panel: Alexander Kourakos
</para></listitem>
<listitem><para>
 For using Xscreensaver: Jamie Zawinski
</para></listitem>
</itemizedlist>
</para>
</sect1>

<sect1 id="NsCDE-Missing-Parts">
<title>Missing parts and existing problems</title>

<itemizedlist>
<listitem><para>
Application Manager: Maybe with the help of some extensible (but sane and standalone, with
titlebar) file manager, but question remains how to send enumerated apps
from such a file manager view to Front Panel subpanels or as submenu.
Probably external drag and drop applet which can be swallowed in
subpanels to accept drop with middle mouse move and edit subpanel
configuration? This will than replace Subpanels Manager app, but it
must also have functions for editing, deleting etc ...
</para></listitem>

<listitem><para>
Action builder (dtaction) - not likely ever. Use FvwmScript or maybe some Python gui bindings.
</para></listitem>

<listitem><para>
Session Management (dtsession) - NsCDE can use the external custom
Session Managers from various DE's. See examples in
<filename class="directory">share/examples</filename>.
Since there are similar programs in existence, plus FVWM's own functions for
automatic start of programs, NsCDE is more or less covered here.
</para></listitem>
</itemizedlist>
</sect1>

</article>

